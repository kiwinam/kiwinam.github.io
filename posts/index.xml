<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 키위남</title>
        <link>https://kiwinam.com/posts/</link>
        <description>Recent content in Posts on 키위남</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-kr</language>
        <lastBuildDate>Mon, 31 Aug 2020 14:38:00 +0900</lastBuildDate>
        <atom:link href="https://kiwinam.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>[Android] aab 파일 apk 로 변환하기</title>
            <link>https://kiwinam.com/posts/40/aab-to-apk/</link>
            <pubDate>Mon, 31 Aug 2020 14:38:00 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/40/aab-to-apk/</guid>
            <description>aab to apk
  
TL;DR  download bundle tool jar (link 새창)
 run this code
java -jar &amp;quot;bundletool-all-1.2.0.jar&amp;quot;(버전은 최신 버전으로 맞추자) build-apks --bundle=&amp;quot;your.aab(변환할 .aab 파일)&amp;quot; --output=&amp;quot;universal.apks(.apk 파일 경로와 파일명&amp;quot; --mode=universal   

aab 가 무엇인가요? 안드로이드 앱 번들 (Android App Bundle)은 지속적으로 증가하는 APK 의 파일 크기를 해결하기 위해 나왔습니다.
안드로이드는 다양한 플랫폼들을 지원하는게 큰 장점이죠. 확장성이 너무 좋습니다. 하지만 이렇게 다양한 플랫폼을 지원하기 위해 각기 다른 CPU 와 화면 크기, 32bit, 64bit 에 맞는 이진 바이너리 파일들이 APK 에 하나로 뭉쳐져야 합니다.</description>
            <content type="html"><![CDATA[

<p><br/></p>

<figure class="center" style="width: 80%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/40/40-1-75.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/40/40-1-50.webp"
        />
        
    <img src="/img/40/40-1.png"  alt="aab to apk"  class="center"  />


    </picture>
    <figurecaption>
        <p style="width:100%;text-align: center;">aab to apk</p>
    </figurecaption>
</figure>

<hr />

<p><br/></p>

<h2 id="tl-dr">TL;DR</h2>

<ol>
<li><p>download bundle tool jar <a href="https://github.com/google/bundletool/releases" target="_blank">(link 새창)</a></p></li>

<li><p>run this code</p>

<pre><code class="language-cmd">java -jar &quot;bundletool-all-1.2.0.jar&quot;(버전은 최신 버전으로 맞추자) build-apks --bundle=&quot;your.aab(변환할 .aab 파일)&quot; --output=&quot;universal.apks(.apk 파일 경로와 파일명&quot; --mode=universal
</code></pre></li>
</ol>

<p><br/></p>

<p><br/></p>

<h2 id="aab-가-무엇인가요">aab 가 무엇인가요?</h2>

<p>안드로이드 앱 번들 (Android App Bundle)은 지속적으로 증가하는 APK 의 파일 크기를 해결하기 위해 나왔습니다.</p>

<p>안드로이드는 다양한 플랫폼들을 지원하는게 큰 장점이죠. 확장성이 너무 좋습니다.
하지만 이렇게 다양한 플랫폼을 지원하기 위해 각기 다른 CPU 와 화면 크기, 32bit, 64bit 에 맞는 이진 바이너리 파일들이 APK 에 하나로 뭉쳐져야 합니다.</p>

<figure class="center" style="width: 80%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/40/40-2-75.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/40/40-2-50.webp"
        />
        
    <img src="/img/40/40-2.png"  alt="increse apk size"  class="center"  />


    </picture>
    <figurecaption>
        <p style="width:100%;text-align: center;">2013년부터 계속 증가한 APK 사이즈, 현재는 5배가 증가한 상태</p>
    </figurecaption>
</figure>

<p>그렇기 때문에 APK는 시간이 지날 수록 점점 더 비대해졌습니다.</p>

<p>문제는 이렇게 비대해진 apk 파일이 앱 다운로드에 좋지 않은 영향을 미친다는 것이였죠.</p>

<figure class="center" style="width: 80%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/40/40-3-75.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/40/40-3-50.webp"
        />
        
    <img src="/img/40/40-3.png"  alt="conversion apk"  class="center"  />


    </picture>
    <figurecaption>
        <p style="width:100%;text-align: center;">APK 파일 크기에 따른 다운로드 전환율</p>
    </figurecaption>
</figure>

<p>사용자들은 APK 의 크기가 커지면 커질수록 다운로드를 꺼려했습니다.</p>

<p><image></p>

<p>그래서 구글에선 앱 번들을 통해 이러한 apk 의 크기를 줄이고자 합니다. 어떻게 그게 가능할까요?</p>

<p><img src="/img/40/40-4.gif" alt="dynamic delivery" /></p>

<p>위 사진 설명처럼, 기존 APK 가 모든 언어, 모든 화면, 모든 CPU 유형을 다 담은 하나의 바이너리 파일이라면,</p>

<p>aab 에서 다이나믹 딜리버리 된 앱은 현재 디바이스에 필요한 정보만 가져와 설치하기 때문에 설치 파일이 작아집니다.</p>

<p><b>그럼 이제 aab 를 apk 로 변환하는 방법을 알아보겠습니다.</b></p>

<p><br/></p>

<h2 id="how-to">How to?</h2>

<h3 id="step-1-download-bundle-tool">Step 1. Download Bundle tool</h3>

<p>가장 먼저 bundle tool 를 다운로드 받아야합니다.</p>

<p>구글에서 제공하고 있는 bundle tool 의 레포지토리에서 다운로드가 가능합니다.</p>

<p><a href="https://github.com/google/bundletool/releases" target="_blank"><a href="https://github.com/google/bundletool/releases">https://github.com/google/bundletool/releases</a> (새창)</a></p>

<p>링크를 들어가신 뒤, jar 압축 파일을 받아주세요.</p>

<figure class="center" style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/40/40-4-75.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/40/40-4-50.webp"
        />
        
    <img src="/img/40/40-4.png"  alt="download"  class="center"  />


    </picture>
</figure>

<p><br/></p>

<h3 id="step-2-run-apk-extra-command">Step 2. Run APK Extra Command</h3>

<p>이제 aab 파일을 apk 파일로 변경할 시간입니다.</p>

<pre><code class="language-cmd">java -jar &quot;bundletool-all-1.2.0.jar&quot;(버전은 최신 버전으로 맞추자) build-apks --bundle=&quot;your.aab(변환할 .aab 파일)&quot; --output=&quot;universal.apks(.apk 파일 경로와 파일명&quot; --mode=universal
</code></pre>

<p>여기에서 -jar &ldquo;bundletoo..&rdquo; 은 다운로드 받을 때 버전에 따라 버전 명이 변경될 수 있습니다.</p>

<p>위 명령어를 입력해서 aab 파일을 변환 시키면 zip 파일이 반환됩니다.</p>

<p>zip 파일을 열어보면 universal.apk 가 들어 있습니다.</p>

<p><br/></p>

<p>긴 글 읽어주셔서 감사합니다.</p>

<p><br/></p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>클린 코드 in TypeScript #3 - 테스트와 주석 편</title>
            <link>https://kiwinam.com/posts/39/ts-clean-code-test/</link>
            <pubDate>Thu, 18 Jun 2020 17:00:00 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/39/ts-clean-code-test/</guid>
            <description>Clean code
  연관된 글들 Clean Code Guide Series  클린 코드 in TypeScript #1 - 변수와 함수 편 클린 코드 in TypeScript #2 - 객체와 클래스 편 클린 코드 in TypeScript #3 - 테스트와 주석 편 (현재 글)  https://github.com/ryanmcdermott/clean-code-javascript
위 링크에 있는 깃헙 ryanmcdermott 의 clean-code-javascript 에서 내용을 참고하여 만든 클린 코드 가이드를 TypeScript 에서 사용할 수 있도록 정리한 글입니다. 

이전 편을 안보신 분들이라면 보고 오시는 걸 추천드립니다!</description>
            <content type="html"><![CDATA[

<p><br/></p>

<figure class="center" style="width: 80%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/38/38-1-75.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/38/38-1-50.webp"
        />
        
    <img src="/img/38/38-1.jpg"  alt="Clean Code"  class="center"  />


    </picture>
    <figurecaption>
        <p style="width:100%;text-align: center;">Clean code</p>
    </figurecaption>
</figure>

<h2 id="연관된-글들">연관된 글들</h2>

<h3 id="clean-code-guide-series">Clean Code Guide Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/37/ts-clean-code-guide/" target="_blank">클린 코드 in TypeScript #1 - 변수와 함수 편</a></li>
<li><a href="https://kiwinam.com/posts/38/ts-clean-code-class/" target="_blank">클린 코드 in TypeScript #2 - 객체와 클래스 편</a></li>
<li><a href="https://kiwinam.com/posts/39/ts-clean-code-test/" target="_blank">클린 코드 in TypeScript #3 - 테스트와 주석 편</a> (현재 글)</li>
</ol>

<hr />

<p><a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank"><a href="https://github.com/ryanmcdermott/clean-code-javascript">https://github.com/ryanmcdermott/clean-code-javascript</a></a></p>

<p><b>위 링크에 있는 깃헙 ryanmcdermott 의 clean-code-javascript 에서 내용을 참고하여 만든 클린 코드 가이드를 TypeScript 에서 사용할 수 있도록 정리한 글입니다. </b></p>

<p><br/></p>

<p>이전 편을 안보신 분들이라면 보고 오시는 걸 추천드립니다!</p>

<p>반복적으로 등장하는 개념, 결국 클린 코드에서 하고자하는 의도를 파악하는데 더 도움이 됩니다. :)</p>

<p><br/></p>

<h2 id="테스트">테스트</h2>

<hr />

<ul>
<li>테스트는 그 무엇보다 (예를 들면 빠른 개발) 훨씬 중요합니다.</li>
<li>제품의 모든 코드를 100% 커버하는 테스트를 작성할 필요는 없습니다.</li>
</ul>

<h3 id="tdd-test-driven-development-의-세-가지-법칙">TDD(Test Driven Development) 의 세 가지 법칙</h3>

<ol>
<li>실패하는 단위 테스트(Unit test) 를 작성할 때까지 실제 코드를 작성하지 않습니다.</li>
<li>컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성합니다.</li>
<li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성합니다.</li>
</ol>

<p>위 세 가지 법칙을 준수하면서 개발을 한다면, 이런 일이 생깁니다.</p>

<ul>
<li>개발과 테스트를 동시에 작성하게 됩니다. 테스트 코드가 작성이 완료된 후 그 테스트를 통과할 정도의 실제 코드가 작성됩니다.</li>
<li>위 방식으로 모든 팀원이 일하면 매일 수 십개, 수 백개의 테스트 케이스가 나옵니다.</li>
<li>이렇게 일하면 사실상 실제 코드를 전부 테스트 하는 테스트 케이스가 나옵니다.</li>
</ul>

<p><br/></p>

<h3 id="첫-번째-그리고-마지막-규칙">첫 번째 그리고 마지막 규칙</h3>

<ul>
<li>FAST : 테스트는 빨리 실행되어야 합니다. 이유는 테스트를 자주 실행해야 하기 때문입니다.</li>
<li>Independent : 테스트는 서로 의존해서 안됩니다. 독립적으로 또는 동시에 어떤 순서로 실행하던 동일한 출력을 제공해야합니다.</li>
<li>Repeatable : 테스트는 모든 환경에서 반복 가능해야 합니다. 실패의 이유에 대해 변명하면 안됩니다.</li>
<li>Self-Validating : 테스트에 통과한 경우 응답을 위해 로그 파일과 비교할 필요가 없어야 합니다.</li>
<li>Timely : 단위 테스트는 실제 코드 작성 전에 작성되어야 합니다. 실제 코드를 작성한 다음 테스트 코드를 작성하면 테스트가 너무 어려울 수도 있습니다.</li>
</ul>

<p><br/></p>

<h3 id="테스트는-하나의-assert-만-가집니다">테스트는 하나의 Assert 만 가집니다.</h3>

<ul>
<li>테스트는 단일 책임 원칙에 따라야합니다.</li>
<li>단위 테스트 하나 당 하나의 Assert 만 가집니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">import { assert } from 'chai';

describe('AwesomeDate', () =&gt; {
  it('handles date boundaries', () =&gt; {
    let date: AwesomeDate;

    date = new AwesomeDate('1/1/2015');
    assert.equal('1/31/2015', date.addDays(30));

    date = new AwesomeDate('2/1/2016');
    assert.equal('2/29/2016', date.addDays(28));

    date = new AwesomeDate('2/1/2015');
    assert.equal('3/1/2015', date.addDays(28));
  });
});
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">import { assert } from 'chai';

describe('AwesomeDate', () =&gt; {
  it('handles 30-day months', () =&gt; {
    const date = new AwesomeDate('1/1/2015');
    assert.equal('1/31/2015', date.addDays(30));
  });

  it('handles leap year', () =&gt; {
    const date = new AwesomeDate('2/1/2016');
    assert.equal('2/29/2016', date.addDays(28));
  });

  it('handles non-leap year', () =&gt; {
    const date = new AwesomeDate('2/1/2015');
    assert.equal('3/1/2015', date.addDays(28));
  });
});
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="테스트의-이름은-의도를-표시해야합니다">테스트의 이름은 의도를 표시해야합니다.</h3>

<p>안좋은 예:</p>

<pre><code class="language-tsx">describe('Calendar', () =&gt; {
  it('2/29/2020', () =&gt; {
    // ...
  });

  it('throws', () =&gt; {
    // ...
  });
});
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">describe('Calendar', () =&gt; {
  it('should handle leap year', () =&gt; {
    // ...
  });

  it('should throw when format is invalid', () =&gt; {
    // ...
  });
});
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h2 id="동시성">동시성</h2>

<hr />

<h3 id="callback-대신-promise-가-깔끔합니다">Callback 대신 Promise 가 깔끔합니다.</h3>

<ul>
<li>콜백은 깔끔하지 않습니다. 또한 과도한 양의 중첩 (이른바 콜백 지옥) 을 유발합니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">import { get } from 'request';
import { writeFile } from 'fs';

function downloadPage(url: string, saveTo: string, callback: (error: Error, content?: string) =&gt; void) {
  get(url, (error, response) =&gt; {
    if (error) {
      callback(error);
    } else {
      writeFile(saveTo, response.body, (error) =&gt; {
        if (error) {
          callback(error);
        } else {
          callback(null, response.body);
        }
      });
    }
  });
}

downloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html', (error, content) =&gt; {
  if (error) {
    console.error(error);
  } else {
    console.log(content);
  }
});
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">import { get } from 'request';
import { writeFile } from 'fs';
import { promisify } from 'util';

const write = promisify(writeFile);

function downloadPage(url: string, saveTo: string): Promise&lt;string&gt; {
  return get(url)
    .then(response =&gt; write(saveTo, response));
}

downloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html')
  .then(content =&gt; console.log(content))
  .catch(error =&gt; console.error(error));
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="async-await-가-promise-보다-깔끔합니다">Async / Await 가 Promise 보다 깔끔합니다.</h3>

<ul>
<li><code>async/await</code> 구문을 사용하면 Promise 보다 이해하기 쉽고 깔끔한 코드를 작성할 수 있습니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">import { get } from 'request';
import { writeFile } from 'fs';
import { promisify } from 'util';

const write = util.promisify(writeFile);

function downloadPage(url: string, saveTo: string): Promise&lt;string&gt; {
  return get(url).then(response =&gt; write(saveTo, response));
}

downloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html')
  .then(content =&gt; console.log(content))
  .catch(error =&gt; console.error(error));
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">import { get } from 'request';
import { writeFile } from 'fs';
import { promisify } from 'util';

const write = promisify(writeFile);

async function downloadPage(url: string, saveTo: string): Promise&lt;string&gt; {
  const response = await get(url);
  await write(saveTo, response);
  return response;
}

// somewhere in an async function
try {
  const content = await downloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html');
  console.log(content);
} catch (error) {
  console.error(error);
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h2 id="에러-핸들링">에러 핸들링</h2>

<hr />

<ul>
<li>타입스크립트에서 에러 발생은 좋은 현상입니다. 런타임에서 무언가가 잘못 되었다는 것을 식별했고, 프로세스를 중지하며, 콘솔에 정확히 어디에서 어떤 이유로 에러가 발생했다고 알려주기 때문이죠.</li>
</ul>

<h3 id="throw-나-reject-에서는-error-객체를-반환해-주세요">Throw 나 reject 에서는 Error 객체를 반환해 주세요.</h3>

<ul>
<li>JS 와 TS 에선 throw 구문으로 무엇이든 &ldquo;던질&rdquo; 수 있습니다. 다만 약속된 에러인 Error 객체를 리턴함으로써 상위 코드에서 발생할 수 있는 다른 에러들과 분리될 수 있습니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">function calculateTotal(items: Item[]): number {
  throw 'Not implemented.';
}

function get(): Promise&lt;Item[]&gt; {
  return Promise.reject('Not implemented.');
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">function calculateTotal(items: Item[]): number {
  throw new Error('Not implemented.');
}

function get(): Promise&lt;Item[]&gt; {
  return Promise.reject(new Error('Not implemented.'));
}

// or equivalent to:

async function get(): Promise&lt;Item[]&gt; {
  throw new Error('Not implemented.');
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="catch-된-에러를-무시하지-마세요">catch 된 에러를 무시하지 마세요.</h3>

<ul>
<li>오류를 catch 문을 통해 인지한 후 아무런 행동을 하지 않고 그저 console.log 로 표시하지 마세요.

<ul>
<li>console.log 는 수 많은 로그들에 묻혀 못 찾을 가능성이 높습니다.</li>
<li>에러에 대해 로깅할 수 있는 코드 모듈을 만들고 거기에서 처리하는 것도 좋은 방법입니다.</li>
</ul></li>
<li>코드를 작성하면서 무시하고, 추후에 저 코드를 고친다는 건 자동차 키를 눈 속에 묻고 나중에 찾겠다는 것과 다를 바 없습니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">try {
  functionThatMightThrow();
} catch (error) {
  console.log(error);
}

// or even worse

try {
  functionThatMightThrow();
} catch (error) {
  // ignore error
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">import { logger } from './logging'

try {
  functionThatMightThrow();
} catch (error) {
  logger.log(error);
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="거절된-promise-를-무시하지-마세요">거절된 Promise 를 무시하지 마세요.</h3>

<ul>
<li>try/catch 와 비슷한 맥락입니다.</li>
<li>에러 로깅을 console.log 보단 로깅 라이브러리 혹은 특정 로그 모듈을 만들어서 따로 처리해주세요.</li>
<li>코드를 작성하면서 reject 된 부분을 무시하지 말고, 꼭 처리 해주세요. 그렇지 않는다면 그 에러가 돌고 돌아 여러분에게 이자가 붙어 찾아옵니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">getUser()
  .then((user: User) =&gt; {
    return sendEmail(user.email, 'Welcome!');
  })
  .catch((error) =&gt; {
    console.log(error);
  });
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">import { logger } from './logging'

getUser()
  .then((user: User) =&gt; {
    return sendEmail(user.email, 'Welcome!');
  })
  .catch((error) =&gt; {
    logger.log(error);
  });

// or using the async/await syntax:

try {
  const user = await getUser();
  await sendEmail(user.email, 'Welcome!');
} catch (error) {
  logger.log(error);
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h2 id="서식-formatting">서식 (Formatting)</h2>

<hr />

<p>코드 서식 (formatting 혹은 컨벤션으로 이해해도 좋습니다.) 은 정답이 없습니다. 주관적인 영역이고 지켜야할 강력한 법규 같은 건 없습니다. 다만 회사에 따라 정해놓은 코드 규칙이 존재할 수는 있죠.</p>

<p>중요한 것은 정해진 서식이 있다면 그것을 혼자 무시하진 마세요.</p>

<p>그리고 코드 서식은 일반적으로 사용하는 몇 가지 양식이 있습니다. 그 중 하나를 골라 사용하면 됩니다. 앞서 말했듯이 정답이 없기 때문에 어느 것이 더 뛰어나고 좋은 것은 없습니다. 논쟁을 하기보단 하나만 골라서 사용하시면 됩니다.</p>

<p>Typescript 에는 TSLint 라는 강력한 라이브러리가 있습니다. 코드 가독성과 일관성을 정적으로 분석해주는 좋은 툴입니다. TSLint 를 기반으로 하는 다양할 서식 라이브러리들이 있으니 골라서 사용해보세요.</p>

<p>아래에선  대표적으로 통용되는 서식 몇 가지를 소개해 드리겠습니다.</p>

<p><br/></p>

<h3 id="상수에는-대문자를-사용합니다">상수에는 대문자를 사용합니다.</h3>

<p>안좋은 예:</p>

<pre><code class="language-tsx">const DAYS_IN_WEEK = 7;
const daysInMonth = 30;

const songs = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];
const Artists = ['ACDC', 'Led Zeppelin', 'The Beatles'];

function eraseDatabase() {}
function restore_database() {}

type animal = { /* ... */ }
type Container = { /* ... */ }
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">const DAYS_IN_WEEK = 7;
const DAYS_IN_MONTH = 30;

const SONGS = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];
const ARTISTS = ['ACDC', 'Led Zeppelin', 'The Beatles'];

function eraseDatabase() {}
function restoreDatabase() {}

type Animal = { /* ... */ }
type Container = { /* ... */ }
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="함수가-다른-함수를-호출하는-경우에-서로-가깝게-배치해-주세요">함수가 다른 함수를 호출하는 경우에, 서로 가깝게 배치해 주세요.</h3>

<ul>
<li>함수 내에서 다른 함수를 다시 호출하는 경우, 두 함수를 세로로 가깝게 배치해 주세요.</li>
<li>이상적으로는 기존 함수 아래에 피 호출 함수를 두는 것이 좋습니다.</li>
<li>개발자들은 신문을 읽을 때 처럼 코드를 위에서 아래로 읽는 경향이 있기 때문에 이렇게 배치합니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">class PerformanceReview {
  constructor(private readonly employee: Employee) {
  }

  private lookupPeers() {
    return db.lookup(this.employee.id, 'peers');
  }

  private lookupManager() {
    return db.lookup(this.employee, 'manager');
  }

  private getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  review() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();

    // ...
  }

  private getManagerReview() {
    const manager = this.lookupManager();
  }

  private getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.review();
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">class PerformanceReview {
  constructor(private readonly employee: Employee) {
  }

  review() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();

    // ...
  }

  private getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  private lookupPeers() {
    return db.lookup(this.employee.id, 'peers');
  }

  private getManagerReview() {
    const manager = this.lookupManager();
  }

  private lookupManager() {
    return db.lookup(this.employee, 'manager');
  }

  private getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.review();
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="import-정리하기">Import 정리하기</h3>

<p>깨끗한 import 문을 보면 코드의 종속성을 파악하기 쉬워집니다.</p>

<ul>
<li>import 는 알파벳 순으로 정렬해 주세요.</li>
<li>사용하지 않는 import 는 없애주세요.</li>
<li>Named import 문은 알파벳 순으로 기재해 주세요. <code>import { A, B, C } from 'foo';</code></li>
<li>소스를 가져오는 import 도 마찬가지로 알파벳 순으로 기재해 주세요. <code>import * as foo from 'a';</code></li>
<li>import 의 그룹을 구분할 땐 빈 칸으로 구분합니다.</li>
<li>그룹의 순서는 아래 형식을 따라 주시면 좋습니다.

<ul>
<li>Polyfills <code>import 'reflect-metadata';</code></li>
<li>노드 내장 모듈 (Node builtin modules) <code>import fs from 'fs';</code></li>
<li>외부 모듈 (external modules) <code>import { query } from 'itiriri';</code></li>
<li>내부 모듈 (internal modules) <code>import { UserService } from 'src/services/userService';</code></li>
<li>부모 디렉토리에서 참조하는 모듈 (modules from a parent directory) <code>import foo from '../foo'; import qux from '../../foo/qux';</code></li>
<li>동일 폴더 혹은 형제 폴더에서 참조하는 모듈 (modules from the same or a sibling&rsquo;s directory) <code>import bar from './bar'; import baz from './bar/baz';</code></li>
</ul></li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">import { TypeDefinition } from '../types/typeDefinition';
import { AttributeTypes } from '../model/attribute';
import { ApiCredentials, Adapters } from './common/api/authorization';
import fs from 'fs';
import { ConfigPlugin } from './plugins/config/configPlugin';
import { BindingScopeEnum, Container } from 'inversify';
import 'reflect-metadata';
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">import 'reflect-metadata';

import fs from 'fs';
import { BindingScopeEnum, Container } from 'inversify';

import { AttributeTypes } from '../model/attribute';
import { TypeDefinition } from '../types/typeDefinition';

import { ApiCredentials, Adapters } from './common/api/authorization';
import { ConfigPlugin } from './plugins/config/configPlugin';
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="typescript-aliases-를-사용하세요">Typescript aliases 를 사용하세요.</h3>

<ul>
<li>compilerOptions 에서 baseUrl 의 지정을 통해 더 정리된 import 를 사용할 수 있습니다</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">import { UserService } from '../../../services/UserService';
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">import { UserService } from '@services/UserService';

// tsconfig.json
...
  &quot;compilerOptions&quot;: {
    ...
    &quot;baseUrl&quot;: &quot;src&quot;,
    &quot;paths&quot;: {
      &quot;@services&quot;: [&quot;services/*&quot;]
    }
    ...
  }
...
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h2 id="주석">주석</h2>

<hr />

<p>주석을 사용할 때는 불가피하게 주석 없이 표현하지 못한 것이 생겼을 때 입니다.</p>

<p>코드는 유일한 온리원 진실과 진리의 원천이여야 합니다.</p>

<p>다시 말해 주석으로 해석하는 것 보다 코드로 얘기해라 라는 것입니다.</p>

<p>안 좋은 코드에 주석을 달지 마라.
안 좋은 코드를 고쳐라.</p>

<p>— Brian W. Kernighan 및 PJ Plaugher</p>

<p><br/></p>

<h3 id="주석-대신-코드로-설명해라">주석 대신 코드로 설명해라</h3>

<ul>
<li>좋은 코드는 대부분 코드가 문서 자체입니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">// Check if subscription is active.
if (subscription.endDate &gt; Date.now) {  }
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">const isSubscriptionActive = subscription.endDate &gt; Date.now;
if (isSubscriptionActive) { /* ... */ }
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="코드를-주석-처리해서-남겨두지-마세요">코드를 주석 처리해서 남겨두지 마세요.</h3>

<ul>
<li>버전 관리 툴이 존재하는 이유입니다. git log 로 확인할 수 있으니 지우세요.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">type User = {
  name: string;
  email: string;
  // age: number;
  // jobPosition: string;
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">type User = {
  name: string;
  email: string;
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="저널-주석은-필요-없습니다">저널 주석은 필요 없습니다.</h3>

<ul>
<li>버전 관리 툴을 쓰세요.</li>
<li>사용하지 않는 코드, 주석 처리 된 코드, 특히 해당 코드의 타임라인을 설명하는 저널 주석을 필요 없습니다. 다시 한 번 말씀 드리지만, 우리에겐 <code>git log</code> 가 있습니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">/**
 * 2016-12-20: Removed monads, didn't understand them (RM)
 * 2016-10-01: Improved using special monads (JP)
 * 2016-02-03: Added type-checking (LI)
 * 2015-03-14: Implemented combine (JR)
 */
function combine(a: number, b: number): number {
  return a + b;
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">function combine(a: number, b: number): number {
  return a + b;
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="코드의-위치를-표시하려-하지-마세요">코드의 위치를 표시하려 하지 마세요.</h3>

<ul>
<li>여기서 부터 메소드다~~~ 여기부터 private 메소드가 있다~~ 하는 주석을 없애세요.</li>
<li>주석 대신 들여 쓰기, 서식, 변수 이름, 함수 이름으로 시각적인 구조를 제공하세요.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">////////////////////////////////////////////////////////////////////////////////
// Client class
////////////////////////////////////////////////////////////////////////////////
class Client {
  id: number;
  name: string;
  address: Address;
  contact: Contact;

  ////////////////////////////////////////////////////////////////////////////////
  // public methods
  ////////////////////////////////////////////////////////////////////////////////
  public describe(): string {
    // ...
  }

  ////////////////////////////////////////////////////////////////////////////////
  // private methods
  ////////////////////////////////////////////////////////////////////////////////
  private describeAddress(): string {
    // ...
  }

  private describeContact(): string {
    // ...
  }
};
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">class Client {
  id: number;
  name: string;
  address: Address;
  contact: Contact;

  public describe(): string {
    // ...
  }

  private describeAddress(): string {
    // ...
  }

  private describeContact(): string {
    // ...
  }
};
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="todo-주석">TODO 주석</h3>

<ul>
<li>나중에 개선이 필요하다 생각되면, 코드에 <code>// TODO</code> 를 사용해서 메모하세요.</li>
<li>대부분의 IDE 는 이런 종류의 주석을 컴파일 단계 혹은 커밋할 때 체크 해줍니다.</li>
<li>단, TODO 주석은 잘못된 코드에 대해 변명을 적는 곳이 아닙니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-tsx">function getActiveSubscriptions(): Promise&lt;Subscription[]&gt; {
  // ensure `dueDate` is indexed.
  return db.subscriptions.find({ dueDate: { $lte: new Date() } });
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-tsx">function getActiveSubscriptions(): Promise&lt;Subscription[]&gt; {
  // TODO: ensure `dueDate` is indexed.
  return db.subscriptions.find({ dueDate: { $lte: new Date() } });
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<p>여기까지 타입스크립트 클린 코드 가이드, 테스트와 주석 편이였습니다.</p>

<p>정말 길고 긴 클린 코드 가이드였네요.</p>

<p>읽어주신 분들 감사합니다. :)</p>

<p><br/></p>

<h2 id="연관된-글들-1">연관된 글들</h2>

<h3 id="clean-code-guide-series-1">Clean Code Guide Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/37/ts-clean-code-guide/" target="_blank">클린 코드 in TypeScript #1 - 변수와 함수편</a></li>
<li><a href="https://kiwinam.com/posts/38/ts-clean-code-class/" target="_blank">클린 코드 in TypeScript #2 - 객체와 클래스편</a></li>
<li><a href="https://kiwinam.com/posts/39/ts-clean-code-test/" target="_blank">클린 코드 in TypeScript #3 - 테스트와 주석 편</a> (현재 글)
<br/></li>
</ol>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>클린 코드 in TypeScript #2 - 객체와 클래스편</title>
            <link>https://kiwinam.com/posts/38/ts-clean-code-class/</link>
            <pubDate>Thu, 26 Mar 2020 00:21:00 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/38/ts-clean-code-class/</guid>
            <description>Clean code
  연관된 글들 Clean Code Guide Series  클린 코드 in TypeScript #1 - 변수와 함수편 클린 코드 in TypeScript #2 - 객체와 클래스편 (현재 글)  https://github.com/ryanmcdermott/clean-code-javascript
위 링크에 있는 깃헙 ryanmcdermott 의 clean-code-javascript 에서 내용을 참고하여 만든 클린 코드 가이드를 TypeScript 에서 사용할 수 있도록 정리한 글입니다. 

이전 편을 안보신 분들이라면 보고 오시는 걸 추천드립니다!
반복적으로 등장하는 개념, 결국 클린 코드에서 하고자하는 의도를 파악하는데 더 도움이 됩니다.</description>
            <content type="html"><![CDATA[

<p><br/></p>

<figure class="center" style="width: 80%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/38/38-1-75.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/38/38-1-50.webp"
        />
        
    <img src="/img/38/38-1.jpg"  alt="Clean Code"  class="center"  />


    </picture>
    <figurecaption>
        <p style="width:100%;text-align: center;">Clean code</p>
    </figurecaption>
</figure>

<h2 id="연관된-글들">연관된 글들</h2>

<h3 id="clean-code-guide-series">Clean Code Guide Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/37/ts-clean-code-guide/" target="_blank">클린 코드 in TypeScript #1 - 변수와 함수편</a></li>
<li><a href="https://kiwinam.com/posts/38/ts-clean-code-class/" target="_blank">클린 코드 in TypeScript #2 - 객체와 클래스편</a> (현재 글)</li>
</ol>

<hr />

<p><a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank"><a href="https://github.com/ryanmcdermott/clean-code-javascript">https://github.com/ryanmcdermott/clean-code-javascript</a></a></p>

<p><b>위 링크에 있는 깃헙 ryanmcdermott 의 clean-code-javascript 에서 내용을 참고하여 만든 클린 코드 가이드를 TypeScript 에서 사용할 수 있도록 정리한 글입니다. </b></p>

<p><br/></p>

<p>이전 편을 안보신 분들이라면 보고 오시는 걸 추천드립니다!</p>

<p>반복적으로 등장하는 개념, 결국 클린 코드에서 하고자하는 의도를 파악하는데 더 도움이 됩니다. :)</p>

<p><br/></p>

<h2 id="객체와-데이터-구조">객체와 데이터 구조</h2>

<hr />

<h3 id="getter-setter">Getter &amp; Setter</h3>

<hr />

<ul>
<li>객체의 캡슐화</li>
<li>로깅 및 오류 처리가 쉬워짐</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-typescript">type BankAccount = {
    balance: number;
    // ...
}

const value = 100;
const account: BankAccount = {
    balance: 0,
    // ...
};

if (value &lt; 0) {
    throw new Error('Cannot set negative balance.');
}

account.balance = value;
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">class BankAccount {
    private accountBalance: number = 0;

    get balance(): number {
    return this.accountBalance;
    }

    set balance(value: number) {
    if (value &lt; 0) {
        throw new Error('Cannot set negative balance.');
    }

    this.accountBalance = value;
    }

    // ...
}

// Now `BankAccount` encapsulates the validation logic.
// If one day the specifications change, and we need extra validation rule,
// we would have to alter only the `setter` implementation,
// leaving all dependent code unchanged.
const account = new BankAccount();
account.balance = 100;
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="객체-멤버들의-접근-권한자를-설정하세요">객체 멤버들의 접근 권한자를 설정하세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">class Circle {
    radius: number;
    
    constructor(radius: number) {
    this.radius = radius;
    }

    perimeter() {
    return 2 * Math.PI * this.radius;
    }

    surface() {
    return Math.PI * this.radius * this.radius;
    }
}
</code></pre>

<p>좋은 에:</p>

<pre><code class="language-typescript">class Circle {
    constructor(private readonly radius: number) {
    }

    perimeter() {
    return 2 * Math.PI * this.radius;
    }

    surface() {
    return Math.PI * this.radius * this.radius;
    }
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="읽기-전용을-활용하세요">읽기 전용을 활용하세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">interface Config {
    host: string;
    port: string;
    db: string;
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">interface Config {
    readonly host: string;
    readonly port: string;
    readonly db: string;
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h2 id="클래스">클래스</h2>

<hr />

<h3 id="클래스는-작게-만들어야합니다">클래스는 작게 만들어야합니다.</h3>

<hr />

<ul>
<li>클래스이 커지면 의존성이 커집니다.</li>
<li>단일 책임 원칙의 클래스를 만들도록 노력해야합니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-typescript">class Dashboard {
    getLanguage(): string { /* ... */ }
    setLanguage(language: string): void { /* ... */ }
    showProgress(): void { /* ... */ }
    hideProgress(): void { /* ... */ }
    isDirty(): boolean { /* ... */ }
    disable(): void { /* ... */ }
    enable(): void { /* ... */ }
    addSubscription(subscription: Subscription): void { /* ... */ }
    removeSubscription(subscription: Subscription): void { /* ... */ }
    addUser(user: User): void { /* ... */ }
    removeUser(user: User): void { /* ... */ }
    goToHomePage(): void { /* ... */ }
    updateProfile(details: UserDetails): void { /* ... */ }
    getVersion(): string { /* ... */ }
    // ...
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">class Dashboard {
    disable(): void { /* ... */ }
    enable(): void { /* ... */ }
    getVersion(): string { /* ... */ }
}

// split the responsibilities by moving the remaining methods to other classes
// ...
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="높은-응집력과-낮은-결합도를-갖도록-하세요">높은 응집력과 낮은 결합도를 갖도록 하세요.</h3>

<hr />

<ul>
<li>응집력은 멤버 변수들이 서로 연관 되어 있음을 뜻합니다.</li>
<li>이상적으로는 모든 멤버 변수가 각자의 메소드를 사용해야합니다.</li>
<li>하지만 이건 항상 가능한 시나리오는 아니고, 권장하지 않습니다.</li>
<li>그렇지만 응집력이 높은 클래스를 지향해야합니다.</li>
<li>결합도는 두 클래스가 서로 연관되어 있거나 의존하는 방식을 나타냅니다.</li>
<li>A 클래스의 변경이 B 클래스에 영향을 미치지 않으면 A 와 B는 낮은 결합도를 가지고 있다 합니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-typescript">class UserManager {
    // Bad: each private variable is used by one or another group of methods.
    // It makes clear evidence that the class is holding more than a single responsibility.
    // If I need only to create the service to get the transactions for a user,
    // I'm still forced to pass and instance of `emailSender`.
    constructor(
    private readonly db: Database,
    private readonly emailSender: EmailSender) {
    }

    async getUser(id: number): Promise&lt;User&gt; {
    return await db.users.findOne({ id });
    }

    async getTransactions(userId: number): Promise&lt;Transaction[]&gt; {
    return await db.transactions.find({ userId });
    }

    async sendGreeting(): Promise&lt;void&gt; {
    await emailSender.send('Welcome!');
    }

    async sendNotification(text: string): Promise&lt;void&gt; {
    await emailSender.send(text);
    }

    async sendNewsletter(): Promise&lt;void&gt; {
    // ...
    }
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">class UserService {
    constructor(private readonly db: Database) {
    }

    async getUser(id: number): Promise&lt;User&gt; {
    return await this.db.users.findOne({ id });
    }

    async getTransactions(userId: number): Promise&lt;Transaction[]&gt; {
    return await this.db.transactions.find({ userId });
    }
}

class UserNotifier {
    constructor(private readonly emailSender: EmailSender) {
    }

    async sendGreeting(): Promise&lt;void&gt; {
    await this.emailSender.send('Welcome!');
    }

    async sendNotification(text: string): Promise&lt;void&gt; {
    await this.emailSender.send(text);
    }

    async sendNewsletter(): Promise&lt;void&gt; {
    // ...
    }
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="상속보다-구성-composition-을-씁니다">상속보다 구성 (Composition)을 씁니다.</h3>

<hr />

<ul>
<li>가능한 경우 상속보다 구성을 선호해야 합니다.</li>
<li>상속은 &ldquo;has-a&rdquo; 관계가 아니라, &ldquo;Is-a&rdquo; 관계를 나타냅니다. (Human is a Animal? OR Human has a Animal?)</li>
<li>기본 클래스를 변경해서 파생 클래스를 전체적으로 변경할 수 있습니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-typescript">class Employee {
    constructor(
    private readonly name: string,
    private readonly email: string) {
    }

    // ...
}

// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee
class EmployeeTaxData extends Employee {
    constructor(
    name: string,
    email: string,
    private readonly ssn: string,
    private readonly salary: number) {
    super(name, email);
    }

    // ...
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">class Employee {
    private taxData: EmployeeTaxData;

    constructor(
    private readonly name: string,
    private readonly email: string) {
    }

    setTaxData(ssn: string, salary: number): Employee {
    this.taxData = new EmployeeTaxData(ssn, salary);
    return this;
    }

    // ...
}

class EmployeeTaxData {
    constructor(
    public readonly ssn: string,
    public readonly salary: number) {
    }

    // ...
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="메소드-체인을-사용하세요">메소드 체인을 사용하세요.</h3>

<hr />

<ul>
<li>일반적으로 이 패턴이 유용할 때가 많습니다.</li>
<li>메소드 체인은 코드를 더 읽기 쉽게 만듭니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-typescript">class QueryBuilder {
    private collection: string;
    private pageNumber: number = 1;
    private itemsPerPage: number = 100;
    private orderByFields: string[] = [];

    from(collection: string): void {
    this.collection = collection;
    }

    page(number: number, itemsPerPage: number = 100): void {
    this.pageNumber = number;
    this.itemsPerPage = itemsPerPage;
    }

    orderBy(...fields: string[]): void {
    this.orderByFields = fields;
    }

    build(): Query {
    // ...
    }
}

// ...

const queryBuilder = new QueryBuilder();
queryBuilder.from('users');
queryBuilder.page(1, 100);
queryBuilder.orderBy('firstName', 'lastName');

const query = queryBuilder.build();
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">class QueryBuilder {
    private collection: string;
    private pageNumber: number = 1;
    private itemsPerPage: number = 100;
    private orderByFields: string[] = [];

    from(collection: string): this {
    this.collection = collection;
    return this;
    }

    page(number: number, itemsPerPage: number = 100): this {
    this.pageNumber = number;
    this.itemsPerPage = itemsPerPage;
    return this;
    }

    orderBy(...fields: string[]): this {
    this.orderByFields = fields;
    return this;
    }

    build(): Query {
    // ...
    }
}

// ...

const query = new QueryBuilder()
    .from('users')
    .page(1, 100)
    .orderBy('firstName', 'lastName')
    .build();
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<p>여기까지 타입스크립트 클린 코드 가이드, 변수와 함수 편이였습니다.</p>

<p>다음 포스팅은 클래스에 대해 알아보도록 하겠습니다.</p>

<p><br/></p>

<h2 id="연관된-글들-1">연관된 글들</h2>

<h3 id="clean-code-guide-series-1">Clean Code Guide Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/37/ts-clean-code-guide/" target="_blank">클린 코드 in TypeScript #1 - 변수와 함수편</a></li>
<li><a href="https://kiwinam.com/posts/38/ts-clean-code-class/" target="_blank">클린 코드 in TypeScript #2 - 객체와 클래스편</a> (현재 글)</li>
</ol>

<p><br/></p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>클린 코드 in TypeScript #1 - 변수와 함수편</title>
            <link>https://kiwinam.com/posts/37/ts-clean-code-guide/</link>
            <pubDate>Sun, 22 Mar 2020 14:38:00 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/37/ts-clean-code-guide/</guid>
            <description>정리하자 정리! 코드 정리!
  https://github.com/ryanmcdermott/clean-code-javascript
위 링크에 있는 깃헙 ryanmcdermott 의 clean-code-javascript 에서 내용을 참고하여 만든 클린 코드 가이드를 TypeScript 에서 사용할 수 있도록 정리한 글입니다. 
영어로 된 가이드 글을 번역하고 (고마워요 파파고) 제 생각에 중요하다 느낀 것들만 추려 모아 봤습니다.
이 곳에 적힌 모든 가이드를 따르긴 힘들겠지만, 이런게 있다라고 읽어보고 코드에 적용해보려는 노력을 하는게 클린 코드로 나아가는 한 걸음이라고 생각합니다!
이번 편은 변수와 함수에 대해 포스팅하겠습니다.</description>
            <content type="html"><![CDATA[

<p><br/></p>

<figure class="center" style="width: 80%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/37/37-1-75.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/37/37-1-50.webp"
        />
        
    <img src="/img/37/37-1.jpg"  alt="Clean Code"  class="center"  />


    </picture>
    <figurecaption>
        <p style="width:100%;text-align: center;">정리하자 정리! 코드 정리!</p>
    </figurecaption>
</figure>

<p><a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank"><a href="https://github.com/ryanmcdermott/clean-code-javascript">https://github.com/ryanmcdermott/clean-code-javascript</a></a></p>

<p><b>위 링크에 있는 깃헙 ryanmcdermott 의 clean-code-javascript 에서 내용을 참고하여 만든 클린 코드 가이드를 TypeScript 에서 사용할 수 있도록 정리한 글입니다. </b></p>

<p>영어로 된 가이드 글을 번역하고 <del><i>(고마워요 파파고)</i></del> 제 생각에 중요하다 느낀 것들만 추려 모아 봤습니다.</p>

<p>이 곳에 적힌 모든 가이드를 따르긴 힘들겠지만, 이런게 있다라고 읽어보고 코드에 적용해보려는 노력을 하는게 클린 코드로 나아가는 한 걸음이라고 생각합니다!</p>

<p>이번 편은 변수와 함수에 대해 포스팅하겠습니다.</p>

<p><br/></p>

<p><b><em>장문입니다..읽기 전 숨 한 번 쉬고 갈까요?</em></b></p>

<hr />

<h2 id="변수">변수</h2>

<h3 id="의미-있고-발음하기-쉬운-변수-이름">의미 있고 발음하기 쉬운 변수 이름</h3>

<hr />

<p><strong>안좋은 예:</strong></p>

<pre><code class="language-typescript">function between&lt;T&gt;(a1: T, a2: T, a3: T): boolean {
    return a2 &lt;= a1 &amp;&amp; a1 &lt;= a3;
}
</code></pre>

<p><strong>좋은 예:</strong></p>

<pre><code class="language-typescript">function between&lt;T&gt;(value: T, left: T, right: T): boolean {
    return left &lt;= value &amp;&amp; value &lt;= right;
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="동일한-유형의-변수에-동일한-어휘를-사용하세요">동일한 유형의 변수에 동일한 어휘를 사용하세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">function getUserInfo(): User;
function getUserDetails(): User;
function getUserData(): User;
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">function getUser(): User;
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="검색-가능한-이름을-사용하세요">검색 가능한 이름을 사용하세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">// 86400000 의 의미는 뭘까요?
setTimeout(blastOff, 86400000);
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">const MILLISECONDS_IN_A_DAY = 8640000;
setTimeout(blastOff, MILLISECONDS_IN_A_DAY);
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="자신만-알아볼-수-있는-작명을-피하세요">자신만 알아볼 수 있는 작명을 피하세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">declare const users: Map&lt;string, User&gt;;

for (const keyValue of users) {
    // iterate through users map
    // keyValue 는 뭘 의미하나요?
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">declare const users: Map&lt;string, User&gt;;

for (const [id, user] of users) {
    // iterate through users map
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="암시적으로-이름을-짓지-마세요">암시적으로 이름을 짓지 마세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">const u = getUser();
const s = getSubscription();
const t = charge(u, s);
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">const user = getUser();
const subscription = getSubscription();
const transaction = charge(user, subscription);
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="문맥상-필요없는-것들을-쓰지-마세요">문맥상 필요없는 것들을 쓰지 마세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">type Car = {
    carMake: string;
    carModel: string;
    carColor: string;
}

function print(car: Car): void {
    console.log(`${car.carMake} ${car.carModel} (${car.carColor})`);
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">type Car = {
    make: string;
    model: string;
    color: string;
}

function print(car: Car): void {
    console.log(`${car.make} ${car.model} (${car.color})`);
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="기본-매개변수가-short-circuiting-트릭이나-조건문-보다-깔끔합니다">기본 매개변수가 short circuiting 트릭이나 조건문 보다 깔끔합니다</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">function loadPages(count?: number) {
    const loadCount = count !== undefined ? count : 10;
    // ...
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">function loadPages(count: number = 10) {
    // ...
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="enum-으로-의도를-코드에-표현해-주세요">enum 으로 의도를 코드에 표현해 주세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">const GENRE = {
    ROMANTIC: 'romantic',
    DRAMA: 'drama',
    COMEDY: 'comedy',
    DOCUMENTARY: 'documentary',
}

projector.configureFilm(GENRE.COMEDY);

class Projector {
    // delactation of Projector
    configureFilm(genre) {
    switch (genre) {
        case GENRE.ROMANTIC:
        // some logic to be executed 
    }
    }
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">enum GENRE {
    ROMANTIC,
    DRAMA,
    COMEDY,
    DOCUMENTARY,
}

projector.configureFilm(GENRE.COMEDY);

class Projector {
    // delactation of Projector
    configureFilm(genre) {
    switch (genre) {
        case GENRE.ROMANTIC:
        // some logic to be executed 
    }
    }
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<p><br/></p>

<h2 id="함수">함수</h2>

<hr />

<p><br/></p>

<h3 id="함수-인수를-2개-이하로-줄이세요">함수 인수를 2개 이하로 줄이세요.</h3>

<hr />

<ul>
<li>매개 변수가 3개 이상이 되면, 테스트 해야하는 경우의 수가 많아집니다.</li>
<li>1개나 2개의 인자를 가지고 있는 것이 가장 이상적인 케이스입니다.</li>
<li>2개 이상의 인자를 가진 함수라면 너무 많은 일을 하는 함수일 가능성이 있습니다.</li>
</ul>

<p>안좋은 예:</p>

<pre><code class="language-typescript">function createMenu(title: string, body: string, buttonText: string, cancellable: boolean) {
    // ...
}

createMenu('Foo', 'Bar', 'Baz', true);
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">function createMenu(options: { title: string, body: string, buttonText: string, cancellable: boolean }) {
    // ...
}

createMenu({
    title: 'Foo',
    body: 'Bar',
    buttonText: 'Baz',
    cancellable: true
});
</code></pre>

<p><strong>Type aliases</strong> 를 사용하면 가독성을 향상 시킬 수 있습니다.</p>

<pre><code class="language-typescript">type MenuOptions = { title: string, body: string, buttonText: string, cancellable: boolean };

function createMenu(options: MenuOptions) {
    // ...
}

createMenu({
    title: 'Foo',
    body: 'Bar',
    buttonText: 'Baz',
    cancellable: true
});
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="함수는-한-가지-일을-해야합니다">함수는 한 가지 일을 해야합니다.</h3>

<hr />

<ul>
<li>소프트웨어 엔지니어링에서 가장 중요한 규칙입니다.</li>

<li><p>함수가 둘 이상의 작업을 수행하면 작성, 테스트 및 추론하기가 더 어렵습니다.</p>

<pre><code class="language-typescript">안좋은 예:

function emailClients(clients: Client[]) {
clients.forEach((client) =&gt; {
const clientRecord = database.lookup(client);
if (clientRecord.isActive()) {
    email(client);
}
});
}
</code></pre></li>
</ul>

<p>좋은 예:</p>

<pre><code class="language-typescript">function emailClients(clients: Client[]) {
    clients.filter(isActiveClient).forEach(email);
}

function isActiveClient(client: Client) {
    const clientRecord = database.lookup(client);
    return clientRecord.isActive();
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="함수명은-함수가-무엇을-하는지-알-수-있어야-합니다">함수명은 함수가 무엇을 하는지 알 수 있어야 합니다</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">function addToDate(date: Date, month: number): Date {
    // ...
}

const date = new Date();

// It's hard to tell from the function name what is added
addToDate(date, 1);
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">function addMonthToDate(date: Date, month: number): Date {
    // ...
}

const date = new Date();
addMonthToDate(date, 1);
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="함수는-단일-행동을-추상화-해야합니다">함수는 단일 행동을 추상화 해야합니다.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">function parseCode(code: string) {
    const REGEXES = [ /* ... */ ];
    const statements = code.split(' ');
    const tokens = [];

    REGEXES.forEach((regex) =&gt; {
    statements.forEach((statement) =&gt; {
        // ...
    });
    });

    const ast = [];
    tokens.forEach((token) =&gt; {
    // lex...
    });

    ast.forEach((node) =&gt; {
    // parse...
    });
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">const REGEXES = [ /* ... */ ];

function parseCode(code: string) {
    const tokens = tokenize(code);
    const syntaxTree = parse(tokens);

    syntaxTree.forEach((node) =&gt; {
    // parse...
    });
}

function tokenize(code: string): Token[] {
    const statements = code.split(' ');
    const tokens: Token[] = [];

    REGEXES.forEach((regex) =&gt; {
    statements.forEach((statement) =&gt; {
        tokens.push( /* ... */ );
    });
    });

    return tokens;
}

function parse(tokens: Token[]): SyntaxTree {
    const syntaxTree: SyntaxTree[] = [];
    tokens.forEach((token) =&gt; {
    syntaxTree.push( /* ... */ );
    });

    return syntaxTree;
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="중복된-코드를-작성하지-마세요">중복된 코드를 작성하지 마세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">function showDeveloperList(developers: Developer[]) {
    developers.forEach((developer) =&gt; {
    const expectedSalary = developer.calculateExpectedSalary();
    const experience = developer.getExperience();
    const githubLink = developer.getGithubLink();

    const data = {
        expectedSalary,
        experience,
        githubLink
    };

    render(data);
    });
}

function showManagerList(managers: Manager[]) {
    managers.forEach((manager) =&gt; {
    const expectedSalary = manager.calculateExpectedSalary();
    const experience = manager.getExperience();
    const portfolio = manager.getMBAProjects();

    const data = {
        expectedSalary,
        experience,
        portfolio
    };

    render(data);
    });
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">class Developer {
    // ...
    getExtraDetails() {
    return {
        githubLink: this.githubLink,
    }
    }
}

class Manager {
    // ...
    getExtraDetails() {
    return {
        portfolio: this.portfolio,
    }
    }
}

function showEmployeeList(employee: Developer | Manager) {
    employee.forEach((employee) =&gt; {
    const expectedSalary = employee.calculateExpectedSalary();
    const experience = employee.getExperience();
    const extra = employee.getExtraDetails();

    const data = {
        expectedSalary,
        experience,
        extra,
    };

    render(data);
    });
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="object-assign을-사용해-기본-객체를-만드세요">Object.assign을 사용해 기본 객체를 만드세요</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">type MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };

function createMenu(config: MenuConfig) {
    config.title = config.title || 'Foo';
    config.body = config.body || 'Bar';
    config.buttonText = config.buttonText || 'Baz';
    config.cancellable = config.cancellable !== undefined ? config.cancellable : true;

    // ...
}

createMenu({ body: 'Bar' });
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">type MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };

function createMenu(config: MenuConfig) {
    const menuConfig = Object.assign({
    title: 'Foo',
    body: 'Bar',
    buttonText: 'Baz',
    cancellable: true
    }, config);

    // ...
}

createMenu({ body: 'Bar' });
</code></pre>

<ul>
<li><p>기본 값을 설정할 수도 있습니다.</p>

<pre><code class="language-typescript">type MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };

function createMenu({ title = 'Foo', body = 'Bar', buttonText = 'Baz', cancellable = true }: MenuConfig) {
// ...
}

createMenu({ body: 'Bar' });
</code></pre></li>
</ul>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="매개-변수로-플래그를-사용하지-마세요">매개 변수로 플래그를 사용하지 마세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">function createFile(name: string, temp: boolean) {
    if (temp) {
    fs.create(`./temp/${name}`);
    } else {
    fs.create(name);
    }
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">function createTempFile(name: string) {
    createFile(`./temp/${name}`);
}

function createFile(name: string) {
    fs.create(name);
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="전역-함수를-사용하지-마세요">전역 함수를 사용하지 마세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">declare global {
    interface Array&lt;T&gt; {
    diff(other: T[]): Array&lt;T&gt;;
    }
}

if (!Array.prototype.diff) {
    Array.prototype.diff = function &lt;T&gt;(other: T[]): T[] {
    const hash = new Set(other);
    return this.filter(elem =&gt; !hash.has(elem));
    };
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">class MyArray&lt;T&gt; extends Array&lt;T&gt; {
    diff(other: T[]): T[] {
    const hash = new Set(other);
    return this.filter(elem =&gt; !hash.has(elem));
    };
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="조건문을-캡슐화하세요">조건문을 캡슐화하세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">if (subscription.isTrial || account.balance &gt; 0) {
    // ...
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">function canActivateService(subscription: Subscription, account: Account) {
    return subscription.isTrial || account.balance &gt; 0
}

if (canActivateService(subscription, account)) {
    // ...
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="부정적인-조건문을-쓰지-마세요">부정적인 조건문을 쓰지 마세요.</h3>

<hr />

<p>안좋은 예:</p>

<pre><code class="language-typescript">function isEmailNotUsed(email: string): boolean {
    // ...
}

if (isEmailNotUsed(email)) {
    // ...
}
</code></pre>

<p>좋은 예:</p>

<pre><code class="language-typescript">function isEmailUsed(email): boolean {
    // ...
}

if (!isEmailUsed(node)) {
    // ...
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<h3 id="유형-검사를-하지마세요">유형 검사를 하지마세요.</h3>

<hr />

<ul>
<li><p>TypeScript 자체가 JS 의 구문적 슈퍼 세트입니다. TS 를 잘 사용하려면 변수와 매개 변수의 유형을 지정하세요.</p>

<pre><code class="language-typescript">안좋은 예:

function travelToTexas(vehicle: Bicycle | Car) {
if (vehicle instanceof Bicycle) {
vehicle.pedal(currentLocation, new Location('texas'));
} else if (vehicle instanceof Car) {
vehicle.drive(currentLocation, new Location('texas'));
}
}
</code></pre></li>
</ul>

<p>좋은 예:</p>

<pre><code class="language-typescript">type Vehicle = Bicycle | Car;

function travelToTexas(vehicle: Vehicle) {
    vehicle.move(currentLocation, new Location('texas'));
}
</code></pre>

<p>👆<a href="#">맨 위로</a></p>

<p><br/></p>

<p><br/></p>

<p>여기까지 타입스크립트 클린 코드 가이드, 변수와 함수 편이였습니다.</p>

<p>다음 포스팅은 클래스에 대해 알아보도록 하겠습니다.</p>

<!-- ## 연관된 글들
### Clean Code Guide Series

1. <a href="https://kiwinam.com/posts/34/what-is-rest-api/" target="_blank">REST API #1 - 이해하기</a>
2. <a href="https://kiwinam.com/posts/35/rest-api-guide/" target="_blank">REST API #2 - 디자인 가이드</a> 
3. <a href="https://kiwinam.com/posts/36/rest-anti-patterns/" target="_blank">REST API #3 - 안티 패턴</a> (현재 글) -->

<p><br/></p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>REST API #3 - 안티 패턴</title>
            <link>https://kiwinam.com/posts/36/rest-anti-patterns/</link>
            <pubDate>Mon, 09 Mar 2020 14:48:01 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/36/rest-anti-patterns/</guid>
            <description>REST Series  REST API #1 - 이해하기 REST API #2 - 디자인 가이드 REST API #3 - 안티 패턴 (현재 글)  지난 포스팅에 이어, REST API 안티 패턴에 대해 포스팅 해보겠습니다.
이전 편을 안보신 분이 있다면 위 링크에서 확인해주세요.
지난 두 포스팅을 통해 REST API 가 어떤 것이고, 어떻게 디자인 하면 되는지 알아봤습니다.
우리가 어떤 걸 해야한다고 배울 때, 더 효과적으로 배우려면 어떤 걸 하지 말아야하는지를 배우면 좋습니다.</description>
            <content type="html"><![CDATA[

<p><br/></p>

<figure style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/34/34-1-90.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/34/34-1-75.webp"
        />
        
    <img src="/img/34/34-1.png"  alt="REST API"  class="center"  />


    </picture>
    <figurecaption>
        
    </figurecaption>
</figure>

<h3 id="rest-series">REST Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/34/what-is-rest-api/" target="_blank">REST API #1 - 이해하기</a></li>
<li><a href="https://kiwinam.com/posts/35/rest-api-guide/" target="_blank">REST API #2 - 디자인 가이드</a></li>
<li><a href="https://kiwinam.com/posts/36/rest-anti-patterns/" target="_blank">REST API #3 - 안티 패턴</a> (현재 글)</li>
</ol>

<p>지난 포스팅에 이어, REST API 안티 패턴에 대해 포스팅 해보겠습니다.</p>

<p>이전 편을 안보신 분이 있다면 위 링크에서 확인해주세요.</p>

<hr />

<p>지난 두 포스팅을 통해 REST API 가 어떤 것이고, 어떻게 디자인 하면 되는지 알아봤습니다.</p>

<p>우리가 어떤 걸 해야한다고 배울 때, 더 효과적으로 배우려면 어떤 걸 하지 말아야하는지를 배우면 좋습니다.</p>

<p>그래서 이번 포스팅은 REST API 에서 하지 말아야할 안티 패턴 (REST Anti Patterns) 에 대해 얘기해보자 합니다.</p>

<p><br/></p>

<h2 id="rest-anti-patterns">REST Anti patterns</h2>


    <img src="/img/36/36-1.jpg"  alt="REST Anti patterns"  class="center"  />



<p>인터넷에서 &ldquo;RESTful API&rdquo; 를 찾아보면 많은 블로그, 문서들이 &ldquo;이게 REST 한 API 란다?&rdquo; 라고 얘기합니다.</p>

<p>그렇지만 많은 수의 글들이, 그리고 그 글을 보고 만든 API 들이 REST 하지 않은 경우가 많습니다.</p>

<p>제 생각엔 REST 개념 자체가 어렵기도 하지만, 이걸 제대로 적용하려면 개발자가 챙겨야할 디테일들이 많기 때문이죠.</p>

<p>그래서 저도 급한 경우 REST 의 외관을 표방하지만, 응답에 링크나 하이퍼미디어를 표현하지 않거나 에러 코드를 제공하지 않는 등 디테일을 못챙기는 부분이 많습니다.</p>

<p>늘 그렇지만 개발자, 특히 스타트업 개발자라면 언제나 시간에 쫒기기 마련이고,</p>

<blockquote>
<p><h2><i>완성 못하는 것보다, 완벽하지 않은 것이 더 쓸만하다</h2> - 키위남</i></p>
</blockquote>

<p>이라는 말이 있듯이 완벽을 추구하는 것은 개발자에게 위험한 생각일 수도 있기 때문이죠.</p>

<p>그럼 이제 본론으로 넘어가서 REST API Anti pattern 에 대해 알아보도록 하겠습니다.</p>

<p><br/></p>

<h3 id="1-get-post-http-터널링">1. GET,POST HTTP 터널링</h3>

<p>HTTP 터널링은 모든 요청을 하나의 메소드로 처리하는 것을 말합니다.</p>

<p>예를 들어 회원 가입도 GET, 회원 조회도 GET, 회원 삭제도 GET 혹은 POST 로 정보 조회 등이 있습니다.</p>

<pre><code class="language-json"># HTTP 터널링의 예시
# GET 으로 회원 가입하기
GET /users?method=create&amp;email=charlie@kiwinam.com

# POST 로 멤버 리스트 가져오기
POST /users?offset=0&amp;limit=10
</code></pre>

<p>위 예시처럼 동작과 맞지 않는 메소드를 사용하거나 모든 동작에 하나의 HTTP 메소드를 사용하는 것을 <b>HTTP 터널링</b>이라고 합니다.</p>

<p>이 패턴의 문제점은 이렇습니다.</p>

<ol>
<li>자원이 URI 에 표현되지 않습니다. URI 보다 쿼리 파라미터에 동작들이 설명됩니다.</li>
<li>HTTP 메소드가 실제 동작과 일치하지 않습니다.</li>
<li>크롤러가 의도치 않는 부작용을 일으킬 수도 있습니다. (예를 들어 GET 요청인 줄 알고 크롤러가 시도했지만 실제론 회원 가입이 일어나는 경우)</li>
</ol>

<p><br/></p>

<h3 id="2-uri-에-행위-method-을-표현">2. URI 에 행위(method)을 표현</h3>

<p>이전 포스팅에서도 언급했던 부분입니다.</p>

<blockquote>
<p>URI 에 동사를 사용하지 않는다.</p>
</blockquote>

<p>이 말은 REST 한 API 는 URI 를 명사로만 표현한다 라는 것입니다.</p>

<p>그 의미는 API 가 실제로 하는 동작들, 예를 들어 생성하고, 삭제하고, 수정하고, 검색하고 등의 행위 (method) 는 URI 표현하지 않는다. 라는 의미입니다.</p>

<p>이유는 간단합니다.</p>

<p>REST 는 HTTP 를 어떻게 더 잘 사용할 것인지에 대한 고찰이 담겨 있는 정수 같은 것입니다.</p>

<p>HTTP 에는 이미 4개의 method 로 요청에 대해 정리하였습니다.</p>

<ol>
<li>GET - 정보를 가져옵니다.</li>
<li>POST - 정보를 생성합니다.</li>
<li>PUT - 정보를 수정합니다.</li>
<li>DELETE - 정보를 삭제합니다.</li>
</ol>

<p>이미 HTTP 요청을 보내는 순간 API 의 동작을 정의하기 때문에, URI 에 중복해서 표현할 필요가 없습니다.</p>

<p><br/></p>

<h3 id="3-캐시-무시">3. 캐시 무시</h3>

<p>HTTP 에는 속도 증가 그리고 트래픽과 서버의 자원을 아끼기 위한 많은 엔지니어링 테크닉들이 적용되어 있습니다.</p>

<p>그 중 대표적인 것이 여러분들도 익히 들어 알고 계실만한 <code>캐시</code> 입니다.</p>

<p>캐시라는 것은 웹 페이지나 Response 에 대해 내부에 저장하고, 동일한 페이지 혹은 동일한 요청이 있을 때 실제로 서버에 파일을 요청하거나 Request 에 대한 Response 를 받는 게 아니라,</p>

<p>기존에 있는 것을 보여줌으로써 빠르게 + 적은 자원을 사용해 효율적으로 요청을 처리할 수 있습니다.</p>

<p>다만 이런 캐시도 Request Header 에 한 줄을 표시하면 사용하지 못하는데, 그것은</p>

<pre><code class="language-json">Cache-control: no-cache
</code></pre>

<p>입니다.</p>

<p>이렇게 설정하면 어떤 것도 캐시 내부에 저장할 수 없습니다.</p>

<p>캐시는 RESTful API 에서 중요한 이점 중 하나입니다.</p>

<p><br/></p>

<h3 id="4-하이퍼미디어-무시">4. 하이퍼미디어 무시</h3>

<p>다른 글들에서 HATEOS 라고 표현되는 Hypermedia as the engine of application state 를 무시하지 말자! 라는 내용입니다.</p>

<p>하이퍼미디어의 특징을 이용해서 HTTP Response 에 현재 API 에 관련되어 있는 다른 동작들에 대한 URI 를 함께 제공하는 것을 HATEOS 라고 합니다.</p>

<p>HATEOS 를 잘 활용하면, REST 에서 어려운 개념인, 자기 표현 (Self-DEscriptive) 가 높아져서 API 가독성이 좋아집니다.</p>

<p>하이퍼미디어를 제공하는 API 의 Response 를 예시로 보여드리겠습니다.</p>

<pre><code class="language-json">GET /users?offset=50&amp;limit=50
HTTP 200
{
    &quot;users&quot;: [
        {
            &quot;id&quot;: 1,
            &quot;name&quot;: &quot;kiwinam&quot;
        },
        {
            &quot;id&quot;: 2,
            &quot;name&quot;: &quot;charlie&quot;
        }
    ],
    &quot;links&quot;:[
        {
            &quot;rel&quot;: &quot;self&quot;,
            &quot;href&quot;: &quot;http://api.kiwinam.com/users&quot;,
            &quot;method&quot;: &quot;GET&quot;
        },
        {
            &quot;rel&quot;: &quot;prev_list&quot;,
            &quot;href&quot;: &quot;http://api.kiwinam.com/users?offset=0&amp;limit=50&quot;,
            &quot;method&quot;: &quot;GET&quot;
        },
        {
            &quot;rel&quot;: &quot;next_list&quot;,
            &quot;href&quot;: &quot;http://api.kiwinam.com/users/offset=100&amp;limit=50&quot;,
            &quot;method&quot;: &quot;GET&quot;
        },
        {
            &quot;rel&quot;: &quot;delete_all_users&quot;,
            &quot;href&quot;: &quot;http://api.kiwinam.com/users&quot;,
            &quot;method&quot;: &quot;DELETE&quot;
        },
        {
            &quot;rel&quot;: &quot;create_user&quot;,
            &quot;href&quot;: &quot;http://api.kiwinam.com/users&quot;,
            &quot;method&quot;: &quot;POST&quot;
        }
    ]
}
</code></pre>

<p><br/></p>

<h3 id="5-mime-타입-무시">5. MIME 타입 무시</h3>

<p>HTTP 는 요청할 때 내가 보내고자 하는, 받고자하는 컨텐츠의 형식을 사전에 협상할 수 있습니다.</p>

<p>많이 사용하는 컨텐츠 타입은 json, xml, yaml 등이 있는데, 최근 json 형식으로 통일되고 있는 추세입니다.</p>

<p>REST API 를 설계하면서 컨텐츠 타입을 중복해서 제공하거나 제공하지 않는다면, 클라이언트와 소통에 있어 어려움을 겪을 수 있습니다.</p>

<p>예를 들어 json 과 xml 을 동시에 제공하는 경우, 클라이언트는 데이터 파싱을 두 번 해야합니다.</p>

<p>혹은 mime 타입을 설정하지 않는 경우 클라이언트가 어떻게 데이터를 파싱해야할 지 모르는 상황도 생길 수 있습니다.</p>

<p><br/></p>

<h3 id="6-하나의-동작을-위해-여러-번의-api-를-호출하지-말자">6. 하나의 동작을 위해 여러 번의 API 를 호출하지 말자.</h3>

<p>이 부분은 예를 들어 설명하는 것이 더 확실할 것 같아 바로 예시를 보여드리겠습니다.</p>

<pre><code class="language-json"># 회원 가입
# 1. 동일한 이메일 존재하는지 확인
GET /users/charlie@kiwinam.com

# 2. 유저 데이터 생성
POST /users
{
    &quot;email&quot;: &quot;charlie@kiwinam.com&quot;
}

# 3. 유저 데이터에 이름 추가
PATCH /users/charlie@kiwinam.com
{
    &quot;name&quot;: &quot;kiwinam&quot;
}

# 4. 유저 데이터에 비밀번호 추가
PATCH /users/charlie@kiwinam.com
{
    &quot;password&quot;: &quot;123456&quot;
}
</code></pre>

<p>예시를 보여드리기 위해 좀 극단적으로 요청을 많이 보냈지만, 이런 경우가 생길 수 있습니다.</p>

<p>API 는 하나의 동작을 제공하되, 그 안에 여러가지의 기능을 조합해서 하나의 동작을 제공하는 것이 좋습니다.</p>

<pre><code class="language-json"># 회원가입
POST /users
{
    &quot;email&quot;: &quot;charlie@kiwinam.com&quot;,
    &quot;name&quot;: &quot;kiwinam&quot;,
    &quot;password&quot;: &quot;123456
}
</code></pre>

<h3 id="7-자기-표현-구조를-무시">7. 자기 표현 구조를 무시</h3>

<p>거의 대부분의 REST API 가 REST 하지 않은 증거를 찾는다면, 이 부분에서 찾을 수 있습니다.</p>

<p>자기 표현 구조 (Self-descroptiveness)는 API 표현 자체가 쉽고 직관적이여서 api 만 읽고도 어떤 API 인지 알 수 있는 것을 얘기합니다.</p>

<p>API 의 URI 에서는 자기 표현 구조를 지키려 하는 곳이 많은데, 응답 헤더나 요청 메세지, 응답 메세지에는 자기 표현 구조를 따르지 않는 곳이 많습니다.</p>

<p>위에 언급한 HEATOS 를 지키지 않거나, 헤더에 정보들이 클라이언트, 중개자, 서버에서 API 를 이해하기에 부족한 경우 등이 있습니다.</p>

<p><br/></p>

<hr />

<p>여기까지 REST API 에 대해 자세히 알아봤습니다.</p>

<p>그런데 역시 쉽지 않고, 지켜야할 규칙들과 아직 엔지니어들 사이에도 의견이 분분한 항목 등.. 제대로 된 REST 를 만드는 것은 힘든 일이네요.</p>

<p>규격이 아직 정의 되지 않은 REST 이니, 너무 REST API 가 이렇다, 저렇다 논쟁하지 말고 더 좋은 코드를 위해 고민하는 것도 좋은 방법인 것 같습니다.</p>

<p>이번 포스팅이 여러분들에게 도움이 됐다면 좋겠습니다.</p>

<p>감사합니다.</p>

<p><br/></p>

<h2 id="연관된-글들">연관된 글들</h2>

<h3 id="rest-series-1">REST Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/34/what-is-rest-api/" target="_blank">REST API #1 - 이해하기</a></li>
<li><a href="https://kiwinam.com/posts/35/rest-api-guide/" target="_blank">REST API #2 - 디자인 가이드</a></li>
<li><a href="https://kiwinam.com/posts/36/rest-anti-patterns/" target="_blank">REST API #3 - 안티 패턴</a> (현재 글)</li>
</ol>

<p><br/></p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>REST API #2 - 디자인 가이드</title>
            <link>https://kiwinam.com/posts/35/rest-api-guide/</link>
            <pubDate>Sun, 08 Mar 2020 23:22:08 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/35/rest-api-guide/</guid>
            <description>REST Series  REST API #1 - 이해하기 REST API #2 - 디자인 가이드 (현재 글) REST API #3 - 안티 패턴  지난 포스팅에 이어, REST API 디자인 가이드에 대해 포스팅 해보겠습니다.
이전 편을 안보신 분이 있다면 위 링크에서 확인해주세요.

우린 소프트웨어 개발자로서 대부분의 시간을 REST API 를 사용하거나 구축하는데 사용하고 있습니다.
백엔드 개발자건, 안드로이드 개발자건, 프론트엔드 개발자건 다들 REST 한 API 를 사용하고 있죠.</description>
            <content type="html"><![CDATA[

<p><br/></p>

<figure style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/34/34-1-90.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/34/34-1-75.webp"
        />
        
    <img src="/img/34/34-1.png"  alt="REST API"  class="center"  />


    </picture>
    <figurecaption>
        
    </figurecaption>
</figure>

<h3 id="rest-series">REST Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/34/what-is-rest-api/" target="_blank">REST API #1 - 이해하기</a></li>
<li><a href="https://kiwinam.com/posts/35/rest-api-guide/" target="_blank">REST API #2 - 디자인 가이드</a> (현재 글)</li>
<li><a href="https://kiwinam.com/posts/36/rest-anti-patterns/" target="_blank">REST API #3 - 안티 패턴</a></li>
</ol>

<hr />

<p>지난 포스팅에 이어, REST API 디자인 가이드에 대해 포스팅 해보겠습니다.</p>

<p>이전 편을 안보신 분이 있다면 위 링크에서 확인해주세요.</p>

<hr />

<p><br/></p>

<p>우린 소프트웨어 개발자로서 대부분의 시간을 REST API 를 사용하거나 구축하는데 사용하고 있습니다.</p>

<p>백엔드 개발자건, 안드로이드 개발자건, 프론트엔드 개발자건 다들 REST 한 API 를 사용하고 있죠.</p>

<p><a href="https://kiwinam.com/posts/34/what-is-rest-api/" target="_blank">이전 포스팅<a/>에서 우리가 사용하는 REST API 란 어떤 것이라는 걸 말씀드렸습니다.</p>

<p><b>하지만</b> 아직 풀리지 않은 이슈가 하나 있습니다.</p>

<p><code>자 그래서 어떻게 만들라는건데?</code></p>

<p>이번 포스팅에선 그 질문에 대해 어느정도 &lsquo;가이드&rsquo;를 드리려고 합니다.</p>

<p><br/></p>

<h2 id="rest-api-설계-원칙">REST API 설계 원칙</h2>

<h3 id="1-단순하게-만들자">1. 단순하게 만들자.</h3>

<figure style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/35/35-1-75.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/35/35-1-50.webp"
        />
        
    <img src="/img/35/35-1.jpg"  alt="Keep It Simple Stupid"  class="center"  />


    </picture>
    <figurecaption>
        Keep It Simple Stupid - KISS
    </figurecaption>
</figure>

<p>API 의 기본 URL 이 단순해야 합니다. 예를 들어 제품(product)의 API 를 설계하려면 이렇게 할 수 있습니다</p>

<p><code>GET /products</code></p>

<p><code>GET /products/451</code></p>

<p>첫 번째 /products 는 모든 제품의 리스트를 가져오는 API고, 두 번째 /products/451 은 제품 중 451번을 가져오는 API 입니다.</p>

<p>URL 이 단순하지만 의미를 표현하도록 해야합니다.</p>

<p><br/></p>

<h3 id="2-동사가-아니라-명사로-쓰자">2. 동사가 아니라 명사로 쓰자.</h3>

<p>이 부분을 많은 개발자들이 실수하는 부분입니다. 일반적으로 API 에서 동사는 사용하지 않습니다.</p>

<p>예를 들어 유저를 등록하는 경우 많이 실수 하는 부분이 이런 부분이죠.</p>

<p><code>POST /registerUser</code></p>

<p>하지만 여기에선 동사가 (register) 사용되었습니다.</p>

<p>좋은 예는 아래와 같습니다.</p>

<p><code>POST /users</code></p>

<p><br/></p>

<h3 id="3-명사는-복수형으로-쓰자">3.명사는 복수형으로 쓰자.</h3>

<p>바로 위 규칙인 명사의 사용에 이어, 이번엔 &lsquo;복수&rsquo; 명사의 사용입니다.</p>

<p>방금 예시를 들었던 <code>사용자의 등록</code>을 통해 어떻게 사용해야 하는지 간단히 알아보겠습니다.</p>

<p><code>POST /users (GOOD)</code></p>

<p><code>POST /user (BAD)</code></p>

<p>여기서 의문이 생길 수도 있습니다.</p>

<blockquote>
<p>왜 복수형 명사를 써야해?</p>
</blockquote>

<p>라는 질문이죠.</p>

<p>이 질문에 대한 답은 <code>전체 사용자 리스트를 조회</code> 하는 API 로 해보겠습니다.</p>

<pre><code class="language-json">GET /users
HTTP Status Code 200
Response

{
    &quot;users&quot;: [
        {
            &quot;idx&quot;: 29,
            &quot;name&quot;: &quot;kiwinam&quot;,
            &quot;email&quot;: &quot;kiwinam@gmail.com&quot;
        },
        {
            &quot;idx&quot;: 30,
            &quot;name&quot;: &quot;charlie&quot;,
            &quot;email&quot;: &quot;charlie@kiwinam.com&quot;
        }
    ]
}
</code></pre>

<p><i>(GET /users 의 HTTP Response 예시)</i></p>

<table>
<thead>
<tr>
<th align="center">/users</th>
<th align="center">/charlie</th>
<th align="center">/pets</th>
<th align="center">/conan</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">(1)</td>
<td align="center">(2)</td>
<td align="center">(3)</td>
<td align="center">(4)</td>
</tr>
</tbody>
</table>

<p>이렇게 api가 있다면 가장 상위에 있는 1번 users 의 경우</p>

<p>GET /users 를 호출할 때의 API의 의미는 <code>전체 유저들의 정보를 가져와줘</code> 라는 의미입니다.</p>

<p>여기에서 중요한 건 유저<code>들</code>의 정보를 가져오는 것이죠. 네 맞습니다. 가져오는 정보가 복수의 형태를 띄고 있죠.</p>

<p>그래서 복수형 명사를 사용하는 걸 권장합니다.</p>

<p>다른 예를 더 들어보자면</p>

<pre><code class="language-json"># 제품들의 정보를 가져와줘 (Response에 여러 개의 정보가 예상됨, 복수형 리소스 *products 표현)
GET /products 

# 유저들의 정보를 가져와줘 (Response에 여러 개의 정보가 예상됨, 복수형 리소스 *users 표현)
GET /users

# charlie 가 가지고 있는 펫의 정보를 가져와줘 (Response에 여러 개의 정보가 예상됨, 복수형 리소스 *pets 표현)
GET /users/charlie/pets
</code></pre>

<p>이렇게 여러 개 (복수 개) 의 정보들이 예상되는 요청에 맞게 복수형 리소스로 표현해줍니다.</p>

<p><br/></p>

<h3 id="4-http-메소드를-올바르게-쓰자">4. HTTP 메소드를 올바르게 쓰자.</h3>

<p>REST API 는 수행할 작업을 HTTP 메소드로 나타낼 수 있습니다.</p>

<ul>
<li><p>GET &gt; 리소스를 가져옵니다.</p></li>

<li><p>POST &gt; 리소스를 새로 생성합니다.</p></li>

<li><p>PUT/PATCH &gt; 기존 리소스의 일부 또는 전체를 업데이트합니다.</p></li>

<li><p>DELETE &gt; 기존 자원 또는 자원 모음을 삭제합니다.</p></li>
</ul>

<p>API 가 처리할 작업에 알맞는 HTTP 메소드 사용해야 합니다.</p>

<p><br/></p>

<h3 id="5-http-응답-코드도-알맞게-쓰자">5. HTTP 응답 코드도 알맞게 쓰자.</h3>

<p>대부분 개발자들이 HTTP Response 상태 값을 200 아니면 500만 사용합니다.</p>

<p>거의 모든 프로젝트가 (제가 경험한..) 급하게 개발해야하는 상황이 많아서 어느정도 이해는 가지만 그래도 좋은 습관은 아닙니다.</p>

<p>아래 일반적으로 사용하는 HTTP Response status code 들 입니다.</p>

<p>HTTP 응답 코드는 크게 5가지로 나뉩니다.</p>

<ol>
<li><p>1xx (조건부 응답) - 요청을 받았고, 작업을 계속합니다. (보통 클라이언트와 서버단에선 볼 수 없는 응답 코드입니다.)</p></li>

<li><p>2xx (성공) - 클라이언트가 요청한 동작을 서버가 이해하고 성공적으로 처리했습니ㅏ.</p></li>

<li><p>3xx (리다이렉션) - 클라이언트 요청을 마치려면 추가적으로 동작을 행해야합니다.</p></li>

<li><p>4xx (요청 오류) - 클라이언트 요청이 잘못 되었습니다.</p></li>

<li><p>5xx (서버 에러) - 유효한 요청이지만, 서버가 수행하지 못했습니다.</p></li>
</ol>

<p>그리고 아래는 많이 쓰는 응답 코드들입니다.</p>

<ul>
<li>200 OK - 작업이 성공함</li>
<li>201 CREATED - POST 를 통해 리소스 생성에 성공함</li>
<li>400 BAD REQUEST - 잘못된 요청, 서버가 요청 구문을 이해하지 못함</li>
<li>401 UNAUTHORIZED - 권한 없음. 인증이 필요한 리소스에 접근해야 하는데, 해당 권한이 없음.</li>
<li>403 FORBIDDEN - 서버가 요청을 거부함.</li>
<li>404 NOT FOUND - 찾는 리소스가 없음</li>
<li>409 TIMEOUT - 사용자의 요청과 서버의 상태가 충돌함</li>
<li>429 TOO MANY REQUEST - 일정 시간 동안 너무 많은 요청이 들어옴</li>
<li>500 INTERNAL SERVER ERROR - 서버에 오류가 발생해 작업을 수행할 수 없음</li>
<li>502 BAD GATEWAY - 게이트웨이가 연결된 서버로부터 잘못된 응답을 받음</li>
</ul>

<p>더 자세한 내용은 <a href="https://ko.wikipedia.org/wiki/HTTP_%EC%83%81%ED%83%9C_%EC%BD%94%EB%93%9C" target="_blank">링크</a>에서 확인 부탁드릴게요!</p>

<p><br/></p>

<h3 id="6-버전-관리를-하자">6. 버전 관리를 하자.</h3>

<p>API 는 이전 버전과 호환되지 않지만 새로운 기능도 아닌, 이른바 한 기능의 버전이 달라지는 경우가 생깁니다.</p>

<p>그래서 API 의 버전 관리는 꼭 해야하는 것 중 하나입니다.</p>

<p><code>/v1/products</code></p>

<p><code>/v2/products</code></p>

<p>다만 여기에서 버전 리소스 명을 <code>1.2</code> 처럼 표시하지 마세요. 이는 자주 변경됨을 의미하고, 또한 메이저 버전의 변화가 아닌 점(dot) 이후 버전 명은 이전 버전과 호환됨을 뜻함으로 기존 버전을 유지하는 것이 맞습니다.</p>

<p>버전명에 대한 얘기는 <a href="https://kiwinam.com/posts/33/version-naming/" target="_blank">이 포스팅</a>을 보시면 도움이 될거 같아요.</p>

<p><a href="https://kiwinam.com/posts/33/version-naming/" target="_blank"><a href="https://kiwinam.com/posts/33/version-naming/">https://kiwinam.com/posts/33/version-naming/</a></a></p>

<p><br/></p>

<h3 id="7-페이징을-사용하자">7. 페이징을 사용하자.</h3>

<p>요즘 대세인 모바일, 그리고 인터넷 사용량이 급상승하고 있는 개도국의 경우 대량의 트래픽이 치명적일 수 있습니다.</p>

<p>그래서 큰 데이터를 반환할 가능성이 있는 API 는 페이징을 사용하는 것이 좋습니다.</p>

<p>페이징은 보통 쿼리 파라미터에 <code>offset</code>(여기서부터) <code>limit</code>(몇 개 까지 가져와줘) 으로 표현합니다.</p>

<p><code>GET /products?offset=0&amp;limit=10</code></p>

<p>위 API 는 전체 제품 정보를 가져오는데, 0번 제품부터(offset) 10개(limit)의 제품 정보를 가져오도록 요청 했습니다.</p>

<p><br/></p>

<h3 id="8-partical-response-처리하자">8. Partical Response 처리하자.</h3>

<p>위 내용과 이어지는 내용입니다.</p>

<p>예를 들어 하나의 API 에서 PC가 요청한 response 에는 이름, 전화번호, 이메일, 국적이 필요하다면,</p>

<p>동일한 API에 모바일에서 요청한 response 에는 이름, 전화번호만 필요할 수 있다는 겁니다.</p>

<p>이를 활용하는 기업은 페이스북이 있다고 하네요.</p>

<p>PC 가 요청한 경우 이름, 전화번호, 이메일, 국적이 필요함.</p>

<p><code>GET /products?offset=0&amp;limit=10&amp;field=name,phone,email,national</code></p>

<p>모바일에서 요청한 경우 이름과 전화번호만 필요함</p>

<p><code>GET /products?offset=0&amp;limit=10&amp;field=name,email</code></p>

<p><br/></p>

<h3 id="9-에러-처리를-하자">9. 에러 처리를 하자.</h3>

<p>에러처리는 HTTP 응답 코드를 사용하고, body 에 에러에 대한 내용을 담아주는 것이 좋습니다.</p>

<p>그렇다 해서 모든 에러를 <code>400 BAD REQUEST</code> 나 <code>500 INTERNAL SERVER ERROR</code> 로 응답하는 것도 지양해야겠죠.</p>

<p>적절한 응답 코드와 바디의 에러 메시지를 보내줘야 합니다.</p>

<p>예를 들어</p>

<pre><code class="language-json">HTTP Status Code 403 
{
    &quot;error&quot;: {
        &quot;message&quot;: &quot;현재 유저는 제품 리스트를 볼 수 없는 권한입니다.&quot;,
        &quot;code&quot;: 1002,
    }
}
</code></pre>

<p><br/></p>

<p>여기까지 REST API 를 어떻게 디자인 해야하나? 의 질문에 답을 하기 위한 포스팅이였습니다.</p>

<p>조금 도움이 되셨을지 모르겠네요.</p>

<p>아직도 감이 잘 안잡히신다구요? 괜찮습니다. 이제 2편이니까요.</p>

<p>다음 편에는 <code>REST 에서 하면 안되는, 안티 패턴</code> 에 대해서 포스팅 하겠습니다.</p>

<p>긴 글 읽어 주셔서 감사합니다. 😄</p>

<p><br/></p>

<h2 id="연관된-글">연관된 글</h2>

<h3 id="rest-series-1">REST Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/34/what-is-rest-api/" target="_blank">REST API #1 - 이해하기</a></li>
<li><a href="https://kiwinam.com/posts/35/rest-api-guide/" target="_blank">REST API #2 - 디자인 가이드</a> (현재 글)</li>
<li><a href="https://kiwinam.com/posts/36/rest-anti-patterns/" target="_blank">REST API #3 - 안티 패턴</a></li>
</ol>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>REST API #1 - 이해하기</title>
            <link>https://kiwinam.com/posts/34/what-is-rest-api/</link>
            <pubDate>Tue, 18 Feb 2020 07:15:00 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/34/what-is-rest-api/</guid>
            <description>REST Series  REST API #1 - 이해하기 (현재 글) REST API #2 - 디자인 가이드 REST API #3 - 안티 패턴  
REST API
소프트웨어 엔지니링을 공부하다 보면 어느샌가 마주하는 녀석입니다.
모두가 얘기하고 대부분이 사용하지만 REST API 가 무엇인지, 왜 쓰는지에 대해 알고 설명할 수 있는 사람은 그렇게 많지 않습니다.
물론 저도 그 중 하나였고, 이 글을 통해 더 명확하게 REST API 에 대해 정의하고자 합니다.</description>
            <content type="html"><![CDATA[

<p><br/></p>

<figure style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/34/34-1-90.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/34/34-1-75.webp"
        />
        
    <img src="/img/34/34-1.png"  alt="REST API"  class="center"  />


    </picture>
    <figurecaption>
        
    </figurecaption>
</figure>

<h3 id="rest-series">REST Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/34/what-is-rest-api/" target="_blank">REST API #1 - 이해하기</a> (현재 글)</li>
<li><a href="https://kiwinam.com/posts/35/rest-api-guide/" target="_blank">REST API #2 - 디자인 가이드</a></li>
<li><a href="https://kiwinam.com/posts/36/rest-anti-patterns/" target="_blank">REST API #3 - 안티 패턴</a></li>
</ol>

<hr />

<p><br/></p>

<p><code>REST API</code></p>

<p>소프트웨어 엔지니링을 공부하다 보면 어느샌가 마주하는 녀석입니다.</p>

<p>모두가 얘기하고 대부분이 사용하지만 REST API 가 무엇인지, 왜 쓰는지에 대해 알고 설명할 수 있는 사람은 그렇게 많지 않습니다.</p>

<p>물론 저도 그 중 하나였고, 이 글을 통해 더 명확하게 REST API 에 대해 정의하고자 합니다.</p>

<p>이 글을 통해 REST API 의 개념과 어떻게 사용해야 하는지에 대해서 알아보고자 합니다.</p>

<p><br/></p>

<h2 id="1-rest-api-란">1. REST API 란?</h2>

<p><b>REST</b>  (<b>RE</b>presentational <b>S</b>tate <b>T</b>ransfer) 란 웹를 사용할 때 제약 조건들을 정의하는 소프트웨어 아키텍처 스타일입니다.</p>

<p>우리가 흔히 쓰고 있는 월드 와이드 웹 (WWW) 의 창시자 중 한 명인 Roy Fielding 의 2000년 논문에서 소개 되었고, 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일입니다.</p>

<p>한국말 같지만 무슨 말인지 모르겠는 이 말을 정확하지 않지만, 이해하기 쉽게 설명한다면</p>

<pre><code>HTTP 의 장점을 살리고자 하는 통신 규격
</code></pre>

<p>이렇게 얘기할 수 있습니다. 아직 감이 잘 안오시나요? 괜찮습니다. 우린 이제 이 글의 시작 지점이니까요. 아래에서 더 자세한 설명을 들어보죠.</p>

<p><br/></p>

<h3 id="1-1-핵심-규칙">1-1. 핵심 규칙</h3>

<p>먼저 REST 에서 가장 핵심이 되는 규칙은</p>

<p><code>- URI 는 자원을 표현한다.</code></p>

<p><code>- 자원에 대한 행위는 HTTP Method 로 표현한다.</code></p>

<p>이 두 가지 규칙입니다. 이 두 가지 규칙만 준수해도 RESTFul 한 API 를 설계할 수 있습니다.</p>

<p>예를 들어 강아지 중 코난 이라는 강아지의 정보를 가져오는 메소드를 만들어 보겠습니다.</p>

<pre><code class="language-json">GET /pets/conan
Response 
{
    &quot;name&quot;: &quot;conan&quot;,
    &quot;age&quot;: 4,
    &quot;gender&quot;: &quot;male&quot;
}
</code></pre>

<p>첫 번째 규칙인 <b>URI는 모든 자원을 표현한다</b>, 위 예시의 경우 강아지인 코난 이라는 자원을 URI 로 표현했습니다. <code>/pets/conan</code></p>

<p>두 번째 규칙인 <b>자원에 대한 행위는 HTTP method 로 표현한다.</b>, 위 예시에선 정보를 가져오는 행위인 <code>GET</code> 를 사용했습니다.</p>

<p>어떤가요? 이런 핵심 규칙을 통해 REST 하게 API 를 설계할 수 있겠죠?</p>

<p>하지만 우린 좀 더 REST 세계로 딥다이브 해보겠습니다.</p>

<p><br/></p>

<hr />

<h3 id="1-1-rest-의-기본-요소">1-1. REST 의 기본 요소</h3>

<p>REST 를 이루는 기본적인 요소는 다음 3가지입니다.</p>

<ol>
<li><p>리소스 (Resource)</p></li>

<li><p>메소드 (Methond)</p></li>

<li><p>메세지 (Message)</p></li>
</ol>

<p><br></p>

<p>세 가지 요소를 하나의 예를 통해 설명 드리겠습니다.</p>

<p><code>코난 이라는 이름을 가진 강아지 정보를 생성합니다.</code> 라는 HTTP 요청이 있을 때,</p>

<ol>
<li><p>리소스 - 강아지 정보 라는 <b>리소스</b>를 (Resource)</p></li>

<li><p>메소드 - <b>생성</b>합니다. (Method)</p></li>

<li><p>메세지 -  그 이름은 <b>코난</b>..<del>탐정이죠</del> (Message)</p></li>
</ol>

<p>더 이해하기 쉽게 이를 REST 형식으로 표현해보겠습니다.</p>

<pre><code class="language-JSON">POST  http://mypet/pets
{
    &quot;pets&quot;:{
        &quot;name&quot;: &quot;코난&quot;
    }
}
</code></pre>

<p>이렇게 표현할 수 있겠네요.</p>

<p>어떤 것을 생성한다 (Create) 의 의미를 가진 <b>HTTP POST 요청</b>,</p>

<p>생성하려 하는 대상인 강아지라는 리소스는 <b><a href="http://mypet/pets">http://mypet/pets</a> 라는 URI</b>,</p>

<p>생성하고자 하는 정보인 강아지의 이름은 <b>JSON 방식으로 제공했습니다</b>.</p>

<p><br/></p>

<h3>HTTP 메소드</h3>

<p>위의 예시에서 이 포스팅에서 다루지 않은 개념이 등장하죠.</p>

<p>위 글을 읽는 분들은</p>

<pre><code>HTTP POST 가 뭐에요?
</code></pre>

<p>라고 질문할 수 있습니다.</p>

<p><br/></p>

<p>먼저 HTTP 는 우리 앞으로 웹에서 통신할 땐 이렇게 통신하자~ 라고 정의한 규칙입니다.</p>

<p>이 규칙 중엔 HTTP 요청을 크게 4가지 방식(Method) 으로 나눕니다.</p>

<table>
<thead>
<tr>
<th align="center">방식 (Method)</th>
<th align="center">의미</th>
<th align="center"></th>
<th align="center">역할</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">POST</td>
<td align="center">Create</td>
<td align="center"></td>
<td align="center"><a>  POST 를 통해 새로운 리소스를 생성합니다.</td>
</tr>

<tr>
<td align="center">GET</td>
<td align="center">Select</td>
<td align="center"></td>
<td align="center">GET 를 통해 해당 리소스를 조회합니다.</td>
</tr>

<tr>
<td align="center">PUT</td>
<td align="center">Update</td>
<td align="center"></td>
<td align="center">PUT 를 통해 리소스를 수정합니다.</td>
</tr>

<tr>
<td align="center">DELETE</td>
<td align="center">Delete</td>
<td align="center"></td>
<td align="center">DELETE 를 통해 해당 리소스를 삭제합니다.</td>
</tr>

<tr>
<td align="center">PATCH</td>
<td align="center">Update</td>
<td align="center"></td>
<td align="center">리소스의 일부를 수정합니다.</td>
</tr>
</tbody>
</table>

<p>위 표에서 처럼 HTTP 요청 방식 (POST, GET, PUT, DELETE)은 각각 CRUD 에 대응됩니다.</p>

<p>표 맨 아래 PATCH HTTP Method 는 PUT 과 비슷하게 Update 라는 의미를 가지고 있지만, PUT 은 해당 자원 전체를 교체하라는 의미를 지녔지만, PATCH 는 자원의 일부를 변경한다는 의미를 가졌습니다.</p>

<p>때문에 최근엔 자원 전체를 업데이트하는 PUT 보다, 일부를 수정하는 PATCH 를 더 많이 사용하기도 합니다.</p>

<p><br/></p>

<h3 id="1-2-rest-api-의-예시">1-2 REST API 의 예시</h3>

<p>이제 모든 기본 요소에 대해 이해 했으니, 하나씩 예시를 만들어 보겠습니다.</p>

<p>오늘 이 포스팅의 주인공인 코난..!</p>

<figure style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/34/34-2-90.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/34/34-2-75.webp"
        />
        
    <img src="/img/34/34-2.jpg"  alt="google chrome "  class="center"  />


    </picture>
    <figurecaption>
        <p style="text-align: center; font-size: 13px">
            <i>내 이름은 함정, 코난이죠</i>
        </p>
    </figurecaption>
</figure>

<p>이 코난이 아닌 강아지 코난을 통해 REST API 예시를 설명해 보겠습니다.</p>

<p><br/></p>

<figure style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/34/34-3-90.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/34/34-3-75.webp"
        />
        
    <img src="/img/34/34-3.png"  alt="google chrome "  class="center"  />


    </picture>
    <figurecaption>
        <p style="text-align: center; font-size: 13px">
            <i>댕댕이 코난</i>
        </p>
    </figurecaption>
</figure>

<p>그럼 REST 한 CRUD API 를 생성해 볼까요?</p>

<p><br/></p>

<h4>1. 생성</h4>

<p><code>이름이 conan, 나이가 3살 인 강아지 정보를 생성해줘</code></p>

<pre><code class="language-json">POST http://mypet/pets
{
    &quot;pets&quot;:{
        &quot;name&quot;: &quot;conan&quot;,
        &quot;age&quot;: 3
    }
}
</code></pre>

<p><a href="http://mypet/pets">http://mypet/pets</a> 라는 리소스로 이름은 &ldquo;conan&rdquo;, HTTP POST 를 정의 했습니다.</p>

<p>이 요청은 코난 이라는 강아지 정보를 등록합니다.</p>

<p><br/></p>

<h4>2. 조회</h4>

<p><code>이름이 conan 인 강아지 정보를 가져와줘</code></p>

<pre><code class="language-json">GET http://mypet/pets/conan
Response
{
    &quot;name&quot;: &quot;conan&quot;,
    &quot;age&quot;: 3
}
</code></pre>

<p>이번엔 방금 생성한 코난의 정보를 가져왔습니다.</p>

<p>조회를 해야하기 때문에 HTTP Method 는 GET 방식을 사용 했고, URI 에 가져올 리소스인 강아지 정보 중 conan 를 특정했습니다.</p>

<p><br/></p>

<h4>3. 수정</h4>

<p><code>conan 의 이름을 konan, 나이를 5살로 으로 변경해줘</code></p>

<pre><code class="language-json">PUT http://mypet/pets/conan
{
    &quot;name&quot;: &quot;konan&quot;,
    &quot;age&quot;: 5
}
</code></pre>

<p>conan 의 이름을 konan 으로, 나이를 5살로 변경했습니다.</p>

<p>리소스를 수정해야 하기 때문에 HTTP Method 는 PUT 방식을 사용 했습니다.</p>

<p><br/></p>

<h4>4. 삭제</h4>

<p><code>강아지 정보 중 konan 이란 이름을 가진 정보를 삭제해줘</code></p>

<pre><code class="language-json">DELETE http://mypet/pets/konan
Response 204
</code></pre>

<p>konan 의 정보를 삭제 했습니다.</p>

<p>이번엔 삭제를 해야하기 때문에 HTTP Method 는 DELETE 를 사용 했습니다.</p>

<p><br/></p>

<p><br/></p>

<h2 id="2-rest-의-특성">2. REST 의 특성</h2>

<p>지금까지 기본적인 개념에 대해 설명 했었는데, 이제 조금 더 상세하게 REST 에 대해 알아 보겠습니다.</p>

<p>상세한 내용은 위키에서 참고해서 가져왔습니다.</p>

<ol>
<li><p>Client-Server Architecture</p>

<ul>
<li>REST API 에서 자원을 가지고 제공하는 측이 서버, 자원을 요청하는 쪽이 클라이언트에 해당합니다.</li>
<li>서버는 API 를 제공하고, 클라이언트는 사용자 인증, 세션, 로그인 정보를 관리하는 등 역할을 구분시킵니다.</li>
<li>역할 구분을 통해서 서로간의 의존성을 줄입니다.</li>
</ul></li>

<li><p>Stateless (무상태성)</p>

<ul>
<li>상태가 없다는 의미는 클라이언트의 Context, 세션과 같은 상태 정보를 서버에 저장하지 않음을 의미합니다.</li>
<li>서버에 클라이언트의 상태 정보를 저장하지 않으면, 요청에 대해 처리만 하면 되기 때문에 서버 구현이 단순해집니다.</li>
</ul></li>

<li><p>Cacheable (캐시 가능)</p>

<ul>
<li>REST 는 HTTP 라는 기존의 웹 표준을 사용하기 때문에, HTTP 에서 사용하는 Last-Modified Tag, E-tag 를 통해 캐싱 구현이 가능합니다.</li>
<li>캐시를 통해 대량의 요청을 효율적으로 처리할 수 있습니다.</li>
</ul></li>

<li><p>Layered System</p>

<ul>
<li>REST API 는 다중 계층으로 구성할 수 있고 LB, 암호화, Proxy 등 계층을 추가해서 구조를 변경할 수 있습니다.</li>
<li>클라이언트는 대상 서버에 직접 연결되었는지, Proxy 를 통해 연결 되었는지 알 수 없습니다.</li>
</ul></li>

<li><p>Self-Descriptiveness (자체 표햔 구조)</p>

<ul>
<li>REST API 는 요청 메세지를 보고 이를 쉽게 이해할 수 있도록 자체 표현 구조로 되어 있습니다.</li>
</ul></li>

<li><p>Uniform Interface (일관된 인터페이스)</p>

<ul>
<li>Resource 에 대한 요청으로 통일 되고, 한정적으로 수행하는 아키텍처 스타일을 의미합니다.</li>
<li>아키텍처를 단순화시키고 분리해 각 부분을 독립적으로 발전할 수 있습니다.</li>
</ul></li>
</ol>

<p><br/></p>

<h2 id="마지막으로">마지막으로</h2>

<p>여기까지 REST 에 대해 개념과 예시를 통해 설명 드렸습니다.</p>

<p>REST 는 HTTP 프로토콜의 표준을 최대한 활용하면서 여러가지 장점을 극대화할 수 아키텍쳐 입니다.</p>

<p>다만 RESTFul 한 API 를 만들기 위해선 피해야할 패턴도 있고, 리소스의 정의에 대해 애매 모호한 부분도 있습니다.</p>

<p>다음 포스팅에선 이렇게 어려운 REST 디자인에 대해 실제 사례를 통해 더 실무적으로 설명 드리겠습니다.</p>

<p>이 글이 도움이 되셨으면 좋겠습니다.</p>

<p>감사합니다.</p>

<p><br/></p>

<h3 id="rest-series-1">REST Series</h3>

<ol>
<li><a href="https://kiwinam.com/posts/34/what-is-rest-api/" target="_blank">REST API #1 - 이해하기</a> (현재 글)</li>
<li><a href="https://kiwinam.com/posts/35/rest-api-guide/" target="_blank">REST API #2 - 디자인 가이드</a></li>
<li><a href="https://kiwinam.com/posts/36/rest-anti-patterns/" target="_blank">REST API #3 - 안티 패턴</a></li>
</ol>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>Software 버전 관리 규칙, 너만 모르는 Semantic versioning </title>
            <link>https://kiwinam.com/posts/33/version-naming/</link>
            <pubDate>Sun, 02 Feb 2020 01:30:00 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/33/version-naming/</guid>
            <description>소프트웨어를 개발하다보면 정말 수많은 규칙들을 세우고 없애고 수정하는 것 같아요.
저도 혼자 개발하고 흡&amp;ndash;족 할 때는 이런 규칙과 컨벤션들에 대해 무관심 했었는데,
이제 프로로 데뷔한지 2년 정도 지났고, 최근 이직한 회사에서 컨벤션 관련된 작업을 진행하면서 함께 정했던 버전 관리 규칙 에 대해 공유하려고 합니다.


사실 개발자들 뿐만 아니라 개발자가 아닌 일반인 분들에게도 이 버전명 에 대해서는 익숙한 분이 많을거라 생각해요.
79.0.3945.130
  크롬의 최신 버전   어떤가요?</description>
            <content type="html"><![CDATA[

<p><br/></p>

<p>소프트웨어를 개발하다보면 정말 수많은 규칙들을 세우고 없애고 수정하는 것 같아요.</p>

<p>저도 혼자 개발하고 흡&ndash;족 할 때는 이런 규칙과 컨벤션들에 대해 무관심 했었는데,</p>

<p>이제 프로로 데뷔한지 2년 정도 지났고, 최근 이직한 회사에서 컨벤션 관련된 작업을 진행하면서 함께 정했던 <code>버전 관리 규칙</code> 에 대해 공유하려고 합니다.</p>

<p><br/></p>

<hr />

<p><br/></p>

<p>사실 개발자들 뿐만 아니라 개발자가 아닌 일반인 분들에게도 이 <code>버전명</code> 에 대해서는 익숙한 분이 많을거라 생각해요.</p>

<p><code>79.0.3945.130</code></p>

<figure style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/33/33-1-90.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/33/33-1-75.webp"
        />
        
    <img src="/img/33/33-1.png"  alt="google chrome "  class="center"  />


    </picture>
    <figurecaption>
        <p style="text-align: center; font-size: 13px">
            <i>크롬의 최신 버전</i>
        </p>
    </figurecaption>
</figure>

<p>어떤가요? 익숙한가요? 20년 2월 2일 기준 최근 크롬 공식 버전입니다.</p>

<p>크롬의 경우 뭔가 4자리로 구분 되어 있어서 어색할 수 도 있는데요.</p>

<p>우리가 흔히 접하는 모바일 어플리케이션을 살펴 볼까요?</p>

<p><br/></p>

<figure style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/33/33-2-90.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/33/33-2-75.webp"
        />
        
    <img src="/img/33/33-2.png"  alt="google chrome "  class="center"  />


    </picture>
    <figurecaption>
        <p style="text-align: center; font-size: 13px">
            <i>목표 관리 앱, 챌린저스의 버전 기록</i>
        </p>
    </figurecaption>
</figure>

<p><code>1.2.6</code></p>

<p>이번엔 어떠신가요? 많이 익숙한 숫자의 모습이죠?</p>

<p>다른 소프트웨어는 어떨까요?</p>

<p><br/></p>

<figure style="width: 100%">
    <picture class="center" style="display: block; margin: 0px auto; text-align: center" >
        <source
            type="image/webp"
            media="(min-width:461px)"
            srcset="/img/33/33-3-90.webp"
        />
        <source
            type="image/webp"
            media="(max-width:460px)"
            srcset="/img/33/33-3-75.webp"
        />
        
    <img src="/img/33/33-3.png"  alt="google chrome "  class="center"  />


    </picture>
    <figurecaption>
        <p style="text-align: center; font-size: 13px">
            <i>모바일 게임 앵그리버드의 최신 버전</i>
        </p>
    </figurecaption>
</figure>

<p><code>8.0.1</code></p>

<p>모바일 게임에서 꾸준히 상위 랭크에 올라가 있는 앵그리 버드의 앱스토어 최신 버전입니다.</p>

<p>여기에서도 익숙한 숫자의 형태가 보이는데요..?!</p>

<p><br/></p>

<p>여러분들이 익숙한 저 형태의 버전은 <code>Semantic versioning</code> 이라는 규칙을 따른 버전 이름이에요.</p>

<p>제가 느끼기엔 대부분의 소프트웨어 버전 관리 규칙은 <code>Semantic versioning</code> 를 기반으로 만들어지는 것 같습니다.</p>

<p>그렇다면 Semantic versioning 은 어떤 규칙들이 있는 걸까요?</p>

<p><br/></p>

<h2 id="semantic-versioning">Semantic versioning</h2>

<hr />

<p>Github 창업하신 분이 기존 Versioning 의 문제점을 해결하고자 만든 제안이라는데..</p>

<p>사실 우리에게 그런 히스토리보단 직접 예를 보는게 더 좋겠죠?</p>

<p><i><del>(이런 히스토리는 따로 찾아보..읍읍)</del></i></p>

<p style="text-align: center; font-size:26px;"><b>Major.Minor.Patch</b></p>

<p>Semantic versioning 은 이렇게 생겼습니다.</p>

<p>간단하죠? 그리고 익숙한 저 모습..!</p>

<p>(그리고 위에서 봤던 크롬의 처럼 Patch 뒤에 Build 라는 자리수가 더 오는 경우도 있다고 하네요.)</p>

<p>그렇다면 Major, Minor, Patch 가 각각 어떨 때 숫자를 올려야 하고, 우리는 어떻게 사용하면 될까요?</p>

<p><br/></p>

<h3 id="일반적인-규칙">일반적인 규칙</h3>

<ol>
<li>버전 번호는 Major, Minor, Patch 의 형태로 배포하고, Major, Minor, Patch 는 각각 자연수이고 절대 앞에 0이 붙어서는 안된다.</li>
<li>각 번호의 수는 항상 증가해야 한다.</li>
<li>특정 버전으로 패키지를 배포하고 나면, 그 버전의 내용은 절대 변경하지 말아야한다. 변경분이 있다면 반드시 새로운 버전으로 배포하도록 한다.</li>
<li>Major 버전이 변경될 때, Minor, Patch 는 0으로 초기화 된다.</li>
<li>Minor 버전이 변경될 때, Patch 는 0으로 초기화 된다.</li>
</ol>

<p><br/></p>

<h3 id="major-버전-증가">Major 버전 증가</h3>

<ul>
<li>하위 버전과 호환되지 않는 변화가 생겼을 때</li>
<li>대대적인 변화가 일어났을 때</li>
<li>클라이언트가 1.0.0 버전의 API 접근 방식으로 2.0.0 버전에 접속할 수 없을 때</li>
</ul>

<p><br/></p>

<h3 id="minor-버전-증가">Minor 버전 증가</h3>

<ul>
<li>하위 버전과 호환이 되면서, 새로운 기능이 추가 될 때</li>
<li>새로운 기능이 추가된 API 가 나왔지만, 기존의 공개된 API 가 하위 호환되고 있을 때</li>
<li>기존의 기능이 변경되거나 사용 방법이 변경 되었을 때</li>
</ul>

<p><br/></p>

<h3 id="patch-버전-증가">Patch 버전 증가</h3>

<ul>
<li>버그 수정</li>
<li>기존 클라이언트가 알아차리지 못할 정도의 작은 변화가 있을 때</li>
<li>서버 코드 내부적으로 소스가 수정되었을 때</li>
<li>당연한 얘기겠지만, 이 모든 것들이 하위 버전과 호환될 때</li>
</ul>

<p><br/></p>

<p>이렇게 적어놓고 보니, 뭔가 어렵고 복잡한거 같지만 정리해보면</p>

<p>Major -&gt; 다 바뀜</p>

<p>Minor -&gt; 기능이 추가랑 조금 바뀜</p>

<p>Patch -&gt; 버그 고쳤음</p>

<p>이렇게 정리할 수 있겠습니다.</p>

<p>정리하고 보니 정말 간단해 보이는군요..!!</p>

<p>그럼 이제 우리도 다른 오픈 소스들이..그리고 많은 제품들이 사용하는 <code>Semantic Versioning</code> 을 사용하는 겁니다!</p>

<p><br/></p>

<p><br/></p>

<p>추가적으로 Semantic Versioning 에는 위에서 언급하지 않은 다른 규칙들도 있습니다.</p>

<p><br/></p>

<ol>
<li><p>Semantic Versioning을 쓰는 소프트웨어는 반드시 공개 API를 정의해야 한다. 이 API는 코드 자체에 정의되어 있거나 명시적으로 문서화 되어있어야 한다. 이 과정은 포괄적이며 정확해야 한다.</p></li>

<li><p>Major 버전 0 은 초기 개발을 위해서 쓴다. 아무 때나 마음대로 바꿀 수 있다. 이 공개 API 는 안정판으로 보지 않는 것이 좋다.</p></li>

<li><p>1.0.0 버전은 공개 API 를 정의한다. 이후의 버전 번호는 이때 공개 API 에서 어떻게 바뀌는지에 따라 올린다.</p></li>

<li><p>Patch 버전 바로 뒤에 붙임표(-)를 붙이고 마침표(.)로 구분된 식별자를 더해서 정식 배포를 앞둔 (pre-release) 버전을 표기할 수 있다.</p></li>
</ol>

<p><br/></p>

<p>이런 규칙들도 있으니 참고해주세요!</p>

<p>그리고 Semantic Versioning 은 공식 홈페이지도 있습니다.</p>

<p>그것도 무려&hellip; 27개국의 언어를 지원하는..!!</p>

<p>그 중에 한국어도 있으니 홈페이지 가셔서 살펴보셔도 좋을거 같네요.</p>

<p><a href="https://semver.org/lang/ko/" target="_blank"><a href="https://semver.org/lang/ko/">https://semver.org/lang/ko/</a></a></p>

<p><br/></p>

<p>제 포스팅이 도움이 되었으면 좋겠네요.</p>

<p>다른 질문이 있으신 분은 아래 댓글 적어주세요! 꼭 답변 드리도록 하겠습니다.</p>

<p>긴 글 읽어주셔서 감사합니다!</p>

<p><br/></p>

<p><br/></p>

<h4 id="참고-페이지">참고 페이지</h4>

<p>(새창으로 이동합니다.)</p>

<p><a href="https://semver.org/lang/ko/" target="_blank">Semantic Versioning 공식 홈페이지</a></p>

<p><a href="https://spoqa.github.io/2012/12/18/semantic-versioning.html" target="_blank">Spoqa 기술 블로그</a></p>
]]></content>
        </item>
        
        <item>
            <title>[Git] 원격 (remote) 브랜치 삭제</title>
            <link>https://kiwinam.com/posts/32/git-remove-remote/</link>
            <pubDate>Sat, 04 Jan 2020 18:00:00 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/32/git-remove-remote/</guid>
            <description>Git (CMD) 에서 원격 브랜치를 삭제하는 방법은 2가지가 있습니다.
먼저 삭제할 브랜치의 이름을 develop 이라고 가정해보겠습니다.

방법 1 # remote_name 은 원격 저장소의 이름입니다. # branch_name 은 삭제할 브랜치의 이름입니다. # # git push &amp;lt;remote_name&amp;gt; --delete &amp;lt;branch_name&amp;gt; git push origin --delete develop  
방법 2 # git branch -d &amp;lt;branch_name&amp;gt; # git push &amp;lt;remote_name&amp;gt; --delete &amp;lt;branch_name&amp;gt; git branch -d develop git push origin develop  참조 (Stack overflow) How do I delete a Git branch locally and remotely?</description>
            <content type="html"><![CDATA[

<p>Git (CMD) 에서 원격 브랜치를 삭제하는 방법은 2가지가 있습니다.</p>

<p>먼저 삭제할 브랜치의 이름을 <code>develop</code> 이라고 가정해보겠습니다.</p>

<p><br/></p>

<h3 id="방법-1">방법 1</h3>

<pre><code># remote_name 은 원격 저장소의 이름입니다.
# branch_name 은 삭제할 브랜치의 이름입니다.
#
# git push &lt;remote_name&gt; --delete &lt;branch_name&gt;

git push origin --delete develop
</code></pre>

<p><br/></p>

<h3 id="방법-2">방법 2</h3>

<pre><code># git branch -d &lt;branch_name&gt;
# git push &lt;remote_name&gt; --delete &lt;branch_name&gt;

git branch -d develop
git push origin develop
</code></pre>

<p>참조 (Stack overflow)<br/>
<u><a href="https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely" target="_blank"> How do I delete a Git branch locally and remotely? </a></u>
<br/></p>
]]></content>
        </item>
        
        <item>
            <title>[Git] macOS xcrun 에러 해결 방법</title>
            <link>https://kiwinam.com/posts/31/git-xcrun/</link>
            <pubDate>Wed, 01 Jan 2020 18:00:00 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/31/git-xcrun/</guid>
            <description>macOS 의 업데이트 시, 특히 macOS 의 이름이 변경되는 큰 업데이트가 진행 된 다음에 종종 이런 경우가 있습니다.
지금까지 알려진 해당 이슈가 발생했던 업데이트는
 macOs High Sierra 업데이트
 macOS Sierra 업데이트
 OS X El Capitan 업데이트
  이정도면 큼직한 업데이트마다 만날 수 있는 에러라고 볼 수 있습니다.

xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun  error 내용은 위 처럼 나오고,</description>
            <content type="html"><![CDATA[

<p><br/></p>

<p>macOS 의 업데이트 시, 특히 macOS 의 이름이 변경되는 큰 업데이트가 진행 된 다음에 종종 이런 경우가 있습니다.</p>

<p>지금까지 알려진 해당 이슈가 발생했던 업데이트는</p>

<ul>
<li><p><code>macOs High Sierra</code> 업데이트</p></li>

<li><p><code>macOS Sierra</code> 업데이트</p></li>

<li><p><code>OS X El Capitan</code> 업데이트</p></li>
</ul>

<p>이정도면 큼직한 업데이트마다 만날 수 있는 에러라고 볼 수 있습니다.</p>

<p><br/></p>

<pre><code>xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
</code></pre>

<p>error 내용은 위 처럼 나오고,</p>

<h3 id="해결법">해결법</h3>

<pre><code># cmd 에서 아래 명령어를 입력합니다.

$ xcode-select --install
</code></pre>

<p>macOs 에서 형상 관리 툴인 <code>git</code> 은 xcode 에 같이 딸려서 설치가 되는데,</p>

<p>아마도 macOS 의 큰 업데이트 후에 xcode 의 의존성 문제가 생기고, 이 때문에 git 을 실행 시키는데도 위와 같은 문제가 발생하는거 같다.</p>
]]></content>
        </item>
        
        <item>
            <title>[Mac] Homebrew 설치 &amp; 사용법</title>
            <link>https://kiwinam.com/posts/30/install-homebrew/</link>
            <pubDate>Tue, 31 Dec 2019 12:01:32 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/30/install-homebrew/</guid>
            <description>Homebrew macOS 의 패키지 관리자인 Homebrew 는 mac 를 많이 사용하는 엔지니어들한테 유용한 커맨드 도구입니다.
마치 ubuntu 의 apt-get 처럼 필요한 프로그램을 설치하거나 삭제, 업데이트 등의 동작을 손쉽게 하도록 도와줍니다.

설치 방법 /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  터미널에 위 명령어를 복사하고 붙여 넣어 주세요.
그럼 Homebrew 의 설치가 시작됩니다.
정말 간단하죠?

Homebrew 사용법 Homebrew 는 설치처럼 사용하는 방법도 간단합니다.
yum 과 apt-get 에 익숙하신 분들이라면 더 쉽게 사용할 수 있을거에요.</description>
            <content type="html"><![CDATA[

<hr />

<p><br/></p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/30/30-1-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/30/30-1-75.webp"
    />
    
    <img src="/img/30/30-1.png"  alt="homebrew logo"  class="left"  />


</picture></p>

<h2 id="homebrew">Homebrew</h2>

<p>macOS 의 패키지 관리자인 <code>Homebrew</code> 는 mac 를 많이 사용하는 엔지니어들한테 유용한 커맨드 도구입니다.</p>

<p>마치 ubuntu 의 <code>apt-get</code> 처럼 필요한 프로그램을 설치하거나 삭제, 업데이트 등의 동작을 손쉽게 하도록 도와줍니다.</p>

<p><br/></p>

<h3 id="설치-방법">설치 방법</h3>

<pre><code class="language-zsh">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>

<p>터미널에 위 명령어를 복사하고 붙여 넣어 주세요.</p>

<p>그럼 Homebrew 의 설치가 시작됩니다.</p>

<p>정말 간단하죠?</p>

<p><br/></p>

<h3 id="homebrew-사용법">Homebrew 사용법</h3>

<p><code>Homebrew</code> 는 설치처럼 사용하는 방법도 간단합니다.</p>

<p><code>yum</code> 과 <code>apt-get</code> 에 익숙하신 분들이라면 더 쉽게 사용할 수 있을거에요.</p>

<pre><code>$ brew install [패키지 명]   # 패키지 설치
$ brew uninstall [패키지 명] # 패키지 제거
$ brew search [패키지 명]    # 패키지명 검색
$ brew list                # Homebrew로 설치된 리스트 확인
$ brew update              # Homebrew 업데이트
</code></pre>

<p>위의 명령어들로 간단하게 <code>Homebrew</code> 를 사용할 수 있습니다.</p>

<p>예를 들어 python 를 Homebrew 로 설치 해보겠습니다.</p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/30/30-2-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/30/30-2-75.webp"
    />
    
    <img src="/img/30/30-2.png"  alt="install python using homebrew"  class="left"  />


</picture></p>

<p><code>brew install python</code></p>

<p>위 명령어로 간단하게 python 를 설치하였습니다.</p>

<p><br/></p>

<p>설치부터 사용까지 간편한 <code>Homebrew</code>, 더 편한 패키지 관리로 더 빠르게 개발해봅시다!</p>

<p>지금까지 Homebrew 설치와 사용법에 대해 포스팅이였습니다.</p>

<p>추가적으로 질문이나 혹은 제가 잘못된 정보를 기재했다면 언제든지 아래 댓글창에 댓글 남겨주세요.</p>

<p>남겨주신 댓글은 모두 읽고 답변 드립니다.</p>

<p>감사합니다.</p>

<p><br/></p>

<hr />

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[MySQL] 사용자 추가, 권한 설정, 삭제</title>
            <link>https://kiwinam.com/posts/29/mysql-add-user/</link>
            <pubDate>Thu, 02 May 2019 23:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/29/mysql-add-user/</guid>
            <description>0. tl; dr MySQL/MariaDB 계정 생성 MySQL 사용자 생성 문법
CREATE USER &#39;아이디&#39;@&#39;접속대역&#39; IDENTIFIED BY &#39;패스워드&#39;;  예시
CREATE USER &#39;kiwinam&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;PassWord123&#39;; GRANT ALL PRIVILEGES ON *.* TO &#39;kiwinam&#39;@&#39;localhost&#39; WITH GRANT OPTION;  

1. MySQL 로그인 mysql -u root -p  사용자 계정을 추가하기 위해서는 root 계정으로 로그인 해야합니다.


2. 생성된 계정 확인 이미 생성되어 있는 계정들을 확인하고 싶은 경우 아래와 같이 입력하면 됩니다.</description>
            <content type="html"><![CDATA[

<hr />

<p><br/></p>

<h2 id="0-tl-dr">0. tl; dr</h2>

<h4 id="mysql-mariadb-계정-생성">MySQL/MariaDB 계정 생성</h4>

<p><code>MySQL 사용자 생성 문법</code></p>

<pre><code class="language-c">CREATE USER '아이디'@'접속대역' IDENTIFIED  BY '패스워드';
</code></pre>

<p><code>예시</code></p>

<pre><code class="language-c">CREATE USER 'kiwinam'@'localhost' IDENTIFIED BY 'PassWord123';
GRANT ALL PRIVILEGES ON *.* TO 'kiwinam'@'localhost' WITH GRANT OPTION;
</code></pre>

<p><br/></p>

<hr />

<p><br/></p>

<h3 id="1-mysql-로그인">1. MySQL 로그인</h3>

<pre><code>mysql -u root -p
</code></pre>

<p>사용자 계정을 추가하기 위해서는 <code>root</code> 계정으로 로그인 해야합니다.</p>

<p><br/></p>

<p><br/></p>

<h3 id="2-생성된-계정-확인">2. 생성된 계정 확인</h3>

<p>이미 생성되어 있는 계정들을 확인하고 싶은 경우 아래와 같이 입력하면 됩니다.</p>

<pre><code class="language-command">use mysql;
select user, host from user;
</code></pre>

<p><picture>
    <source
        type="image/webp"
        srcset="/img/29/29-1-75.webp"
    />
    
    <img src="/img/29/29-1.png"  alt="Select user, host from user"  class="left"  style="width: 500px"  />


</picture></p>

<p>이렇게 MySQL 에 어떤 사용자 계정이 있는지 확인할 수 있습니다.</p>

<p><br/></p>

<p><br/></p>

<h3 id="3-계정-생성">3. 계정 생성</h3>

<pre><code>CREATE USER 'kiwinam'@'localhost' IDENTIFIED BY 'PassWord123';
CREATE USER 'kiwinam'@'%' IDENTIFIED BY 'PassWord123';
</code></pre>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/29/29-2-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/29/29-2-75.webp"
    />
    
    <img src="/img/29/29-2.png"  alt="show grants for &#39;kiwinam&#39;@&#39;localhost&#39;"  class="left"  />


</picture></p>

<p>호스트가 <code>localhost</code> 인 경우는 로컬에서만 접근 가능한 계정이고,</p>

<p>% 인 경우는 외부의 모든 호스트에서 접근을 허용합니다.</p>

<p>특정 호스트만 허용하기 위해 아이피로 설정할 수도 있습니다.</p>

<p><br/></p>

<p><br/></p>

<h3 id="4-권한-설정">4. 권한 설정</h3>

<p>생성한 계정에 어떤 데이터베이스에 접근할 수 있을지 권한을 설정해줘야합니다.</p>

<p>생성된 뒤 데이터베이스에 아무런 권한을 허용받지 못한 계정으로는 작업을 진행할 수 없습니다.</p>

<p>그럼 권한을 추가해보도록 하겠습니다.</p>

<pre><code class="language-c"># 권한 설정 문법
# GRANT ALL PRIVILEGES ON '데이터베이스'.'테이블' TO '유저'@'호스트' WITH GRANT OPTION;

# 모든 데이터베이스에 kiwinam 계정 권한 부여
GRANT ALL PRIVILEGES ON *.* TO 'kiwinam'@'localhost' WITH GRANT OPTION;

# blog 데이터베이스에 kiwinam 계정 권한 부여
GRANT ALL PRIVILEGES ON blog.* TO 'kiwinam'@'localhost' WITH GRANT OPTION;

# 변경된 모든 권한들을 적용
FLUSH PREVILEGES;
</code></pre>

<p>GRANT 명령어로 데이터베이스의 권한을 설정해준 다음에는 꼭 <code>FLUSH PREVIELEGERS</code> 명령어를 통해 변경된 사항을 적용해줘야합니다.</p>

<p><br/></p>

<h4 id="4-1-권한-확인하기">4-1. 권한 확인하기</h4>

<pre><code class="language-c"># 문법
SHOW GRANTS FOR '아이디'@'호스트'

# kiwinam@localhost 의 부여된 권한 확인하기
SHOW GRANTS FOR 'kiwinam'@'localhost'
</code></pre>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/29/29-3-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/29/29-3-75.webp"
    />
    
    <img src="/img/29/29-3.png"  alt="show grants for &#39;kiwinam&#39;@&#39;localhost&#39;"  class="left"  />


</picture></p>

<p><br/></p>

<p><br/></p>

<h3 id="5-계정-삭제">5. 계정 삭제</h3>

<p>계정 삭제는 너무나도 간단합니다.</p>

<pre><code class="language-c"># 삭제 문법
DROP USER '사용자'@'호스트'

# kiwinam 계정 삭제하기
DROP USER 'kiwinam'@'localhost'
</code></pre>

<p><br/></p>

<p><br/></p>

<p>여기까지 MySQL 과 MariaDB 에서 사용자의 추가, 삭제 그리고 권한 설정을 어떻게 하는지에 대해 포스팅 했습니다.</p>

<p>추가적으로 질문이 있거나 제대로 실행이 되지 않는 분들은 아래 댓글 남겨주시면 됩니다.</p>

<p>최대한 빠르게 답변해드리려고 노력하겠습니다.</p>

<p>그럼 다음 포스팅에서 뵙겠습니다.</p>

<p><br/>
<br/></p>
]]></content>
        </item>
        
        <item>
            <title>[MariaDB] Mac 에서 Mariadb 설치</title>
            <link>https://kiwinam.com/posts/28/install-mariadb-on-mac/</link>
            <pubDate>Thu, 21 Mar 2019 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/28/install-mariadb-on-mac/</guid>
            <description>[Mac] Mariadb 설치

0. Mariadb 란 Mariadb 는 Mysql 의 창업자이자 핵심 개발자인 몬티 와이드니어스가 회사를 2009년에 썬 마이크로즈시스템에 팔고 나온 뒤 다시 만든 RDBMS 입니다.
Mysql 과 마찬가지로 몬티의 딸 이름을 따와서 MariaDB 라고 이름을 지었습니다.
Mysql 의 핵심 개발자가 만든 Mariadb 이기 때문에, 대부분의 명령어들이 Mysql 과 유사합니다.
하지만 Mysql 과 Mariadb 의 핵심적인 차이점은 라이센스에 있습니다.
오라클이 라이센스를 보유하고 있는 Mysql 과 다르게 MariaDB 는 GPL V2 를 따르는 순수한 오픈 소스이고, 그렇기 때문에 누구든지 커뮤니티 버전을 다운받고 사용할 수 있습니다.</description>
            <content type="html"><![CDATA[

<hr />

<p>[Mac] Mariadb 설치</p>

<hr />

<p><picture style="width: 70%">
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/28/28-0-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/28/28-0-75.webp"
    />
    
    <img src="/img/28/28-0.png"  alt="brew update"  class="left"  style="width: 500px"  />


</picture></p>

<h3 id="0-mariadb-란">0. Mariadb 란</h3>

<p>Mariadb 는 Mysql 의 창업자이자 핵심 개발자인 몬티 와이드니어스가 회사를 2009년에 썬 마이크로즈시스템에 팔고 나온 뒤 다시 만든 RDBMS 입니다.</p>

<p>Mysql 과 마찬가지로 몬티의 딸 이름을 따와서 MariaDB 라고 이름을 지었습니다.</p>

<p>Mysql 의 핵심 개발자가 만든 Mariadb 이기 때문에, 대부분의 명령어들이 Mysql 과 유사합니다.</p>

<p>하지만 Mysql 과 Mariadb 의 핵심적인 차이점은 라이센스에 있습니다.</p>

<p>오라클이 라이센스를 보유하고 있는 Mysql 과 다르게 MariaDB 는 GPL V2 를 따르는 순수한 오픈 소스이고, 그렇기 때문에 누구든지 커뮤니티 버전을 다운받고 사용할 수 있습니다.</p>

<p>MariaDB 는 MySQL 에 비해 어플리케이션 부분 속도가 4~5천배 정도 빠르고, 성능적으로도 70% 정도 빠릅니다.</p>

<p>그리고 가장 핵심적으로 MySQL 커뮤니티 버전에서 지원하지 않는 스레드 풀 기능을 MariaDB 커뮤니티 버전에서 제공합니다. 이 점 때문에 저는 주로 MariaDB 를 사용하고 있습니다.</p>

<p><br/></p>

<h3 id="1-install-mariadb-on-os-x">1. Install MariaDB on OS X</h3>

<h4 id="1-1-brew-install">1.1 Brew install</h4>

<p>MariaDB 를 설치하기 전에 HomeBrew 라는 Mac OS X 용 패키지 관리자를 설치하겠습니다.</p>


    <img src="/img/28/28-6.png"  alt="HomeBrew"  class="left"  style="width: 500px"  />



<p>터미널을 열고 아래 명령어를 복사 붙여넣기 해주세요.</p>

<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>

<p>간단하게 HomeBrew 설치가 마무리 됩니다.</p>

<p><br/></p>

<h4 id="1-2-mariadb-install">1.2 Mariadb install</h4>

<ol>
<li><p>먼저 HomeBrew 업데이트를 진행해주세요.</p>

<p><code>brew update</code></p></li>
</ol>

<p><picture style="width: 100%">
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/28/28-1-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/28/28-1-75.webp"
    />
    
    <img src="/img/28/28-1.png"  alt="brew update"  class="left"  style="width: 500px"  />


</picture></p>

<ol>
<li><p>HomeBrew 를 통해 MariaDB 를 설치</p>

<p><code>brew install mariadb</code>
<picture style="width: 70%">
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/28/28-2-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/28/28-2-75.webp"
    />
    
    <img src="/img/28/28-2.png"  alt="brew install mariadb"  class="left"  style="width: 500px"  />


</picture></p>

<p>잠시 뒤 설치가 완료 되었다면 아래와 같은 화면이 보입니다.
<picture style="width: 70%">
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/28/28-3-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/28/28-3-75.webp"
    />
    
    <img src="/img/28/28-3.png"  alt="success install"  class="left"  style="width: 500px"  />


</picture></p></li>

<li><p>MariaDB 백그라운드 실행</p>

<p>이제 설치가 다 되었으니 디비를 실행하겠습니다.
<code>mysql.server start</code></p>

<p><picture style="width: 70%">
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/28/28-4-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/28/28-4-75.webp"
    />
    
    <img src="/img/28/28-4.png"  alt="success install"  class="left"  style="width: 500px"  />


</picture></p></li>

<li><p>MariaDB 접속</p>

<p><code>mysql -u root</code>
<picture style="width: 70%">
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/28/28-5-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/28/28-5-75.webp"
    />
    
    <img src="/img/28/28-5.png"  alt="success install"  class="left"  style="width: 500px"  />


</picture></p></li>
</ol>

<p><br/></p>

<p>이상 Mac 에서 MariaDB 설치하는 방법에 대해 포스팅이였습니다.</p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[Git] warning: LF will be CRLF 해결법</title>
            <link>https://kiwinam.com/posts/27/git-lf-will-be-crlf/</link>
            <pubDate>Fri, 15 Feb 2019 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/27/git-lf-will-be-crlf/</guid>
            <description>[Git] warning: LF will be CRLF

 
터미널 or CMD 에서 Git command 를 사용하는데 위 사진 같은 warning 이 나오는 경우가 있습니다.
왜 이러는 것이고 또 어떻게 해결해야 할까요?

Shutup and code Window user git config --global core.autocrlf true
Mac user git config --global core.autocrlf true input


해당 문제는 OS 별로 엔터키를 입력 했을 때, End line 의 표시 형태가 달라서 발생하는 문제입니다.</description>
            <content type="html"><![CDATA[

<hr />

<p>[Git] warning: LF will be CRLF</p>

<hr />

<p><br/></p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/27/27-1-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/27/27-1-75.webp"
    />
    
    <img src="/img/27/27-1.png"  alt="CRLF will be replaced"  class="left"  style="width: 600px"  />


</picture></p>

<p>터미널 or CMD 에서 Git command 를 사용하는데 위 사진 같은 warning 이 나오는 경우가 있습니다.</p>

<p>왜 이러는 것이고 또 어떻게 해결해야 할까요?</p>

<p><br/></p>

<h2 id="shutup-and-code">Shutup and code</h2>

<h3 id="window-user">Window user</h3>

<p><code>git config --global core.autocrlf true</code></p>

<h3 id="mac-user">Mac user</h3>

<p><code>git config --global core.autocrlf true input</code></p>

<p><br/></p>

<p><br/></p>

<hr />

<p>해당 문제는 OS 별로 엔터키를 입력 했을 때, End line 의 표시 형태가 달라서 발생하는 문제입니다.</p>

<p><br/></p>

<p>윈도우 운영 체제는 줄 바꿈에 (New line)</p>

<p>현재 라인에서 커서의 위치를 가장 앞으로 이동하는 Carriage Return (CR) 과</p>

<p>커서를 그대로 두고 종이를 위로 한 칸 올리는 Line feed (LF)를 함께 사용합니다.</p>

<p><br/></p>

<p>반면 유닉스 운영 체제는 Line feed (LF) 만 사용하여 줄 바꿈을 합니다.</p>

<p><br/></p>

<p>예를 들자면</p>

<p><code>Window</code></p>

<pre><code>Hello. CRLF
World.
</code></pre>

<p><code>Unix</code></p>

<pre><code>Hello. LF
World.
</code></pre>

<p>이렇게 운영 체제 마다 개행 표시 (End line) 의 표기 방법이 다릅니다.</p>

<p>이 다른 표기 방법으로 인해, 여러 개발자가 Git 를 통해 협업할 때 윈도우를 사용하는 개발자의 개행 문자와 맥(Unix) 를 사용하는 개발자의 개행 문자가 다르게 됩니다.</p>

<p>Git 에서는 이런 다른 개행 방식 때문에 혼란이 있을 수 있고, 이를 개발자에게 경고해 주는 것 입니다.</p>

<p>그래서 유닉스 사용자는 <code>CRLF will be replaced by LF in ...</code> 라는 메세지를</p>

<p>윈도우 사용자는 <code>LF will be replaced by CRLF in</code> 라는 경고 메세지를 받게 됩니다.</p>

<p><br/></p>

<p>그래서 Git 에서는 이 두 가지를 해결 하는 기능이 있습니다.</p>

<p><code>core.autocrlf</code> 라는 기능인데 이 기능의 사용 설정만 하면 해당 에러는 더 이상 나타나지 않습니다.</p>

<p>이 기능은 코드를 추가하거나 하는 Output 의 동작에서는 CRLF -&gt; LF 로 자동 변환해주고,</p>

<p>Pull 이나 Clone 같은 Input 의 동작에서는 LF -&gt; CRLF 로 자동 변환 해줍니다.</p>

<p><br/></p>

<h4 id="윈도우-사용자-해결-방법">윈도우 사용자 해결 방법</h4>

<p><code>git config --global core.autocrlf true</code>
<em>(global 은 모든 프로젝트에서 사용하겠다는 옵션입니다.)</em></p>

<p>로 설정하여 코드를 내보낼 땐 LF 로 변환하고, 가져올 땐 CRLF 로 가져와서 윈도우 운영체제에서 사용하고 있는 개행 문자로 가져오게 합니다.</p>

<p><br/></p>

<h4 id="unix-mac-사용자-해결-방법">Unix (Mac) 사용자 해결 방법</h4>

<p>반대로 Unix (Mac) 를 사용하는 사용자들은 기본으로 개행 문자가 LF 로 설정 되기 때문에,</p>

<p>코드를 가져올 때 (Input 의 동작을 할 때)는 CRLF 로 변환할 필요가 없습니다.</p>

<p>그렇기 때문에 Unix (Mac) 사용자 분들은</p>

<p><code>git config --global core.autocrlf true input</code></p>

<p>으로 설정하여 코드를 가져올 때 변환하지 않도록 설정해줍니다.</p>

<p><br/></p>

<p>만약에 이런 개행 문자의 자동 변환을 원치 않는 개발자 분들은</p>

<p><code>git config --global core.safecrlf false</code></p>

<p>로 설정하셔서 개행 자동 변환을 막을 수도 있습니다.</p>

<p><br/></p>

<p>읽어주셔서 감사합니다.</p>

<p>도움이 되길 바랄게요.</p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] 네비게이션 드로어 사용법</title>
            <link>https://kiwinam.com/posts/26/android-navigation-drawer/</link>
            <pubDate>Sat, 29 Dec 2018 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/26/android-navigation-drawer/</guid>
            <description>[안드로이드] 네비게이션 드로어 (Navigation drawer) 사용법

  구글 머티리얼 디자인 가이드 중 네비게이션 드로어
네비게이션 드로어는 화면 왼쪽 가장자리에 위치해 있고 앱을 탐색할 수 있는 하나의 패널입니다.
이걸 잘 활용한다면 특정 메뉴를 찾기 위해 클릭이 많이 일어나는 (Deep depth) 문제를 해결할 수 있습니다.
평상시에는 화면 밖에 가려져 있지만 왼쪽 스와이프나 왼쪽 상단 메뉴 버튼을 클릭하면 위 사진처럼 나옵니다.
그럼 네비게이션 드로어를 어떻게 구현하는지 알아보겠습니다.


1. Result 이번 포스팅에서 진행한 네비게이션 드로어 결과 화면</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] 네비게이션 드로어 (Navigation drawer) 사용법</p>

<hr />

<p><br/></p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/26/26-1-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/26/26-1-75.webp"
    />
    
    <img src="/img/26/26-1.png"  alt="navigation drawer"  class="left"  style="width: 600px"  />


</picture>
<a href="https://material.io/design/components/navigation-drawer.html" target="_blank">구글 머티리얼 디자인 가이드 중 네비게이션 드로어</a></p>

<p>네비게이션 드로어는 화면 왼쪽 가장자리에 위치해 있고 앱을 탐색할 수 있는 하나의 패널입니다.</p>

<p>이걸 잘 활용한다면 특정 메뉴를 찾기 위해 클릭이 많이 일어나는 (Deep depth)  문제를 해결할 수 있습니다.</p>

<p>평상시에는 화면 밖에 가려져 있지만 왼쪽 스와이프나 왼쪽 상단 메뉴 버튼을 클릭하면 위 사진처럼 나옵니다.</p>

<p>그럼 네비게이션 드로어를 어떻게 구현하는지 알아보겠습니다.</p>

<p><br/></p>

<p><br/></p>

<h3 id="1-result">1. Result</h3>

<p>
    <img src="/img/26/26-2.gif"  alt="navigation drawer result"  class="left"  style="width: 400px"  />


<em>이번 포스팅에서 진행한 네비게이션 드로어 결과 화면</em></p>

<p><br/></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-안드로이드-서포트-라이브러리-추가">2-1. 안드로이드 서포트 라이브러리 추가</h4>

<ul>
<li><p>진행에 앞서 네비게이션 드로어는 서포트 라이브러리에 포함되어 있기 때문에 App Gradle 에 의존성 라이브러리를 넣어줘야합니다.</p></li>

<li><p>최근 안드로이드 스튜디오에서 새 프로젝트를 만들면 기본으로 서포트 라이브러리들이 들어가 있지만, 혹시 확인해보고 없으시다면 아래 라이브러리를 Gradle 에 추가해주세요.</p></li>
</ul>

<p><em>build.gradle (app)</em></p>

<p><code>implementation 'com.android.support:design:27.1.1'</code></p>

<p><br/></p>

<h4 id="2-2-네비게이션-메뉴-추가">2-2. 네비게이션 메뉴 추가</h4>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/26/26-3-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/26/26-3-75.webp"
    />
    
    <img src="/img/26/26-3.png"  alt="navigation menu"  class="left"  />


</picture></p>

<ul>
<li><p>네비게이션 드로어에서 보여줄 메뉴들을 추가합니다.</p></li>

<li><p>메뉴들에 포함되는 아이콘은 미리 /res/drawable/ 에 준비해주세요. ( New &gt; Vector Asset 으로 추가하면 편합니다.)</p></li>
</ul>

<p>_/res/menu/main_navigation<em>menu.xml</em></p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;group android:checkableBehavior=&quot;single&quot;&gt;
        &lt;item
                android:id=&quot;@+id/account&quot;
                android:icon=&quot;@drawable/ic_account_circle_black_24dp&quot;
                android:title=&quot;계정&quot;
        /&gt;
        &lt;item
                android:id=&quot;@+id/star&quot;
                android:icon=&quot;@drawable/ic_star_black_24dp&quot;
                android:title=&quot;즐겨찾기&quot;
        /&gt;
        &lt;item
                android:id=&quot;@+id/cart&quot;
                android:icon=&quot;@drawable/ic_shopping_cart_black_24dp&quot;
                android:title=&quot;장바구니&quot;
        /&gt;
    &lt;/group&gt;
    &lt;group android:checkableBehavior=&quot;single&quot;&gt;
        &lt;item
                android:id=&quot;@+id/bug_report&quot;
                android:icon=&quot;@drawable/ic_bug_report_black_24dp&quot;
                android:title=&quot;버그 리포트&quot;
        /&gt;
        &lt;item
                android:id=&quot;@+id/setting&quot;
                android:icon=&quot;@drawable/ic_settings_black_24dp&quot;
                android:title=&quot;설정&quot;
        /&gt;
        &lt;item
                android:id=&quot;@+id/logout&quot;
                android:icon=&quot;@drawable/ic_exit_to_app_white_24dp&quot;
                android:title=&quot;로그아웃&quot;
        /&gt;
    &lt;/group&gt;
&lt;/menu&gt;
</code></pre>

<p><br/></p>

<h4 id="2-3-네비게이션-헤더-추가-optional">2-3. 네비게이션 헤더 추가 (Optional)</h4>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/26/26-4-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/26/26-4-75.webp"
    />
    
    <img src="/img/26/26-4.png"  alt="navigation header"  class="left"  />


</picture></p>

<ul>
<li><p>네비게이션 헤더 부분은 하셔도 되고, 내가 만들 앱에 필요 없으시면 굳이 안넣으셔도 됩니다.</p></li>

<li><p>헤더는 레이아웃이기 때문에 /res/layout 에 파일을 만들어주시면됩니다.</p></li>

<li><p>나중에 DrawerLayout 에서 헤더를 설정할 때 사용됩니다.</p></li>
</ul>

<p>_/res/layout/main_nav<em>header.xml</em></p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;android.support.constraint.ConstraintLayout
        xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;230dp&quot;
        android:background=&quot;@color/colorPrimary&quot;&gt;

    &lt;ImageView
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;150dp&quot; tools:srcCompat=&quot;@tools:sample/avatars&quot;
            android:id=&quot;@+id/imageView&quot;
            app:layout_constraintStart_toStartOf=&quot;parent&quot; android:layout_marginStart=&quot;24dp&quot;
            android:layout_marginTop=&quot;4dp&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot;/&gt;
    &lt;TextView
            android:text=&quot;Charlie Park&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;0dp&quot;
            android:id=&quot;@+id/textView&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; android:layout_marginStart=&quot;24dp&quot;
            android:layout_marginTop=&quot;12dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/imageView&quot;
            android:textColor=&quot;#fff&quot;/&gt;
    &lt;TextView
            android:text=&quot;kiwinam@test.com&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:id=&quot;@+id/textView2&quot; android:textSize=&quot;10sp&quot;
            android:layout_marginTop=&quot;8dp&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/textView&quot;
            android:layout_marginStart=&quot;24dp&quot; app:layout_constraintStart_toStartOf=&quot;parent&quot; android:textColor=&quot;#fff&quot;/&gt;
&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>

<p><br/></p>

<h4 id="2-4-메인-레이아웃-수정">2-4. 메인 레이아웃 수정</h4>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/26/26-5-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/26/26-5-75.webp"
    />
    
    <img src="/img/26/26-5.png"  alt="main layout"  class="left"  />


</picture></p>

<ul>
<li><p>네비게이션 드로어를 사용할 메인 레이아웃을 수정합니다.</p></li>

<li><p>여기서 포인트는 메인 레이아웃의 최상단 레이아웃이 DrawerLayout 이여야 네비게이션 드로어 가 정상적으로 동작합니다.</p></li>

<li><p>DrawerLayout 의 자식 레이아웃으로 NavigationView 를 설정해주시면 됩니다.</p></li>

<li><p>NavigationView 에서 방금 만든 메뉴와 헤더를 설정합니다.</p></li>
</ul>

<p>_/res/layout/activity<em>main.xml</em></p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!--parent layout--&gt;
&lt;android.support.v4.widget.DrawerLayout
        xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
        android:id=&quot;@+id/drawerLayout&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;
        android:fitsSystemWindows=&quot;true&quot;
        &gt;
    &lt;!-- main layout--&gt;
    &lt;RelativeLayout
            android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;
            android:background=&quot;#fff&quot;&gt;
        &lt;android.support.v7.widget.Toolbar
                android:id=&quot;@+id/toolbar&quot;
                android:layout_width=&quot;match_parent&quot;
                android:layout_height=&quot;wrap_content&quot;
                android:background=&quot;@color/colorPrimary&quot;
                app:contentInsetStart=&quot;0dp&quot;
                android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;
                app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;
        /&gt;
        &lt;TextView
                android:layout_width=&quot;wrap_content&quot;
                android:layout_height=&quot;wrap_content&quot;
                android:text=&quot;test&quot;
                android:layout_centerInParent=&quot;true&quot;/&gt;
    &lt;/RelativeLayout&gt;

    &lt;!--navigation drawer--&gt;
    &lt;android.support.design.widget.NavigationView
            android:id=&quot;@+id/navigationView&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;match_parent&quot;
            android:layout_gravity=&quot;start&quot;
            app:headerLayout=&quot;@layout/main_nav_header&quot;
            app:menu=&quot;@menu/main_navigation_menu&quot;
    /&gt;

&lt;/android.support.v4.widget.DrawerLayout&gt;
</code></pre>

<p><br/></p>

<h4 id="2-4-activity-수정">2-4. Activity 수정</h4>

<ul>
<li><p>네비게이션 드로어는 레이아웃 설정이 대부분이고 실제 코틀린이나 자바 코드는 많이 사용하지 않아도 구현 가능합니다.</p></li>

<li><p>이번 예제에서도 (1)메뉴 버튼을 눌렀을 때 네비게이션이 나오도록 처리하거나 (2)버튼 클릭 리스너를 설정해주는 코드만 넣어보겠습니다.</p></li>
</ul>

<p>(1) 메뉴 버튼 클릭 시 네비게이션 드로어 열기</p>

<p><em>MainActivity.kt</em></p>

<pre><code class="language-java">// 툴바 메뉴 버튼이 클릭 됐을 때 콜백
override fun onOptionsItemSelected(item: MenuItem?): Boolean {
    // 클릭된 메뉴 아이템의 아이디 마다 when 구절로 클릭시 동작을 설정한다.
    when(item!!.itemId){
        android.R.id.home-&gt;{ // 메뉴 버튼
            drawerLayout.openDrawer(GravityCompat.START)    // 네비게이션 드로어 열기
        }
        R.id.menu_search-&gt; Snackbar.make(toolbar,&quot;Search menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
        R.id.menu_account-&gt; Snackbar.make(toolbar,&quot;Account menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
        R.id.menu_logout-&gt; Snackbar.make(toolbar,&quot;Logout menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
    }
    return super.onOptionsItemSelected(item)
}
</code></pre>

<ul>
<li>메뉴 버튼이 클릭되면  <code>drawerLayout.openDrawer(GravityCompat.START)</code>  를 호출하여 네비게이션 드로어를 열어줍니다.</li>
</ul>

<p><br/></p>

<p>(2) 네비게이션 메뉴 버튼 클릭 리스너 설정</p>

<ul>
<li>먼저 네비게이션 메뉴 클릭 리스너를 클래스에 implement 하겠습니다.</li>
</ul>

<p><em>MainActivity.kt</em></p>

<p><code>class MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {</code></p>

<ul>
<li>그런 다음 onNavigationItemSelected 메서드를 오버라이드하여 클릭 시 어떤 처리를 해줄지 설정합니다.</li>
</ul>

<p><em>MainActivity.kt</em></p>

<pre><code class="language-java">// 네비게이션 드로어 메뉴 클릭 리스너
override fun onNavigationItemSelected(item: MenuItem): Boolean {
    when(item.itemId){  // 네비게이션 메뉴가 클릭되면 스낵바가 나타난다.
        R.id.account-&gt;Snackbar.make(toolbar,&quot;Navigation Account pressed&quot;,Snackbar.LENGTH_SHORT).show()
        R.id.setting-&gt;Snackbar.make(toolbar,&quot;Navigation Setting pressed&quot;,Snackbar.LENGTH_SHORT).show()
    }
    drawerLayout.closeDrawers() // 기능을 수행하고 네비게이션을 닫아준다.
    return false
}
</code></pre>

<ul>
<li><p>이번 예제에서는 스낵바만 표시하도록 하였습니다.</p></li>

<li><p>스낵바를 표시한 다음 네비게이션 드로어를 닫아줌으로써 사용자 경험을 매끄럽게 해줍니다.</p></li>
</ul>

<p>여기까지 구현 하였으면 기본적인 네비게이션 드로어 사용법은 다 알수 있습니다.</p>

<p><br/></p>

<h4 id="2-5-뒤로가기-클릭-시-네비게이션-닫기-optional">2-5. 뒤로가기 클릭 시 네비게이션 닫기 (Optional)</h4>

<p><img src="/img/26/26-6.gif" alt="back click" /></p>

<p>보통 사용자들이 네비게이션 드로어가 열려있을 때 뒤로가기 버튼을 누르면 네비게이션이 닫힐 것을 기대하는데, 이대로 코드를 진행하면 그렇게 동작하지 않습니다.</p>

<p>추가적으로 뒤로가기 버튼을 눌렀을 때 네비게이션 드로어를 닫아보겠습니다.</p>

<p><em>MainActivity.kt</em></p>

<pre><code class="language-java">/*
 * 뒤로가기 버튼으로 네비게이션 닫기
 *
 * 네비게이션 드로어가 열려 있을 때 뒤로가기 버튼을 누르면 네비게이션을 닫고,
 * 닫혀 있다면 기존 뒤로가기 버튼으로 작동한다.
 */
override fun onBackPressed() {
    if(drawerLayout.isDrawerOpen(GravityCompat.START)){
        drawerLayout.closeDrawers()
    }else{
        super.onBackPressed()
    }
}
</code></pre>

<p>뒤로가기 버튼을 눌렀을 때 닫히는 네비게이션 드로어</p>

<p><br/></p>

<p><br/></p>

<h3 id="3-source-code">3. Source Code</h3>

<p>전체 소스코드는 <a href="https://github.com/kiwinam/toolbar_test" target="_blank">GitHub</a> 에 연동해놓았습니다.</p>

<p>읽어주셔서 감사합니다.</p>

<p>제 글이 도움 되길 바랄게요.</p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] 툴바 사용법 - 버튼 추가</title>
            <link>https://kiwinam.com/posts/25/android-toolbar-add-button/</link>
            <pubDate>Wed, 26 Dec 2018 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/25/android-toolbar-add-button/</guid>
            <description>[안드로이드] 툴바 사용법 (버튼 추가) - add button to tool bar

안드로이드 API 21 (롤리팝 5.0) 버전부터 기존 Action bar 를 대체할 tool bar 라는 앱 상단에 표시되는 뷰가 추가되었습니다.
안드로이드 개발자 뿐만 아니라 일반 사용자들에게도 상당히 익숙한 뷰입니다.
 
머티리얼 디자인 가이드 공식 문서 중 Top App bars

기존 액션바에서 있던 높이 변경 제약, 액션바 내부 뷰 추가 불가능 등의 문제점을
툴바에서는 유연하게 대처할 수 있습니다.</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] 툴바 사용법 (버튼 추가) - add button to tool bar</p>

<hr />

<p><br/></p>

<p>안드로이드 API 21 (롤리팝 5.0) 버전부터 기존 Action bar 를 대체할 tool bar 라는 앱 상단에 표시되는 뷰가 추가되었습니다.</p>

<p>안드로이드 개발자 뿐만 아니라 일반 사용자들에게도 상당히 익숙한 뷰입니다.</p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/25/25-1-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/25/25-1-75.webp"
    />
    
    <img src="/img/25/25-1.png"  alt="Top App bar"  class="left"  />


</picture></p>

<p><a href="https://material.io/develop/android/components/app-bar-layout/" target="_blank">머티리얼 디자인 가이드 공식 문서 중 Top App bars</a></p>

<p><br/></p>

<p>기존 액션바에서 있던 높이 변경 제약, 액션바 내부 뷰 추가 불가능 등의 문제점을</p>

<p>툴바에서는 유연하게 대처할 수 있습니다.</p>

<p>그럼 이제 기본적인 툴바 사용법과 어떻게 툴바에 버튼을 추가하는지 알려드리겠습니다.</p>

<p><br/></p>

<p><br/></p>

<h3 id="1-result">1. Result</h3>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/25/25-2-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/25/25-2-75.webp"
    />
    
    <img src="/img/25/25-2.png"  alt="Result"  class="left"  />


</picture></p>

<p><br/></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-기존-actionbar-제거">2-1. 기존 ActionBar 제거</h4>

<ul>
<li>Toolbar 를 적용하기 전 프로젝트를 생성 시 같이 설정되는 ActionBar 를 제거하겠습니다.</li>
</ul>

<p><em>res/values/style.xml</em></p>

<pre><code class="language-xml">&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;
</code></pre>

<ul>
<li>기존 생성 되어 있는 AppTheme  의 parent 를 NoActionBar 로 변경합니다.</li>
</ul>

<p><br/></p>

<h4 id="2-2-layout-에-toolbar-추가">2-2. Layout 에 ToolBar 추가</h4>

<ul>
<li>툴바를 사용하고 싶은 레이아웃에 ToolBar 를 추가해줍니다.</li>
</ul>

<p>_res/layout/activity<em>main.xml</em></p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;android.support.constraint.ConstraintLayout
        xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
        xmlns:tools=&quot;http://schemas.android.com/tools&quot;
        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;
        tools:context=&quot;.MainActivity&quot;&gt;
    &lt;android.support.v7.widget.Toolbar
            android:id=&quot;@+id/toolbar&quot;
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:background=&quot;@color/colorPrimary&quot;
            android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;
            app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;
        /&gt;
    &lt;TextView
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot;
            android:text=&quot;Hello World!&quot;
            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
            app:layout_constraintLeft_toLeftOf=&quot;parent&quot;
            app:layout_constraintRight_toRightOf=&quot;parent&quot;
            app:layout_constraintTop_toTopOf=&quot;parent&quot;/&gt;

&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>

<ul>
<li>android:theme 같은 경우 하얀색 그룹 버튼을 위해 추가하였습니다. 굳이 따라하실 필요는 없습니다.</li>
</ul>

<p><br/></p>

<h4 id="2-3-toolbar-에서-사용할-menu-추가">2-3. ToolBar 에서 사용할 Menu 추가</h4>

<ul>
<li>툴바에서 메뉴 버튼들을 res 폴더 밑에 추가해보겠습니다.</li>
</ul>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/25/25-3-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/25/25-3-75.webp"
    />
    
    <img src="/img/25/25-3.png"  alt="res folder"  class="left"  />


</picture></p>

<ul>
<li>프로젝트 네비게이션 위에서 우클릭 -&gt; new -&gt; Android Resource file</li>
</ul>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/25/25-4-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/25/25-4-75.webp"
    />
    
    <img src="/img/25/25-4.png"  alt="new android resource"  class="left"  />


</picture></p>

<ul>
<li>Resource type 을 Menu 로 선택해주고 파일 명을 작성합니다. (저는 main_menu 로 적었습니다.)</li>
</ul>

<p><br/></p>

<h4 id="2-4-menu-xml-작성">2-4. Menu.xml 작성</h4>

<ul>
<li>메뉴에서 어떤 아이템들을 추가할 지 main_menu.xml 파일에 적습니다.</li>
</ul>

<p>_res/menu/main<em>menu.xml</em></p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
      xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
&gt;
    &lt;item
            android:id=&quot;@+id/menu_search&quot;
            android:title=&quot;search&quot;
            android:icon=&quot;@drawable/ic_search_white_24dp&quot;
            app:showAsAction=&quot;always&quot;
            /&gt;
    &lt;group&gt;
        &lt;item
                android:id=&quot;@+id/menu_account&quot;
                android:title=&quot;account&quot;
                android:icon=&quot;@drawable/ic_account_circle_white_24dp&quot;
        /&gt;
        &lt;item
                android:id=&quot;@+id/menu_logout&quot;
                android:title=&quot;logout&quot;
                android:icon=&quot;@drawable/ic_exit_to_app_white_24dp&quot;
        /&gt;
    &lt;/group&gt;
&lt;/menu&gt;
</code></pre>

<ul>
<li><p><code>&lt;item/&gt;</code> 은 바로 보이는 메뉴 버튼 이고 <code>&lt;group&gt;</code>  으로 묶인 item 들은 점으로 Result 사진 우상단 처럼 하나의 버튼(오버플로우 메뉴) 밑에 서브 메뉴로 묶이게 됩니다.</p></li>

<li><p>android:icon 속성은 액션 버튼에 보일 아이콘을 설정합니다. drawable 에 있는 이미지 리소스를 사용하면 됩니다.</p></li>

<li><p>app:showAsAction  속성은 메뉴 버튼이 어떻게 보일지를 설정하는 것입니다.</p></li>
</ul>

<table>
<thead>
<tr>
<th>속성</th>
<th>설명</th>
</tr>
</thead>

<tbody>
<tr>
<td><code>app:showAsAction=&quot;always&quot;</code></td>
<td>항상 툴바의 액션으로 보이게 표시</td>
</tr>

<tr>
<td><code>app:showAsAction=&quot;never&quot;</code></td>
<td>항상 오버플로우 메뉴에 포함되게 표시</td>
</tr>

<tr>
<td><code>app:showAsAction=&quot;ifRoom&quot;</code></td>
<td>만약 공간이 있다면 액션, 없다면 오버플로우 메뉴에 표시</td>
</tr>

<tr>
<td><code>app:showAsAction=&quot;withText&quot;</code></td>
<td>툴바의 액션으로 표시할 때 item title 과 같이 표시 (공간이 있는 경우만)</td>
</tr>
</tbody>
</table>

<ul>
<li>이번 예제에서는 검색 버튼, 계정 버튼, 로그아웃 버튼을 툴바 메뉴로 사용해보겠습니다.</li>
</ul>

<p><br/></p>

<p><br/></p>

<h4 id="2-5-activity-에서-toolbar-설정">2-5. Activity 에서 ToolBar 설정</h4>

<ul>
<li>툴바는 레이아웃에서만 설정한다고 적용되지 않습니다. 툴바를 사용할 액티비티에서 설정해줄 것이 몇 가지 있습니다.</li>
</ul>

<p>2-5-1. 툴바 사용 설정</p>

<p><code>setSupportActionBar(toolbar)</code></p>

<ul>
<li>이 액티비티에서 툴바를 사용하겠다는 선언입니다.</li>
</ul>

<p><br/></p>

<p>2-5-2. 툴바 왼쪽 버튼 설정</p>

<pre><code class="language-java">supportActionBar!!.setDisplayHomeAsUpEnabled(true)  // 왼쪽 버튼 사용 여부 true
supportActionBar!!.setHomeAsUpIndicator(R.drawable.ic_menu_white_24dp)  // 왼쪽 버튼 이미지 설정
supportActionBar!!.setDisplayShowTitleEnabled(false)    // 타이틀 안보이게 하기
</code></pre>

<ul>
<li><p><code>setDisplayHomeAsUpEnabled(true)</code>   으로 왼쪽에 버튼을 사용하겠다 설정합니다.</p></li>

<li><p><code>setHomeAsUpIndicator(R.drawable.ic_menu_white_24dp)</code>   왼쪽 버튼의 아이콘을 설정해줍니다.</p></li>

<li><p><code>setDisplayShowTitleEnabled(false)</code>  툴바의 타이틀을 안보이게 합니다. 타이틀을 사용할 분들은 굳이 안 넣으셔도 됩니다. 타이틀을 변경하는 메소드는 setTitle(title : String?) 입니다.</p></li>
</ul>

<p><br/></p>

<p>2-5-3. 툴바 메뉴 버튼 설정</p>

<pre><code class="language-kt">override fun onCreateOptionsMenu(menu: Menu?): Boolean {
    menuInflater.inflate(R.menu.main_menu, menu)       // main_menu 메뉴를 toolbar 메뉴 버튼으로 설정
    return true
}
</code></pre>

<ul>
<li>res/menu/main_menu 으로 작성한 메뉴 레이아웃을 현재 툴바 메뉴로 사용하는 설정입니다.</li>
</ul>

<p><br/></p>

<p>2-5-4. 툴바 메뉴 버튼 설정</p>

<pre><code class="language-java">override fun onOptionsItemSelected(item: MenuItem?): Boolean {
    // 클릭된 메뉴 아이템의 아이디 마다 when 구절로 클릭시 동작을 설정한다.
    when(item!!.itemId){
        android.R.id.home-&gt;{ // 메뉴 버튼
            Snackbar.make(toolbar,&quot;Menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
        }
        R.id.menu_search-&gt;{ // 검색 버튼
            Snackbar.make(toolbar,&quot;Search menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
        }
        R.id.menu_account-&gt;{ // 계정 버튼
            Snackbar.make(toolbar,&quot;Account menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
        }
        R.id.menu_logout-&gt;{ // 로그아웃 버튼
            Snackbar.make(toolbar,&quot;Logout menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
        }
    }
    return super.onOptionsItemSelected(item)
}
</code></pre>

<ul>
<li><p>툴바에 있는 액션 버튼들을 눌렀을 때 어떤 행동을 할 것인지 설정하는 메소드입니다.</p></li>

<li><p>버튼의 ID 값을 통해 어떤 버튼이 눌렸는지 판단합니다.</p></li>

<li><p>왼쪽에 설정된 버튼은 <code>android.R.id.home</code> 이라는 ID 로 구분합니다.</p></li>

<li><p>각 버튼을 누를 때 마다 스낵바가 나오고 스낵바는 따로 라이브러리를 추가해줘야합니다.</p></li>
</ul>

<p><code>implementation 'com.android.support:design:27.1.1'</code></p>

<p><br/></p>

<p>아래 코드는 MainActivity 의 전체 코드입니다.</p>

<p><em>MainActivity.kt</em></p>

<pre><code class="language-java">import kotlinx.android.synthetic.main.activity_main.*

/**
 * 툴바 사용법을 연습하는 액티비티
 * Created by kiwinam - 18.12.26
 */
class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 1. 툴바 사용 설정
        setSupportActionBar(toolbar)

        // 2. 툴바 왼쪽 버튼 설정
        supportActionBar!!.setDisplayHomeAsUpEnabled(true)  // 왼쪽 버튼 사용 여부 true
        supportActionBar!!.setHomeAsUpIndicator(R.drawable.ic_menu_white_24dp)  // 왼쪽 버튼 아이콘 설정
        supportActionBar!!.setDisplayShowTitleEnabled(false)    // 타이틀 안보이게 하기
    }

    // 3.툴바 메뉴 버튼을 설정
    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.main_menu, menu)       // main_menu 메뉴를 toolbar 메뉴 버튼으로 설정
        return true
    }

    // 4.툴바 메뉴 버튼이 클릭 됐을 때 콜백
    override fun onOptionsItemSelected(item: MenuItem?): Boolean {
        // 클릭된 메뉴 아이템의 아이디 마다 when 구절로 클릭시 동작을 설정한다.
        when(item!!.itemId){
            android.R.id.home-&gt;{ // 메뉴 버튼
                Snackbar.make(toolbar,&quot;Menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
            }
            R.id.menu_search-&gt;{ // 검색 버튼
                Snackbar.make(toolbar,&quot;Search menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
            }
            R.id.menu_account-&gt;{ // 계정 버튼
                Snackbar.make(toolbar,&quot;Account menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
            }
            R.id.menu_logout-&gt;{ // 로그아웃 버튼
                Snackbar.make(toolbar,&quot;Logout menu pressed&quot;,Snackbar.LENGTH_SHORT).show()
            }
        }
        return super.onOptionsItemSelected(item)
    }
}
</code></pre>

<p><br/></p>

<p><br/></p>

<h3 id="result-gif">Result GIF</h3>

<p><img src="/img/25/25-5.gif" alt="result gif" /></p>

<p><br/></p>

<h3 id="3-source-code">3. Source Code</h3>

<p>전체 소스코드는 <a href="https://github.com/kiwinam/toolbar_test" target="_blank">GitHub</a> 에 연동해놓았습니다.</p>

<p>읽어주셔서 감사합니다.</p>

<p>제 포스팅이 도움이 되었으면 좋겠네요!</p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>Android Studio 3.0 xml layout Preview 오류 해결 방법</title>
            <link>https://kiwinam.com/posts/24/android-xml-layout-preview/</link>
            <pubDate>Sat, 10 Feb 2018 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/24/android-xml-layout-preview/</guid>
            <description>Android Studio 3.0 xml layout Preview 오류 해결 방법
  
Android Studio 를 2.3.x 버전으로 사용하다 이번에 3.0 버전으로 업데이트 하였습니다.
업데이트를 하니 Layout xml Preview 부분이 보이지 않고 아래와 같은 에러 메시지를 표시했습니다.
Exception raised during rendering: Could not initialize class android.graphics.Typeface
java.lang.NoClassDefFoundError: Could not initialize class android.graphics.Typeface

이 에러의 원인은 Font.xml 파일을 변경해서 입니다.
저희가 Android 2.x 버전을 사용하면서 Layout Preview 에 한글을 표시하기 위해</description>
            <content type="html"><![CDATA[

<hr />

<p>Android Studio 3.0 xml layout Preview 오류 해결 방법</p>

<hr />

<p><br/>
<picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/24/24-1-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/24/24-1-75.webp"
    />
    
    <img src="/img/24/24-1.png"  alt="startActivityForResult"  class="left"  />


</picture></p>

<p>Android Studio 를 2.3.x 버전으로 사용하다 이번에 3.0 버전으로 업데이트 하였습니다.</p>

<p>업데이트를 하니 Layout xml Preview 부분이 보이지 않고 아래와 같은 에러 메시지를 표시했습니다.</p>

<p><code>Exception raised during rendering: Could not initialize class android.graphics.Typeface</code></p>

<p><code>java.lang.NoClassDefFoundError: Could not initialize class android.graphics.Typeface</code></p>

<p><br/></p>

<p>이 에러의 원인은 <strong>Font.xml</strong> 파일을 변경해서 입니다.</p>

<p>저희가 Android 2.x 버전을 사용하면서 Layout Preview 에 한글을 표시하기 위해</p>

<p>Font.xml 파일을 수정한 적이 있을텐데요.</p>

<p>그 부분 때문에 에러가 발생하는 것입니다.</p>

<p><em>(Android studio 3.0 을 신규 설치할 땐 문제가 발생하지 않는다 하네요.)</em></p>

<h3 id="해결-방법">해결 방법</h3>

<p>Font.xml 을 다시 받아 기존 파일과 교체하면 해결 가능합니다 . 은근 간단하죠?</p>

<p><a href="https://drive.google.com/file/d/1iUPfiV980llcwG-2NIAWoYUgHh1YsWUZ/view" target="_blank">Font.xml</a></p>

<p>위 링크로 이동하시면 안드로이드 스튜디오 측에서 제공하는 Font.xml 파일 다운로드가 가능합니다.</p>

<p>다운로드한 파일을</p>

<p><br/></p>

<p>Window &gt;&gt; C:\Program Files\Android\Android Studio\plugins\android\lib\layoutlib\data\fonts</p>

<p>Mac &gt;&gt; /Applications/Android Studio.app/Contents/plugins/android/lib/layoutlib/data/fonts</p>

<p><br/></p>

<p>위 경로에 옮겨주시면 됩니다.</p>

<p>옮긴 다음 안드로이드 스튜디오를 다시 켜주면 문제가 해결됩니다.</p>

<p>감사합니다.</p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] startActivityForResult ,onActivityResult 사용법</title>
            <link>https://kiwinam.com/posts/23/android-start-activity-for-result/</link>
            <pubDate>Fri, 09 Feb 2018 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/23/android-start-activity-for-result/</guid>
            <description>[안드로이드] startActivityForResult ,onActivityResult 사용법

안드로이드 개발을 진행하다 보면 단순히 액티비티를 전환하고 끝! 이 아니라
후속 액티비티에서 작업한 결과물을
호출한 액티비티에서 사용하고 싶은 경우가 왕왕 있습니다.

예를 들자면 회원가입을 진행할 때 ,
회원가입 액티비티에서 다이얼로그를 띄우고
다이얼로그에서 주소를 입력하게 하고, 완료 버튼을 누르면 다시 액티비티로 가져오는 경우나,
(이 경우는 CallBack 으로도 가능합니다.)

자신의 앱에서 카메라 앱을 호출하고 그 결과를 다시 자신의 앱으로 가져오는 경우가 있습니다.
이러한 경우 사용하는 방법이 startActivityForResult 입니다.</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] startActivityForResult ,onActivityResult 사용법</p>

<hr />

<p><br/></p>

<p>안드로이드 개발을 진행하다 보면 단순히 액티비티를 전환하고 끝! 이 아니라</p>

<p>후속 액티비티에서 작업한 결과물을</p>

<p>호출한 액티비티에서 사용하고 싶은 경우가 왕왕 있습니다.</p>

<p><br/></p>

<p>예를 들자면 회원가입을 진행할 때 ,</p>

<p>회원가입 액티비티에서 다이얼로그를 띄우고</p>

<p>다이얼로그에서 주소를 입력하게 하고, 완료 버튼을 누르면 다시 액티비티로 가져오는 경우나,</p>

<p><em>(이 경우는 CallBack 으로도 가능합니다.)</em></p>

<p><br/></p>

<p>자신의 앱에서 카메라 앱을 호출하고 그 결과를 다시 자신의 앱으로 가져오는 경우가 있습니다.</p>

<p>이러한 경우 사용하는 방법이 <code>startActivityForResult</code> 입니다.</p>

<p><br/></p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/23/23-1-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/23/23-1-75.webp"
    />
    
    <img src="/img/23/23-1.png"  alt="startActivityForResult"  class="left"  />


</picture></p>

<p>위 사진처럼</p>

<ol>
<li><p>Activity A 에서 B 를 호출</p></li>

<li><p>Activity B 에서 작업 처리.</p></li>

<li><p>처리된 작업 결과 값을 Activity A 로 반환.</p></li>
</ol>

<p>같은 프로세스로 진행됩니다.</p>

<p><br/></p>

<p>이러한 방식으로 결과를 수신하기 위해 액티비티를 사용할 때는</p>

<p><code>startActivityForResult()</code> 메소드에 추가로 <em>&ldquo;요청 코드&rdquo;</em> 를 전달해야 합니다.</p>

<p>요청 코드를 통해서 결과 값을 반환 받을 때, 내가 요청한 결과를 식별하여 처리할 수 있습니다.</p>

<p><br/></p>

<p>그럼 직접 예제 앱을 만들어보겠습니다.</p>

<p>예제 앱은 간단한 계산기 어플리케이션으로</p>

<p>한 Activity 에서 더하기나 빼기를 선택하고 다음 액티비티에서 연산을 한 후 결과를 리턴 받는 앱입니다.</p>

<p><br/></p>

<p><br/></p>

<h3 id="1-result">1. Result</h3>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/23/23-2-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/23/23-2-75.webp"
    />
    
    <img src="/img/23/23-2.png"  alt="forResult Screenshot"  class="left"  />


</picture></p>

<ol>
<li><p>MainActivity 에서 CalculateActivity 를 호출합니다.</p></li>

<li><p>CalculateActivity 에서 연산한 결과를 MainActivity 로 반환합니다.</p></li>

<li><p>MainActivity 에서 반환 받은 결과 값을 TextView 에 표시합니다.</p></li>
</ol>

<p><br/></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-mainactivity">2-1. MainActivity</h4>

<ul>
<li>메인 액티비티에선 더하기 버튼과 빼기 버튼을 눌러 CalculateActivity 로 이동합니다.</li>
</ul>

<p>여기에서 CalculateActivity 를 시작할 때 일반적으로 startActivity(Intent) 메소드를 호출한 것이 아니라,</p>

<p>결과 값을 리턴받길 원하기 때문에 <code>startActivityForResult(calIntent,3000);</code> 메소드를 호출한 것을 알 수 있습니다.</p>

<p><code>startActivityForResult</code> 메소드는 전달할 인텐트와 requestCode (여기에선 3000, 아무 값이나 상관 없습니다. ) 를 같이 보내주는데 아래 나오는 onActivityResult 에서 요청한 코드를 구분하기 위해 넘겨줍니다.</p>

<p><br/></p>

<ul>
<li>다음으로 주의깊게 봐야할 점은 <code>onActivityResult</code>  메소드 입니다. 저 메소드에선 CalculateActivity 에서 계산된 값이 넘어오면 호출 됩니다.</li>
</ul>

<p><code>onActivityResult</code>  에서 requestCode 는 CalculateActivity 를 호출하는 액티비티가 여러개 있을 경우 구분하기 위해 사용합니다. MainActivity 에선 정수 3000 을 사용했습니다.</p>

<p>처리 결과가 <code>RESULT_OK</code>  라면 텍스트 뷰에 결과를 보이게 하는 간단한 코드입니다.</p>

<p><br/></p>

<pre><code class="language-java">/**
 * Created by charlie on 2018. 2. 8
 * startActivityForResult 를 학습하기 위한 Test Application
 *
 * MainActivity 에서 더하기 혹은 빼기를 선택하면 CalculateActivity 에서 연산할 숫자를 입력하고 결과를 리턴한다.
 * 리턴된 결과는 MainActivity 에 표시된다.
 */

public class MainActivity extends AppCompatActivity implements View.OnClickListener{

    private TextView mainResultTv;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // find view 
        ImageView mainPlusIv = findViewById(R.id.mainPlusIv);
        ImageView mainMinusIv = findViewById(R.id.mainMinusIv);
        mainResultTv = findViewById(R.id.mainResultTv);

        // 더하기, 빼기 ClickListener 설정
        // Override 된 onClick 메소드에서 클릭 처리.
        mainPlusIv.setOnClickListener(this);
        mainMinusIv.setOnClickListener(this);

    }

    // 더하기나 빼기를 할 때 CalculateActivity 에서 연산의 구분을 두기 위해 인텐트로 Flag 를 넘겨줍니다.
    @Override
    public void onClick(View v) {
        Intent calIntent = new Intent(this, CalculateActivity.class);
        switch (v.getId()){
            case R.id.mainPlusIv:
                calIntent.putExtra(&quot;isPlus&quot;,true);
                break;
            case R.id.mainMinusIv:
                calIntent.putExtra(&quot;isPlus&quot;,false);
                break;
        }
        startActivityForResult(calIntent,3000);
    }


    // CalculateActivity 에서 처리된 결과를 받는 메소드
    // 처리된 결과 코드 (resultCode) 가 RESULT_OK 이면 requestCode 를 판별해 결과 처리를 진행한다.
    // CalculateActivity 에서 처리 결과가 담겨온 데이터를 TextView 에 보여준다.
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(resultCode == RESULT_OK){
            switch (requestCode){
                // MainActivity 에서 요청할 때 보낸 요청 코드 (3000)
                case 3000:
                    mainResultTv.setText(data.getStringExtra(&quot;result&quot;));
                    break;
            }
        }
    }
}
</code></pre>

<p><br/></p>

<h4 id="2-2-calculateactivity">2-2. CalculateActivity</h4>

<ul>
<li><p>CalculateActivity 에선 MainActivity 에서 선택한 어떤 연산을 선택 했는지 인텐트를 통해 전달 받습니다. ( 더하기 혹은 빼기 )</p></li>

<li><p>전달 받은 뒤 사용자에게 입력받은 두 개의 숫자를 연산하고, 연산한 결과 값을 MainActivity 에게 전달합니다.</p></li>
</ul>

<p>여기에서 주의깊게 봐야할 코드는 <code>setResult(RESULT_OK,resultIntent)</code> 부분 입니다.</p>

<p><code>setResult</code> 함수를 호출하면 현재 액티비티를 <code>startActivityForResult</code> 로 실행한 호출 액티비티에게 결과 값을 전달하게 됩니다.</p>

<p>여기에서 RESULT_OK 를 결과 상태로 알려줘서 연산이 정상적으로 완료 되었다는 것을 전달해줍니다.</p>

<pre><code class="language-java">/**
 * Created by charlie on 2018. 2. 8
 *
 * EditText 에 입력한 두 정수를 MainActivity 에서 선택한 더하기 혹은 빼기 연산합니다.
 * 연산이 완료되면 CalculateActivity 를 종료하고 MainActivity 로 결과 값을 되돌려 줍니다.
 */

public class CalculateActivity extends AppCompatActivity {

    private EditText num1;
    private EditText num2;

    // MainActivity 에서 선택한 연산이 더하기 연산인지 빼기 연산인지 구분하기 위한 변수
    // 더하기라면 true 를 빼기라면 false 를 전달 받음.
    private boolean isPlus;
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_calculator);

        // MainActivity 에서 선택한 연산이 어떤 것인지 확인 (더하기 , 빼기)
        isPlus = getIntent().getBooleanExtra(&quot;isPlus&quot;,false);

        // 숫자 입력하는 EditText 와 연산하는 버튼 뷰 설정
        num1 = findViewById(R.id.calNum1Et);
        num2 = findViewById(R.id.calNum2Et);

        // 두 숫연산을 실행하고 MainActivity 로 결과를 리턴함.
        // 1. 숫자 값 둘 중 하나가 없다면 토스트 메시지를 띄우고 아니라면 연산을 실행함
        // 2. 인텐트로 넘겨받은 isPlus 의 값의 따라 더하기,빼기 연산을 함.
        // 3. 연산한 결과 값을 resultIntent 에 담아서 MainActivity 로 전달하고 현재 Activity 는 종료.
        Button calBtn = findViewById(R.id.calBtn);
        calBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 1. 숫자 값 둘 중 하나가 없다면 토스트 메시지를 띄우고 아니라면 연산을 실행함
                if(num1.getText() == null || num2.getText() == null){
                    Toast.makeText(CalculateActivity.this,&quot;연산할 값이 없습니다. 확인해주세요.&quot;,Toast.LENGTH_SHORT).show();
                }else{
                    int n1 = Integer.parseInt(num1.getText().toString());
                    int n2 = Integer.parseInt(num2.getText().toString());
                    int result;

                    // 2. 인텐트로 넘겨받은 isPlus 의 값의 따라 더하기,빼기 연산을 함.
                    if(isPlus){
                        result = n1 + n2;
                    }else{
                        result = n1 - n2;
                    }

                    // 3. 연산한 결과 값을 resultIntent 에 담아서 MainActivity 로 전달하고 현재 Activity 는 종료.
                    Intent resultIntent = new Intent();
                    resultIntent.putExtra(&quot;result&quot;,&quot;연산 결과는 &quot;+result+&quot; 입니다.&quot;);
                    setResult(RESULT_OK,resultIntent);
                    finish();
                }
            }
        });
    }
}
</code></pre>

<p>이상으로 <code>startActivityForResult</code> 와 <code>onActivityResult</code> 사용법을 알아보았습니다.</p>

<p>가장 기본인 Intent 사용만 잘 해도 어플리케이션 구현이 가능합니다!!</p>

<p>다들 개발 공부 화이팅 하세요!!</p>

<p><br/></p>

<p><br/></p>

<h3 id="3-source-code">3. Source Code</h3>

<p>전체 소스 코드는 <a href="https://github.com/kiwinam/StartActivityForResultTest" target="_blank">GitHub</a> 에 공유했습니다.</p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[Mac] OS X 기능, 맥북 화면 녹화하기</title>
            <link>https://kiwinam.com/posts/22/mac-recording-screen/</link>
            <pubDate>Tue, 30 Jan 2018 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/22/mac-recording-screen/</guid>
            <description>[Mac] OS X 기능, 맥북 화면 녹화하기
OS X 에서 모니터 화면을 캡쳐하고 싶은 경우가 있습니다.
그럴 때 윈도우에선 화면 녹화 툴이 많이 있어서 편하게 했었는데요.
Mac 에선 자체 어플리케이션으로 제공해 줘서 더 편하게 화면 녹화가 가능합니다.
사용할 어플리케이션 이름은 Quick time player 입니다.
 

이렇게 생긴 녀석입니다.
Finder에서 Application 으로 찾으셔도 되고, 저같은 경우 런치패드 -&amp;gt; 기타에 있더군요.
그럼 이제 화면 녹화를 시작해보겠습니다.

1. 파일 -&amp;gt; 새로운 화면 기록</description>
            <content type="html"><![CDATA[

<hr />

<p>[Mac] OS X 기능, 맥북 화면 녹화하기</p>

<hr />

<p>OS X  에서 모니터 화면을 캡쳐하고 싶은 경우가 있습니다.</p>

<p>그럴 때 윈도우에선 화면 녹화  툴이 많이 있어서 편하게 했었는데요.</p>

<p>Mac 에선 자체 어플리케이션으로 제공해 줘서 더 편하게 화면 녹화가 가능합니다.</p>

<p>사용할 어플리케이션 이름은 Quick time player 입니다.</p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/22/22-1-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/22/22-1-75.webp"
    />
    
    <img src="/img/22/22-1.png"  alt="Quicktime"  class="left"  />


</picture></p>

<p><br/></p>

<p>이렇게 생긴 녀석입니다.</p>

<p>Finder에서 Application 으로 찾으셔도 되고, 저같은 경우 런치패드 -&gt; 기타에 있더군요.</p>

<p>그럼 이제 화면 녹화를 시작해보겠습니다.</p>

<p><br/></p>

<h3 id="1-파일-새로운-화면-기록">1. 파일 -&gt; 새로운 화면 기록</h3>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/22/22-2-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/22/22-2-75.webp"
    />
    
    <img src="/img/22/22-2.png"  alt="화면기록"  class="left"  />


</picture></p>

<p><br/></p>

<h3 id="2-화면-기록-기록할-화면-선택하기">2. 화면 기록 -&gt; 기록할 화면 선택하기</h3>

<p>아래 창이 나오고 가운데 빨간 버튼을 누르게 되면</p>

<p>어떤 화면을 기록할 건지 선택할 수 있습니다.</p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/22/22-3-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/22/22-3-75.webp"
    />
    
    <img src="/img/22/22-3.png"  alt="기록"  class="left"  />


</picture></p>

<p>전체 화면을 기록하려면 클릭 한 번만 누르면 녹화가 시작되고, 특정 부분만 기록하려면</p>

<p>화면을 드래그 하면 됩니다.</p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/22/22-4-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/22/22-4-75.webp"
    />
    
    <img src="/img/22/22-4.png"  alt="드래그"  class="left"  />


</picture></p>

<p><br/></p>

<p>이번에 저는 일부 화면만 기록해보도록 하겠습니다.</p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/22/22-5-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/22/22-5-75.webp"
    />
    
    <img src="/img/22/22-5.png"  alt="일부 화면 기록"  class="left"  />


</picture></p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/22/22-6-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/22/22-6-75.webp"
    />
    
    <img src="/img/22/22-6.png"  alt="기록 결과"  class="left"  />


</picture></p>

<p>화면이 정상적으로 녹화 되었습니다.</p>

<p>전체 화면도 녹화 가능하고 화면 일부도 기록 가능하니 원하시는대로 선택하시면 되겠습니다.</p>

<p><picture>
    <source
        type="image/webp"
        media="(min-width:461px)"
        srcset="/img/22/22-7-90.webp"
    />
    <source
        type="image/webp"
        media="(max-width:460px)"
        srcset="/img/22/22-7-75.webp"
    />
    
    <img src="/img/22/22-7.png"  alt="저장"  class="left"  />


</picture></p>

<p>이후 저장 버튼을 누르면 녹화된 화면이 저장된 것을 볼 수 있습니다.</p>

<p><picture>
    <source
        type="image/webp"
        srcset="/img/22/22-8.webp"
    />
    
    <img src="/img/22/22-8.jpg"  alt="화면 기록 플레이"  class="left"  />


</picture></p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] 엑셀 파일 생성, 내보내기</title>
            <link>https://kiwinam.com/posts/21/android-create-excel/</link>
            <pubDate>Thu, 07 Dec 2017 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/21/android-create-excel/</guid>
            <description>[안드로이드] 엑셀 파일 생성, 내보내기
어플리케이션을 만들다 보면 사용자가 저장한 데이터를 가공하여 내보내 주는 기능을 구현할 때가 있습니다.
데이터 가공에 가장 적합한 엑셀 파일을 만들어 공유하는 것을 목표로 포스팅하겠습니다.

1. Result 

2. Step by Step 2-1. Apache POI 2-1-1. 라이브러리 다운로드  안드로이드 (자바) 에서 엑셀 파일을 바로 쓰고 읽고 수정 하는 일련의 작업들을 바로 수행할 수는 없습니다. 이러한 작업을 할 수 있도록 도와주는 라이브러리인 Apache 에서 제공하는 POI 라이브러리를 이용하여 엑셀을 다루도록 하겠습니다.</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] 엑셀 파일 생성, 내보내기</p>

<hr />

<p><img src="/img/21/21-1.png" alt="엑셀 로고" /></p>

<p>어플리케이션을 만들다 보면 사용자가 저장한 데이터를 가공하여 내보내 주는 기능을 구현할 때가 있습니다.</p>

<p>데이터 가공에 가장 적합한 엑셀 파일을 만들어 공유하는 것을 목표로 포스팅하겠습니다.</p>

<p><br/></p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/21/21-2.jpg" alt="엑셀 결과" /></p>

<p><img src="/img/21/21-3.jpg" alt="엑셀 결과" /></p>

<p><br/></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-apache-poi">2-1. Apache POI</h4>

<h4 id="2-1-1-라이브러리-다운로드">2-1-1. 라이브러리 다운로드</h4>

<ul>
<li>안드로이드 (자바) 에서 엑셀 파일을 바로 쓰고 읽고 수정 하는 일련의 작업들을 바로 수행할 수는 없습니다. 이러한 작업을 할 수 있도록 도와주는 라이브러리인 Apache 에서 제공하는 POI 라이브러리를 이용하여 엑셀을 다루도록 하겠습니다.</li>
</ul>

<p><a href="http://poi.apache.org/download.html#POI-3.17" target="_blank"><a href="http://poi.apache.org/download.html#POI-3.17">http://poi.apache.org/download.html#POI-3.17</a></a></p>

<p>위 링크를 클릭해 라이브러리 다운로드 홈페이지로 이동하겠습니다.</p>

<p><img src="/img/21/21-4.png" alt="poi download" /></p>

<ul>
<li>홈페이지에서 Binary Distribution 을 보면 가장 최근 안정화된 버전을 배포하고 있습니다. poi-bin 파일을 클릭해주세요.</li>
</ul>

<p><br/></p>

<p><img src="/img/21/21-5.png" alt="apache download" /></p>

<ul>
<li>그럼 위 사진과 같은 페이지가 나오는데 어떤 미러링 사이트를 통해 받을지 정합니다.</li>
</ul>

<p><br/></p>

<p><img src="/img/21/21-6.png" alt="download" /></p>

<ul>
<li>다운로드 완료 후 압축을 풀면 위와 같은 파일들이 나옵니다. 이제 이 파일을 안드로이드 프로젝트에 적용 시키도록 하겠습니다.</li>
</ul>

<p><br/></p>

<p><br/></p>

<h4 id="2-1-1-안드로이드-스튜디오-라이브러리-적용">2-1-1. 안드로이드 스튜디오 라이브러리 적용</h4>

<ul>
<li>먼저 파일 탐색기를 프로젝트 단으로 봐주세요</li>
</ul>

<p><img src="/img/21/21-7.jpg" alt="android project" /></p>

<p><br/></p>

<ul>
<li>프로젝트 &gt; app &gt; libs 에 방금 다운로드 받은 POI 라이브러리 파일을 옮겨주세요</li>
</ul>

<p><img src="/img/21/21-8.jpg" alt="libs" /></p>

<p><img src="/img/21/21-9.jpg" alt="move the files" /></p>

<p><br/></p>

<ul>
<li><p>간단하게 생성과 쓰기를 해볼거기 때문에 poi-3.17.jar 파일만 옮겼습니다.</p></li>

<li><p>파일을 옮겨지면 안드로이드 스튜디오에서 아래와 같이 라이브러리 파일이 정상적으로 올라온 것을 확인할 수 있습니다.</p></li>
</ul>

<p><img src="/img/21/21-10.jpg" alt="poi" /></p>

<p><br/></p>

<ul>
<li>아래 사진처럼 poi-3.17.jar 파일을 우클릭 한 다음 &lsquo;Add As Library&rsquo; 를 눌러주시면 POI 라이브러리 적용이 완료됩니다.</li>
</ul>

<p><img src="/img/21/21-11.jpg" alt="add ad library" /></p>

<p><br/></p>

<p><br/></p>

<h3 id="2-2-엑셀-생성-쓰기">2-2 엑셀 생성, 쓰기</h3>

<pre><code class="language-Java">private void saveExcel(){
    Workbook workbook = new HSSFWorkbook();

    Sheet sheet = workbook.createSheet(); // 새로운 시트 생성

    Row row = sheet.createRow(0); // 새로운 행 생성
    Cell cell;

    cell = row.createCell(0); // 1번 셀 생성
    cell.setCellValue(&quot;이름&quot;); // 1번 셀 값 입력

    cell = row.createCell(1); // 2번 셀 생성
    cell.setCellValue(&quot;나이&quot;); // 2번 셀 값 입력

    for(int i = 0; i &lt; mItems.size() ; i++){ // 데이터 엑셀에 입력
        row = sheet.createRow(i+1);
        cell = row.createCell(0);
        cell.setCellValue(mItems.get(i).getName());
        cell = row.createCell(1);
        cell.setCellValue(mItems.get(i).getAge());
    }

    File xlsFile = new File(getExternalFilesDir(null),&quot;test.xls&quot;);
    try{
        FileOutputStream os = new FileOutputStream(xlsFile);
        workbook.write(os); // 외부 저장소에 엑셀 파일 생성
    }catch (IOException e){
        e.printStackTrace();
    }
    Toast.makeText(getApplicationContext(),xlsFile.getAbsolutePath()+&quot;에 저장되었습니다&quot;,Toast.LENGTH_SHORT).show();
}
</code></pre>

<p><img src="/img/21/21-12.png" alt="excel result" /></p>

<ul>
<li>제가 입력했던 데이터가 엑셀 파일로 만들어 진 것을 확인 할 수 있습니다.</li>
</ul>

<p><br/></p>

<p><br/></p>

<h3 id="2-3-엑셀-내보내기-action-send">2-3 엑셀 내보내기 (ACTION_SEND)</h3>

<ul>
<li><p>방금 만들어진 엑셀 파일을 내보내보도록 하겠습니다.</p>

<pre><code class="language-java">Uri path = Uri.fromFile(xlsFile);
Intent shareIntent = new Intent(Intent.ACTION_SEND);
shareIntent.setType(&quot;application/excel&quot;);
shareIntent.putExtra(Intent.EXTRA_STREAM,path);
startActivity(Intent.createChooser(shareIntent,&quot;엑셀 내보내기&quot;));
</code></pre></li>
</ul>

<p><img src="/img/21/21-13.jpg" alt="excel send" /></p>

<p><img src="/img/21/21-14.jpg" alt="excel kakao" /></p>

<p><br/></p>

<h3 id="3-source-code">3. Source Code</h3>

<p>전체 소스 코드는 <a href="https://github.com/kiwinam/ExcelExample" target="_blank">GitHub </a>에 공유했습니다.</p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] - android.content.res.Resources$NotFoundException: String resource ID #0x1</title>
            <link>https://kiwinam.com/posts/19/android-string-resource/</link>
            <pubDate>Thu, 23 Nov 2017 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/19/android-string-resource/</guid>
            <description>[안드로이드] - android.content.res.Resources$NotFoundException: String resource ID #0x1
FATAL EXCEPTION: main Process: , PID: 4012 android.content.res.Resources$NotFoundException: String resource ID #0x9  안드로이드 개발 중
android.content.res.Resources$NotFoundException: String resource ID #0x1
라는 에러를 보았습니다.

TextView 에 setText 메소드를 사용할 때 Int 타입의 데이터를 넣어서 발생하는 에러입니다.
보통 setText 메서드에 숫자를 바로 넣으면 바로 빨간색 밑줄이 생겨서 에러인 것을 알아보기 쉬운데,
( Int type 을 바로 넣는 경우 빨간 줄이 보입니다.)</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] - android.content.res.Resources$NotFoundException: String resource ID #0x1</p>

<hr />

<pre><code>FATAL EXCEPTION: main Process: , PID: 4012

android.content.res.Resources$NotFoundException: String resource ID #0x9
</code></pre>

<p>안드로이드 개발 중</p>

<p>android.content.res.Resources$NotFoundException: String resource ID #0x1</p>

<p>라는 에러를 보았습니다.</p>

<p><br/></p>

<p>TextView 에 setText 메소드를 사용할 때 Int 타입의 데이터를 넣어서 발생하는 에러입니다.</p>

<p>보통 setText 메서드에 숫자를 바로 넣으면 바로 빨간색 밑줄이 생겨서 에러인 것을 알아보기 쉬운데,</p>

<p><img src="/img/19/19-1.png" alt="int type" /></p>

<p><em>( Int type 을 바로 넣는 경우 빨간 줄이 보입니다.)</em></p>

<p><br/></p>

<p>다른 메서드에서 리턴되는 값이 안에 들어가 있는 경우는 빨간 줄이 보이지 않아 바로 에러라는 것을 알기 힘듭니다.</p>

<p><img src="/img/19/19-2.png" alt="값을 리턴하는 메소드" /></p>

<p><img src="/img/19/19-3.png" alt="리턴 메소드를 호출하면 보이지 않음" /></p>

<p><em>( 리턴 값을 넣는 경우 빨간 줄이 보이지 않습니다.)</em></p>

<p><br/></p>

<h3 id="해결-방법은-간단합니다">해결 방법은 간단합니다.</h3>

<p><strong>Int 값을 String 값으로 바꿔주면 됩니다.</strong></p>

<pre><code class="language-java">navEmail.setText(String.valueOf(returnInt()));
</code></pre>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] 카카오톡 공유 기능 , 카카오 링크 API 사용법</title>
            <link>https://kiwinam.com/posts/20/android-share-kakaotalk/</link>
            <pubDate>Thu, 23 Nov 2017 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/20/android-share-kakaotalk/</guid>
            <description>[안드로이드] 카카오톡 공유 기능 , 카카오 링크 API 사용법
어플리케이션 기획 중에 콘텐츠 공유 기능이 있는 경우가 많습니다.
공유할 수 있는 수단이 다양하게 있지만 대한민국에서 카카오 플랫폼이 가장 넓은 플랫폼이라 할 수 있죠.
그래서 카카오톡 링크 API 를 사용하여 아래 사진과 같이 공유 기능을 구현하는 경우가 많습니다.
(사진 출처 : Kakao Developer , 카카오 서비스 API 소개 )

Kakao Developer에 개발자 문서가 아주 상세히 기술 되어 있습니다.
저도 카카오 개발자센터에서 제공하는 문서를 보고 구현 했었지만 참고하실 분들을 위해 카카오 링크 기능 구현하는 것을 진행해 보도록 하겠습니다.</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] 카카오톡 공유 기능 , 카카오 링크 API 사용법</p>

<hr />

<p>어플리케이션 기획 중에 콘텐츠 공유 기능이 있는 경우가 많습니다.</p>

<p>공유할 수 있는 수단이 다양하게 있지만 대한민국에서 카카오 플랫폼이 가장 넓은 플랫폼이라 할 수 있죠.</p>

<p>그래서 카카오톡 링크 API 를 사용하여 아래 사진과 같이 공유 기능을 구현하는 경우가 많습니다.</p>

<p><img src="/img/20/20-1.png" alt="카카오 서비스 API 소개" /></p>

<p>(사진 출처 : Kakao Developer , 카카오 서비스 API 소개  )</p>

<p><br/></p>

<p><a href="https://developers.kakao.com/" target="_blank">Kakao Developer</a>에 개발자 문서가 아주 상세히 기술 되어 있습니다.</p>

<p>저도 카카오 개발자센터에서 제공하는 문서를 보고 구현 했었지만 참고하실 분들을 위해 카카오 링크 기능 구현하는 것을 진행해 보도록 하겠습니다.</p>

<p>이 포스팅에선 단순하게 글자만 공유하는 기능을 구현할 예정입니다.</p>

<p>사진이나 추가 템플릿을 사용하실 분들은 개발자 센터에서 더 자세한 정보를 제공하니 참고 바랍니다.</p>

<p><br/></p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/20/20-2.png" alt="결과 1" /></p>

<p><img src="/img/20/20-3.png" alt="결과 2" /></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-카카오-개발자-센터-kakao-developer-등록">2-1. 카카오 개발자 센터 (Kakao Developer) 등록</h4>

<ul>
<li>카카오 관련 API 를 구현하기 위해서는 카카오 개발자 센터에서 어플리케이션 등록을 완료 해야합니다. 로그인은 기존 카카오 계정으로 가능합니다.</li>
</ul>

<p><img src="/img/20/20-4.png" alt="카카오 데브" /></p>

<ul>
<li>개발자 센터에서 좌측에 있는 &lsquo;앱 만들기&rsquo; 버튼을 클릭해주세요.</li>
</ul>

<p><br/></p>

<p><img src="/img/20/20-5.png" alt="카카오 앱 만들기" /></p>

<ul>
<li><p>다음으로 이름을 입력해주세요. 여기서 작성하는 이름은 카카오 개발자 센터 내에서 보여지는 이름입니다. 입력 하신 다음 &lsquo;앱 만들기&rsquo; 버튼을 클릭해주세요.</p></li>

<li><p>여기서 아이콘을 등록하지 않고 누르면 기본 아이콘으로 표시된다는 알람이 나오는데 추후에 변경이 가능하니 계속 진행하기 버튼을 눌러주세요.</p></li>
</ul>

<p><br/></p>

<p><img src="/img/20/20-6.png" alt="패키지명 등록" /></p>

<ul>
<li><p>다음으로 패키지 명을 입력해주시면 됩니다. 아래 마켓 URL 같은 경우는 패키지명을 입력하면 자동으로 입력이 되니 따로 마켓에 안올리신 분들도 괜찮습니다.</p></li>

<li><p>마켓 URL 이 있으신 분들은 작성해주시면 됩니다.</p></li>
</ul>

<p><br/></p>

<p><img src="/img/20/20-7.png" alt="앱 등록 결과" /></p>

<ul>
<li>어플리케이션 등록이 완료되면 위와 같이 생성 되었다는 화면이 나옵니다. 여기에서 아래 &lsquo;설정&rsquo; 버튼을 눌러 계속 진행하도록 하겠습니다.</li>
</ul>

<p><br/></p>

<p><img src="/img/20/20-8.png" alt="앱 키" /></p>

<ul>
<li><p>우측 하단에 &lsquo;플랫폼 추가&rsquo; 버튼을 눌러 &lsquo;안드로이드&rsquo; 플랫폼을 추가해주세요.</p></li>

<li><p>&lsquo;네이티브 앱 키&rsquo; 가 저희가 사용할 API 키 입니다.</p></li>
</ul>

<p><br/></p>

<h4 id="2-2-안드로이드-설정">2-2 안드로이드 설정</h4>

<h5 id="1-build-gradle-project">1. build.gradle (Project)</h5>

<p><img src="/img/20/20-9.png" alt="빌드 그레이들" /></p>

<pre><code>subprojects {
    repositories {
        mavenCentral()
        maven { url 'http://devrepo.kakao.com:8088/nexus/content/groups/public/' }
    }
}
</code></pre>

<p><br/></p>

<h5 id="2-gradle-properties">2. gradle.properties</h5>

<p><img src="/img/20/20-11.png" alt="빌드 프로퍼티" /></p>

<p><code>KAKAO_SDK_VERSION = 1.1.7</code></p>

<ul>
<li>카카오 SDK 의 버전을 명시해줍니다.</li>
</ul>

<p><br/></p>

<h5 id="3-build-gradle-app">3. build.gradle(App)</h5>

<p><img src="/img/20/20-12.png" alt="빌드 앱" /></p>

<pre><code>dependencies {
    compile group: 'com.kakao.sdk', name: 'kakaolink', version: project.KAKAO_SDK_VERSION
}
</code></pre>

<ul>
<li>카카오 링크를 이용하기 때문에 kakaolink 모듈을 dependencies 에 추가하였습니다. 다른 API 도 같이 사용하실 분들은 마찬가지로 추가해주시면 됩니다.</li>
</ul>

<p><br/></p>

<h5 id="4-kakao-string-xml">4. kakao_string.xml</h5>

<p><img src="/img/20/20-13.png" alt="카카오 스트링 파일 위치" /></p>

<ul>
<li><p>res/values 에 새로운 xml 을 생성해주시고 아래와 같이 입력해줍니다.</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
&lt;string name=&quot;kakao_app_key&quot;&gt;8c6c487e113134189da1542c2b195c61&lt;/string&gt;
&lt;string name=&quot;kakao_scheme&quot;&gt;kakao8c6c487e113134189da1542c2b195c61&lt;/string&gt;
&lt;string name=&quot;kakaolink_host&quot;&gt;kakaolink&lt;/string&gt;
&lt;/resources&gt;
</code></pre></li>

<li><p>여기서 app_key 는 개발자 센터에서 어플리케이션 등록할 때 생성되었던 네이티브 키를 입력해주시면 됩니다.</p></li>

<li><p>kakao_scheme 는 네이티브 키 앞에 &lsquo;kakao&rsquo; 를 붙여주시면 됩니다.</p></li>
</ul>

<p><br/></p>

<h5 id="5-manifests">5. Manifests</h5>

<p><img src="/img/20/20-10.png" alt="메니페스트" /></p>

<ul>
<li><p>Manifests 에서 카카오 링크를 통해 시작될 Activity 를 지정해줍니다. 예를 들어 제가 보낸 링크를 누를 때 어플리케이션이 시작된다면 시작되는 Activity 를 지정해줍니다.</p></li>

<li><p>두 번째로 meta-data 에서 카카오 sdk 에 접근 할 때 사용할 App key 를 지정해줍니다.</p></li>
</ul>

<p><br/></p>

<h4 id="2-3-카카오-링크-구현">2-3 카카오 링크 구현</h4>

<ul>
<li><p>이제 카카오 링크를 통해 메시지를 전달해보도록 하겠습니다.</p></li>

<li><p>예제에서는 간단히 텍스트만 보냈지만 카카오 링크에서는 커스텀 템플릿 뿐만 아니라 아래와 같은 다양한 템플릿을 제공합니다.</p></li>
</ul>

<p><img src="/img/20/20-14.png" alt="카카오 링크" /></p>

<ul>
<li>먼저 카카오 링크를 실행 시킬 버튼을 만들겠습니다.</li>
</ul>

<p><code>activitiy_main.xml</code></p>

<pre><code class="language-xml">&lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;
    tools:context=&quot;com.example.charlie.kakaolinktest.MainActivity&quot;
    tools:showIn=&quot;@layout/activity_main&quot;&gt;

    &lt;Button
        android:id=&quot;@+id/kakaoLinkBtn&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:text=&quot;KAKAO LINK&quot;
        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;
        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;
        app:layout_constraintRight_toRightOf=&quot;parent&quot;
        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;

&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>

<p><br/></p>

<ul>
<li>다음으로 버튼을 눌렀을 때 카카오 링크를 구현해보도록 하겠습니다.</li>
</ul>

<p><code>MainActivitiy.java</code></p>

<pre><code class="language-java">public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        Button kakaoLinkBtn = (Button) findViewById(R.id.kakaoLinkBtn);

        kakaoLinkBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                try {
                    KakaoLink kakaoLink = KakaoLink.getKakaoLink(getApplicationContext());
                    KakaoTalkLinkMessageBuilder messageBuilder = kakaoLink.createKakaoTalkLinkMessageBuilder();
                    messageBuilder.addText(&quot;카카오톡으로 공유해요.&quot;);
                    kakaoLink.sendMessage(messageBuilder,getApplicationContext());
                } catch (KakaoParameterException e) {
                    e.printStackTrace();
                }
            }
        });

    }

}
</code></pre>

<ul>
<li><code>messageBuilder.addText(String message);</code> 메서드를 통해 전달할 메시지를 작성할 수 있습니다.</li>
</ul>

<p><img src="/img/20/20-15.png" alt="공유 결과" /></p>

<p>여기까지 카카오 링크 API 를 통해 간단한 메시지 보내기를 구현해보았습니다.</p>

<p>좀더 자세한 설명은 Kakao Developers 를 참고해주세요.</p>

<p><br/></p>

<h3 id="3-source-code">3. Source Code</h3>

<p>전체 소스 코드는 <a href="https://github.com/kiwinam/KakaoLinkTest" target="_blank">Github</a> 에 연동해놨습니다.</p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] Bottom sheet dialog 사용하기</title>
            <link>https://kiwinam.com/posts/18/android-bottom-sheet-dialog/</link>
            <pubDate>Wed, 22 Nov 2017 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/18/android-bottom-sheet-dialog/</guid>
            <description>[안드로이드] Bottom sheet dialog 사용하기
머티리얼 디자인에서 바텀 시트는 두 가지의 종류가 있습니다
영구 바닥 시트
모달 바텀 시트 (우)

이번 예제에서 만들어볼 것은 모달 바텀 시트입니다.
모달 바텀 시트는 기존의 콘텐츠와 상호 작용 하거나 다이얼로그의 대체로 사용됩니다.
먼저 결과물입니다.

1. Result 
2. Step by Step 2-1. 라이브러리 추가  BottomSheet 를 사용하기 위해선 Design 라이브러리가 필요합니다.  build.gradle (app)
compile &#39;com.android.support:design:26.+&#39;  
2-2. 바텀 시트 다이얼로그 레이아웃 생성  다이얼로그 레이아웃은 구성하기 나름입니다.</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] Bottom sheet dialog 사용하기</p>

<hr />

<p>머티리얼 디자인에서 바텀 시트는 두 가지의 종류가 있습니다</p>

<p><img src="/img/18/18-1.png" alt="영구 바닥 시트" /></p>

<p>영구 바닥 시트</p>

<p><img src="/img/18/18-2.png" alt="모달 바텀 시트" /></p>

<p>모달 바텀 시트 (우)</p>

<p><br/></p>

<p>이번 예제에서 만들어볼 것은 모달 바텀 시트입니다.</p>

<p>모달 바텀 시트는 기존의 콘텐츠와 상호 작용 하거나 다이얼로그의 대체로 사용됩니다.</p>

<p>먼저 결과물입니다.</p>

<p><br/></p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/18/18-3.gif" alt="바텀 시트 결과물" /></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-라이브러리-추가">2-1. 라이브러리 추가</h4>

<ul>
<li>BottomSheet 를 사용하기 위해선 Design 라이브러리가 필요합니다.</li>
</ul>

<p><code>build.gradle (app)</code></p>

<pre><code>compile 'com.android.support:design:26.+'
</code></pre>

<p><br/></p>

<h4 id="2-2-바텀-시트-다이얼로그-레이아웃-생성">2-2. 바텀 시트 다이얼로그 레이아웃 생성</h4>

<ul>
<li>다이얼로그 레이아웃은 구성하기 나름입니다. 혹시 필요하신 분은 GitHub 에 전체 소스 올릴 예정이니 확인해주시면 됩니다.</li>
</ul>

<p><br/></p>

<h4 id="2-3-바텀-시트-다이얼로그-클래스-파일-작성">2-3. 바텀 시트 다이얼로그 클래스 파일 작성</h4>

<ul>
<li><p>바텀 시트 다이얼로그를 만들기 위해 BottomSheetDialogFragment  를 상속 받아 클래스 파일을 작성하겠습니다. 다른 클래스 파일과 크게 다르지 않습니다.</p>

<pre><code class="language-java">public class BottomSheetDialog extends BottomSheetDialogFragment implements View.OnClickListener{

public static BottomSheetDialog getInstance() { return new BottomSheetDialog(); }

private LinearLayout msgLo;
private LinearLayout emailLo;
private LinearLayout cloudLo;
private LinearLayout bluetoothLo;

@Nullable
@Override
public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.bottom_sheet_dialog, container,false);
    msgLo = (LinearLayout) view.findViewById(R.id.msgLo);
    emailLo = (LinearLayout) view.findViewById(R.id.emailLo);
    cloudLo = (LinearLayout) view.findViewById(R.id.cloudLo);
    bluetoothLo = (LinearLayout) view.findViewById(R.id.bluetoothLo);

    msgLo.setOnClickListener(this);
    emailLo.setOnClickListener(this);
    cloudLo.setOnClickListener(this);
    bluetoothLo.setOnClickListener(this);
    return view;
}

@Override
public void onClick(View view) {
    switch (view.getId()){
        case R.id.msgLo:
            Toast.makeText(getContext(),&quot;Message&quot;,Toast.LENGTH_SHORT).show();
            break;
        case R.id.emailLo:
            Toast.makeText(getContext(),&quot;Email&quot;,Toast.LENGTH_SHORT).show();
            break;
        case R.id.cloudLo:
            Toast.makeText(getContext(),&quot;Cloud&quot;,Toast.LENGTH_SHORT).show();
            break;
        case R.id.bluetoothLo:
            Toast.makeText(getContext(),&quot;Bluetooth&quot;,Toast.LENGTH_SHORT).show();
            break;
    }
    dismiss();
}
}
</code></pre></li>

<li><p>항목들이 클릭되면 토스트 메시지를 띄우고 사라지는 간단한 내용입니다.</p></li>
</ul>

<p><br/></p>

<h4 id="2-3-메인-클래스-작성">2-3. 메인 클래스 작성</h4>

<ul>
<li><p>마지막으로 메인 클래스에서 다이얼로그를 호출해주기만 하면 됩니다. 예제에선 FAB 클릭하면 바텀 시트가 올라오도록 하였습니다.</p>

<pre><code class="language-java">public class MainActivity extends AppCompatActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
    setSupportActionBar(toolbar);
    setTitle(&quot;Bottom Sheet Example&quot;);
    FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
    fab.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            BottomSheetDialog bottomSheetDialog = BottomSheetDialog.getInstance();
            bottomSheetDialog.show(getSupportFragmentManager(),&quot;bottomSheet&quot;);
        }
    });
}

}
</code></pre></li>

<li><p>FAB 가 클릭 될 대 바텀 시트 다이얼로그를 생성해 보여줍니다.</p></li>
</ul>

<p><br/></p>

<h3 id="3-source-code">3. Source Code</h3>

<p>전체 소스 코드는 <a href="https://github.com/kiwinam/BottomSheetExam" target="_blank">Github</a> 에 연동해놨습니다.</p>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] EditText 화폐 단위 표시 (세자리 콤마)</title>
            <link>https://kiwinam.com/posts/17/android-edittext-comma/</link>
            <pubDate>Tue, 21 Nov 2017 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/17/android-edittext-comma/</guid>
            <description>[안드로이드] EditText 화폐 단위 표시 (세자리 콤마)
사용자에게 화폐를 입력 받아 표시해줄 경우가 종종 있습니다.
이럴 때 입력 받은 숫자를 원화 단위 (1,000,000 과 같이 ) 로 바로 바꿔주는 방법입니다.

1. Result 
2. Step by Step 2-1 Layout 구성 &amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; xmlns:app=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot; xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot; tools:context=&amp;quot;com.example.charlie.wontest.MainActivity&amp;quot;&amp;gt; &amp;lt;EditText android:id=&amp;quot;@+id/wonEt&amp;quot; android:hint=&amp;quot;금액을 입력해주세요.&amp;quot; android:paddingLeft=&amp;quot;8dp&amp;quot; android:textSize=&amp;quot;18sp&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;wrap_content&amp;quot; android:layout_marginLeft=&amp;quot;8dp&amp;quot; android:layout_marginRight=&amp;quot;8dp&amp;quot; android:layout_marginTop=&amp;quot;8dp&amp;quot; android:layout_centerInParent=&amp;quot;true&amp;quot; android:inputType=&amp;quot;number&amp;quot; android:gravity=&amp;quot;end&amp;quot; /&amp;gt; &amp;lt;/RelativeLayout&amp;gt;   Layout 은 최대한 간단하게 구성해봤습니다.</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] EditText 화폐 단위 표시 (세자리 콤마)</p>

<hr />

<p>사용자에게 화폐를 입력 받아 표시해줄 경우가 종종 있습니다.</p>

<p>이럴 때 입력 받은 숫자를 원화 단위 (1,000,000 과 같이 ) 로 바로 바꿔주는 방법입니다.</p>

<p><br/></p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/17/17-1.gif" alt="" /></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-layout-구성">2-1 Layout 구성</h4>

<pre><code class="language-xml">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    tools:context=&quot;com.example.charlie.wontest.MainActivity&quot;&gt;
    &lt;EditText
        android:id=&quot;@+id/wonEt&quot;
        android:hint=&quot;금액을 입력해주세요.&quot;
        android:paddingLeft=&quot;8dp&quot;
        android:textSize=&quot;18sp&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_marginLeft=&quot;8dp&quot;
        android:layout_marginRight=&quot;8dp&quot;
        android:layout_marginTop=&quot;8dp&quot;
        android:layout_centerInParent=&quot;true&quot;
        android:inputType=&quot;number&quot;
        android:gravity=&quot;end&quot;
        /&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<ul>
<li>Layout 은 최대한 간단하게 구성해봤습니다. inputType 은 숫자만 입력 받게 설정해 주었고, 금액은 오른쪽에서부터 작성되도록 gravity 는 end 로 설정하였습니다.</li>
</ul>

<p><br/></p>

<h4 id="2-2-화폐-단위-표시하기">2-2 화폐 단위 표시하기</h4>

<ul>
<li><p>화폐 단위 표시를 위해 <code>DecimalFormat</code> 과  <code>TextWatcher</code>  를 사용합니다.</p>

<pre><code class="language-java">private DecimalFormat decimalFormat = new DecimalFormat(&quot;#,###&quot;);
private EditText wonEt;
private String result=&quot;&quot;;
</code></pre></li>

<li><p>먼저 멤버 변수로 EditText와 DecimalFormat 를 선언해줍니다. 여기서  <code>new DecimalFormat(&quot;#,###&quot;)</code>; 이 부분이 원화 단위로 글자를 변경시켜주는 부분입니다. 소수점이나 다른 단위 표시가 필요하신 분들은 저 부분을 변경해주시면 됩니다.</p>

<pre><code class="language-java">TextWatcher watcher = new TextWatcher() {
@Override
public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

}

@Override
public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
    if(!TextUtils.isEmpty(charSequence.toString()) &amp;&amp; !charSequence.toString().equals(result)){
        result = decimalFormat.format(Double.parseDouble(charSequence.toString().replaceAll(&quot;,&quot;,&quot;&quot;)));
        wonEt.setText(result);
        wonEt.setSelection(result.length());
    }
}

@Override
public void afterTextChanged(Editable editable) {

}
};
</code></pre></li>

<li><p>EditText 의 글자 변경을 감지해주는 <code>TextWatcher</code>  입니다. <code>onTextChanged</code>  메소드에서 앞서 설정한 포맷으로 문자를 변경해줍니다.</p></li>

<li><p>if 문 안에 <code>!TextUtils.isEmpty(charSequence.toString())</code>  이 부분은 EditText 가 비어있지 않을 때만 실행한다는 구문입니다.</p></li>

<li><p>다음 조건인 <code>!charSequence.toString().equals(result)</code> 부분은 TextWatcher 는 계속해서 EditText 를 검사하게 되는데 그 때마다 메소드를 반복 실행합니다. 아직 변경된 부분이 없는데 반복적으로 포맷 변경을 하고 setText를 하는 동작은 불필요 하기 때문에 이 전의 결과 값과 동일하면 실행시키지 않는 구문입니다.</p>

<pre><code class="language-java">@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

wonEt = (EditText) findViewById(R.id.wonEt);
wonEt.addTextChangedListener(watcher);
}
</code></pre></li>
</ul>

<p><br/></p>

<ul>
<li>마지막으로 EditTextView 에 리스너를 설정해주면 끝입니다.</li>
</ul>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] 커스텀 다이얼로그 [2] - ClickListener, Callback</title>
            <link>https://kiwinam.com/posts/16/android-custom-dialog-click-callback/</link>
            <pubDate>Sun, 15 Oct 2017 10:35:56 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/16/android-custom-dialog-click-callback/</guid>
            <description>[안드로이드] 커스텀 다이얼로그 [2] - ClickListener, Callback
지난 포스팅에선 커스텀 다이얼로그를 생성하고 보여주는 것을 해보았습니다.
이번엔 커스텀 다이얼로그 안에서의 클릭 이벤트 (ClickListener) 를 어떻게 다루는지에 대해 설명해드리도록 하겠습니다.
일단 쉽게 생각하면 다이얼로그도 View 에 속하는 컴포넌트로
다루는 방법이 크게 다르지 않다는 점입니다.
먼저 간단하게 CustomDialog 에서 ClickListener 를 등록해보도록 하겠습니다.
그 이후에 Activity -&amp;gt; Dialog -&amp;gt; Activity 로 파라미터를 넘기는 것을 구현하겠습니다.

먼저 결과입니다.
1. Result 2. Step by Step 2-1.</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] 커스텀 다이얼로그 [2] - ClickListener, Callback</p>

<hr />

<p>지난 포스팅에선 커스텀 다이얼로그를 생성하고 보여주는 것을 해보았습니다.</p>

<p>이번엔 커스텀 다이얼로그 안에서의 클릭 이벤트 (ClickListener) 를 어떻게 다루는지에 대해 설명해드리도록 하겠습니다.</p>

<p>일단 쉽게 생각하면 다이얼로그도 View 에 속하는 컴포넌트로</p>

<p>다루는 방법이 크게 다르지 않다는 점입니다.</p>

<p>먼저 간단하게 CustomDialog 에서 ClickListener 를 등록해보도록 하겠습니다.</p>

<p>그 이후에 Activity -&gt; Dialog -&gt; Activity 로 파라미터를 넘기는 것을 구현하겠습니다.</p>

<p><br/></p>

<p>먼저 결과입니다.</p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/16/16-1.png" alt="" /></p>

<p><img src="/img/16/16-2.png" alt="" /></p>

<p><img src="/img/16/16-3.png" alt="" /></p>

<p><img src="/img/16/16-4.png" alt="" /></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-clicklistener-등록">2-1. ClickListener 등록</h4>

<ul>
<li><p>먼저 다이얼로그에 있는 컴포넌트들 (TextView) 에 Id 를 통해 TextView 객체를 가져왔었습니다. 그 객체에 setOnClickListener  를 설정하겠습니다.</p>

<pre><code class="language-java">cancelTv = (TextView) findViewById(R.id.findPwDialogCancelTv);
searchTv = (TextView) findViewById(R.id.findPwDialogFindTv);

cancelTv.setOnClickListener(this);
searchTv.setOnClickListener(this);
</code></pre></li>
</ul>

<h4 id="2-2-onclick-메소드-구현">2-2. onClick 메소드 구현</h4>

<ul>
<li><p>class 를 정의해준 부분에 클릭 리스너를 implements 합니다.</p>

<pre><code class="language-java">public class CustomDialog extends Dialog implements View.OnClickListener{
</code></pre></li>

<li><p><code>onClick</code> 메소드를 Override 해줍니다.</p>

<pre><code class="language-java">@Override
public void onClick(View v) {
switch (v.getId()){
    case R.id.findPwDialogCancelTv:
        cancel();
        break;
    case R.id.findPwDialogFindTv:
        String email = emailEt.getText().toString();
        String name = nameEt.getText().toString();
        dialogListener.onPositiveClicked(email,name);
        dismiss();
        break;
}
}
</code></pre></li>

<li><p>onClick 메소드 안에서 각자가 원하는 기능을 구현하면됩니다.</p></li>
</ul>

<p><br/></p>

<hr />

<p><br/></p>

<h3 id="추가">추가</h3>

<p>위 부분까지 하셨다면 클릭 이벤트 처리까지 완료됩니다.</p>

<p>하지만 다이얼로그의 결과 값이나</p>

<p>Dialog 를 호출한 Activity ( 혹은 Fragment) 에 리턴해주고 싶은 경우 아래 사항을 진행합니다.</p>

<p><br/></p>

<h4 id="2-4-dialoglistener-작성">2-4 DialogListener 작성</h4>

<ul>
<li><p>인터페이스인 DialogListener (이름은 편한걸로 하셔도 됩니다.) 를 작성합니다. 여기에선 Activity에서 어떤 메소드로 어떤 변수의 형태로 결과 값을 전달 받을지 정합니다.</p></li>

<li><p>이번 예제에선 다이얼로그에서 입력한 email 과 name 를 MainActivity 에서 다시 가공하고 싶어 매개 변수를 문자열로 하였습니다.</p>

<pre><code class="language-java">public interface MyDialogListener {
public void onPositiveClicked(String email,String name);
public void onNegativeClicked();
}
</code></pre></li>
</ul>

<p><br/></p>

<h4 id="2-5-customdialog-에서-선언">2-5. CustomDialog 에서 선언</h4>

<ul>
<li><p>CustomDialog 에서 인터페이스를 멤버 변수로 선언해줍니다.</p>

<pre><code class="language-java">public class CustomDialog extends Dialog implements View.OnClickListener{

private MyDialogListener dialogListener;
</code></pre></li>

<li><p>선언해준 MyDialogListener 를 초기화 해줄 메소드를 작성해줍니다.</p>

<pre><code class="language-java">public void setDialogListener(MyDialogListener dialogListener){
this.dialogListener = dialogListener;
}
</code></pre></li>

<li><p>마지막으로 인터페이스의 메소드를 호출해 값을 MainActivity 로 넘겨줍니다.</p>

<pre><code class="language-java">case R.id.findPwDialogFindTv:
String email = emailEt.getText().toString();
String name = nameEt.getText().toString();
dialogListener.onPositiveClicked(email,name);  // 인터페이스의 메소드를 호출 
dismiss();
break;
</code></pre></li>
</ul>

<h4 id="2-6-mainactivity-에서-선언">2-6. MainActivity 에서 선언</h4>

<ul>
<li><p>메인 액티비티에선 다이얼로그를 show() 하기 전에 리스너를 등록해주기만 하면 됩니다.</p>

<pre><code class="language-java">requestName = nameEt.getText().toString();
CustomDialog dialog = new CustomDialog(this,requestName);
dialog.setDialogListener(new MyDialogListener() {  // MyDialogListener 를 구현
@Override
public void onPositiveClicked(String email, String name) {
    setResult(email,name);
}

@Override
public void onNegativeClicked() {
    Log.d(&quot;MyDialogListener&quot;,&quot;onNegativeClicked&quot;);
}
});
dialog.show();
break;
</code></pre></li>

<li><p><code>MyDialogListener()</code> 를 구현하고 onPositivieClicked 메소드가 호출될 때 사용할 메소드를 정의합니다.</p></li>
</ul>

<p>이메일과 이름을 TextView 에 보여주는 기능입니다.</p>

<pre><code class="language-java">private void setResult(String email,String name){
    resultEmailTv.setText(email);
    resultNameTv.setText(name);
}
</code></pre>

<h3 id="3-source-code">3. Source Code</h3>

<p>전체 소스 코드는 <a href="https://github.com/kiwinam/CustomDialogExample" target="_blank">Github</a> 에 연동해놨습니다.</p>

<p><br/></p>

<hr />

<p><em>[Custom dialog 시리즈]</em></p>

<ol>
<li><a href="https://kiwinam.com/posts/15" target="_blank">[안드로이드] 커스텀 다이얼로그 [1] - 생성</a></li>
<li><a href="https://kiwinam.com/posts/16" target="_blank">[안드로이드] 커스텀 다이얼로그 [2] - ClickListener, Callback</a> - 현재 글</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] 커스텀 다이얼로그 [1] - 생성</title>
            <link>https://kiwinam.com/posts/15/android-custom-dialog/</link>
            <pubDate>Fri, 18 Aug 2017 10:25:38 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/15/android-custom-dialog/</guid>
            <description>[안드로이드] 커스텀 다이얼로그 [1] - 생성
안드로이드 커스텀 다이얼로그 만드는 법.

안드로이드에서 제공하는 AlertDialog 에선 단순하게 Title, Message 등 텍스트만 표시가 가능했었습니다.
Custom Dialog 에서는 말 그대로 내가 원하는 다이얼로그 모양을 만들고 기능을 추가할 수 있습니다.
Activity 에서 Dialog 로 값을 넘길 수도 있고
Dialog 에서 Activity 로 결과 값을 넘겨줄 수도 있습니다.
이번 포스팅에선 간단히 만드는법만 소개하고 다음 포스팅에서 더 자세히 다루겠습니다.

먼저 결과입니다.
1. Result</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] 커스텀 다이얼로그 [1] - 생성</p>

<hr />

<p>안드로이드 커스텀 다이얼로그 만드는 법.</p>

<p><br/></p>

<p>안드로이드에서 제공하는 AlertDialog 에선 단순하게 Title, Message 등 텍스트만 표시가 가능했었습니다.</p>

<p>Custom Dialog 에서는 말 그대로 내가 원하는 다이얼로그 모양을 만들고 기능을 추가할 수 있습니다.</p>

<p>Activity 에서 Dialog 로 값을 넘길 수도 있고</p>

<p>Dialog 에서 Activity 로 결과 값을 넘겨줄 수도 있습니다.</p>

<p>이번 포스팅에선 간단히 만드는법만 소개하고 다음 포스팅에서 더 자세히 다루겠습니다.</p>

<p><br/></p>

<p>먼저 결과입니다.</p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/15/15-1.png" alt="" /> <img src="/img/15/15-2.png" alt="" /></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-라이브러리-추가">2-1. 라이브러리 추가</h4>

<ul>
<li>다이얼로그에 TextInputEditText 과 TextInputEditText  를 사용해서 넣어준 라이브러리입니다. 사용 안하신다면 넘어가셔도 좋습니다.</li>
</ul>

<p><code>build.gradle (app)</code></p>

<pre><code>compile 'com.android.support:design:25.3.1'
</code></pre>

<p><br/></p>

<h4 id="2-2-다이얼로그-레이아웃-생성">2-2. 다이얼로그 레이아웃 생성</h4>

<p>다이얼로그의 모양을 만들어줍니다. 예제에서는 간단히 EditText 를 사용하였지만 다른 위젯들도 사용 가능합니다.</p>

<p>모양은 만들기 나름이라 따로 xml 파일을 첨부하진 않겠습니다. Github 에 전체 소스 공개하니 필요하신 분은 맨 아래 Github 에서 받아가세요~</p>

<p><br/></p>

<h4 id="2-3-다이얼로그-클래스-생성">2-3 다이얼로그 클래스 생성</h4>

<p><code>android.app.Dialog</code> 를 상속 받는 class 를 만들어줍니다. 만드는 법이 간단합니다. onCreate(Bundle savedInstanceState)  에서  레이아웃만 설정해주면 생성 자체는 끝입니다.</p>

<p><code>CustomDialog.java</code></p>

<pre><code class="language-Java">public class CustomDialog extends Dialog implements View.OnClickListener{
    private static final int LAYOUT = R.layout.dialog_custom;

    private Context context;

    private TextInputEditText nameEt;
    private TextInputEditText emailEt;

    private TextView cancelTv;
    private TextView searchTv;

    private String name;

    public CustomDialog(@NonNull Context context) {
        super(context);
        this.context = context;
    }

    public CustomDialog(Context context,String name){
        super(context);
        this.context = context;
        this.name = name;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(LAYOUT);

        nameEt = (TextInputEditText) findViewById(R.id.findPwDialogNameEt);
        emailEt = (TextInputEditText) findViewById(R.id.findPwDialogEmailEt);

        cancelTv = (TextView) findViewById(R.id.findPwDialogCancelTv);
        searchTv = (TextView) findViewById(R.id.findPwDialogFindTv);

        cancelTv.setOnClickListener(this);
        searchTv.setOnClickListener(this);

        if(name != null){
            nameEt.setText(name);
        }
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.findPwDialogCancelTv:
                cancel();
                break;
            case R.id.findPwDialogFindTv:
                break;
        }
    }
}
</code></pre>

<p>위에서 생성자가 두 개 있는데, Activity 에서 값을 Dialog 로 넘길 경우에 두 번째 생성자를 통해 받기 위해 만들었습니다.</p>

<p>Dialog 생성시 값을 받을 필요가 없으시다면 작성하지 않으셔도 좋습니다.</p>

<p>setContentView(LAYOUT) 만 해주시면 생성 자체는 끝입니다.</p>

<p>그 아래 코드들은 View 할당과 ClickListener 를 설정해준 코드입니다.</p>

<p><br/></p>

<h4 id="2-4-activity-에서-dialog-호출">2-4. Activity 에서 Dialog 호출</h4>

<p>MainActivity 에서 버튼 클릭 시 CustomDialog 를 호출해보도록 하겠습니다. 필요한 부분만 코드를 첨부하겠습니다.</p>

<pre><code class="language-Java">  showDialogBtn.setOnClickListener(this); // Set click Listener
}

@Override
public void onClick(View v) {
    switch (v.getId()){
        case R.id.showDialogBtn:
            CustomDialog dialog = new CustomDialog(this);
            dialog.show();
            break;
    }
}
</code></pre>

<p>버튼이 클릭 될 때 CustomDialog 객체를 생성해주고 context를 매개변수로 전달해줍니다.</p>

<p>생성된 CustomDialog 객체에서 show() 메소드를 호출해주기만 하면 커스텀 다이얼로그 호출이 완료됩니다.</p>

<p><br/></p>

<h3 id="3-source-code">3. Source Code</h3>

<p>전체 소스 코드는 <a href="https://github.com/kiwinam/CustomDialogExample" target="_blank">Github</a> 에 연동해놨습니다.</p>

<p>다음 포스팅은 커스텀 다이얼로그에서 어떻게 결과값을</p>

<p>호출한 Activity로 반환하는지에 대해 설명하도록 하겠습니다.</p>

<p><br/></p>

<hr />

<p><em>[Custom dialog 시리즈]</em></p>

<ol>
<li><a href="https://kiwinam.com/posts/15" target="_blank">[안드로이드] 커스텀 다이얼로그 [1] - 생성</a> - 현재 글</li>
<li><a href="https://kiwinam.com/posts/16" target="_blank">[안드로이드] 커스텀 다이얼로그 [2] - ClickListener, Callback</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] status bar 색상 변경하기, 아이콘 색상 변경하기</title>
            <link>https://kiwinam.com/posts/14/android-change-status-bar/</link>
            <pubDate>Thu, 01 Jun 2017 09:56:28 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/14/android-change-status-bar/</guid>
            <description>[안드로이드] status bar 색상 변경하기
안드로이드 status bar는 최상단에 위치한 기기의 상태를 표시해주는 Bar 입니다.
API 21 버전 - 롤리팝 버전 이상부터 Status bar (상태바) 색상 변경이 가능하고
API 23 버전 - 마시멜로우 부터는 상태바에 있는 아이콘 색상이 변경 가능합니다.
먼저 상태바 색상 변경 해보겠습니다.

상태바 색상 변경 방법 1. 자바 코드에서 적용하기 빌드 버전을 확인하고 v21 이상이면 상태바의 색상을 검정색으로 바꿨습니다.
if (Build.VERSION.SDK_INT &amp;gt;= 21) { // 21 버전 이상일 때 getWindow().</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] status bar 색상 변경하기</p>

<hr />

<p>안드로이드 status bar는 최상단에 위치한 기기의 상태를 표시해주는 Bar 입니다.</p>

<p><img src="/img/13/13-1.png" alt="" /></p>

<p>API 21 버전 - 롤리팝 버전 이상부터 Status bar (상태바) 색상 변경이 가능하고</p>

<p>API 23 버전 - 마시멜로우 부터는 상태바에 있는 아이콘 색상이 변경 가능합니다.</p>

<p>먼저 상태바 색상 변경 해보겠습니다.</p>

<p><br/></p>

<h3 id="상태바-색상-변경">상태바 색상 변경</h3>

<h4 id="방법-1-자바-코드에서-적용하기">방법 1. 자바 코드에서 적용하기</h4>

<p>빌드 버전을 확인하고 v21 이상이면 상태바의 색상을 검정색으로 바꿨습니다.</p>

<pre><code class="language-Java">if (Build.VERSION.SDK_INT &gt;= 21) {
  // 21 버전 이상일 때
  getWindow().setStatusBarColor(Color.BLACK);
}
</code></pre>

<p><br/></p>

<h4 id="방법-2-value-style-에서-적용하기">방법 2 value/style 에서 적용하기</h4>

<p><img src="/img/14/14-4.png" alt="" /></p>

<p>styles.xml-v21 파일에서 AppTheme 스타일에</p>

<p>아래와 같이 statusBarColor 를 추가해줍니다. 색상을 본인이 원하는 걸로 해주시면 됩니다.</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;

    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;
        &lt;!-- Customize your theme here. --&gt;
        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;
        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;
        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;

        &lt;item name=&quot;android:statusBarColor&quot;&gt;#000&lt;/item&gt;
    &lt;/style&gt;
&lt;/resources&gt;
</code></pre>

<h3 id="결과">결과</h3>

<p><img src="/img/14/14-2.jpg" alt="" /></p>

<p><br/></p>

<p><br/></p>

<h3 id="상태바-아이콘-색상-변경">상태바 아이콘 색상 변경</h3>

<pre><code class="language-Java">public class BaseActivity extends AppCompatActivity {
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        View view = getWindow().getDecorView();
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {
            if (view != null) {
                // 23 버전 이상일 때 상태바 하얀 색상에 회색 아이콘 색상을 설정
                view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
                getWindow().setStatusBarColor(Color.parseColor(&quot;#f2f2f2&quot;));
            }
        }else if (Build.VERSION.SDK_INT &gt;= 21) {
            // 21 버전 이상일 때
            getWindow().setStatusBarColor(Color.BLACK);
        }
    }
}
</code></pre>

<p>BaseActivity 라는 클래스를 만들어 AppCompatActivity 를 상속받습니다.</p>

<p>이후 버전을 확인하고 API 23 이상이면 상태바를 하얀 배경에 회색 아이콘으로</p>

<p>21 이상이면 검정 배경으로 변경하는 코드를 작성해줬습니다.</p>

<p>이후 적용할 Activity에 AppCompatActivity를 BaseActivity로 변경해주시면 됩니다.</p>

<pre><code class="language-Java">public class MainActivity extends AppCompatActivity implements SwipeRefreshLayout.OnRefreshListener {
</code></pre>

<p>AppCompatActivity &gt; BaseActivity</p>

<pre><code class="language-Java">public class MainActivity extends BaseActivity implements SwipeRefreshLayout.OnRefreshListener {
</code></pre>

<p>BaseActivity의 이름은 편하신대로 정하시면 됩니다.</p>

<p><br/></p>

<h3 id="결과-1">결과</h3>

<p><img src="/img/14/14-3.jpg" alt="" /></p>

<p>API 25 버전으로 빌드했더니 하얀 배경에 회색 아이콘을 가진 상태바가 나왔네요.</p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] Android Studio 레이아웃 프리뷰(Preview) 한글 깨짐</title>
            <link>https://kiwinam.com/posts/13/android-layout-preview-korean/</link>
            <pubDate>Fri, 19 May 2017 16:54:00 +0900</pubDate>
            
            <guid>https://kiwinam.com/posts/13/android-layout-preview-korean/</guid>
            <description>[안드로이드] Android Studio 레이아웃 프리뷰(Preview) 한글 깨짐
안드로이드 스튜디오 Preview 가 깨지는 현상의 원인은 아이러니 하게도 한글 표시 폰트가 한글을 제대로 표시 처리하지 못하기 때문입니다.
현재 안드로이드 스튜디오에서 설정된 ko 언어 표시는 &amp;ldquo;NotoSansCJK&amp;rdquo; 로 되어 있습니다.
이 폰트를 한글 처리가 가능한 폰트로 바꿔주면 됩니다. 보통 많이 사용하는 폰트로 바꿔주시면 됩니다.

설정 파일이 위치한 곳은
안드로이드 설치가 되어 있는 폴더/plugins/android/lib/layoutlib/data/fonts/fonts.xml
(OS X 에선 Application/AndroidStudio (우클릭/Show Package Content) 입니다.)
여기에서 family lang = &amp;ldquo;ko&amp;rdquo; 라고 되어있는 곳에 설정된 폰트를 아무 폰트로 바꿔주시면 됩니다.</description>
            <content type="html"><![CDATA[<hr />

<p>[안드로이드] Android Studio 레이아웃 프리뷰(Preview) 한글 깨짐</p>

<hr />

<p>안드로이드 스튜디오 Preview 가 깨지는 현상의 원인은 아이러니 하게도 한글 표시 폰트가 한글을 제대로 표시 처리하지 못하기 때문입니다.</p>

<p>현재 안드로이드 스튜디오에서 설정된 ko 언어 표시는 &ldquo;NotoSansCJK&rdquo; 로 되어 있습니다.</p>

<p>이 폰트를 한글 처리가 가능한 폰트로 바꿔주면 됩니다. 보통 많이 사용하는 폰트로 바꿔주시면 됩니다.</p>

<p><br/></p>

<p>설정 파일이 위치한 곳은</p>

<p>안드로이드 설치가 되어 있는 폴더/plugins/android/lib/layoutlib/data/fonts/fonts.xml</p>

<p>(OS X 에선 Application/AndroidStudio (우클릭/Show Package Content) 입니다.)</p>

<p>여기에서 family lang = &ldquo;ko&rdquo; 라고 되어있는 곳에 설정된 폰트를 아무 폰트로 바꿔주시면 됩니다.</p>

<p>저의 경우에는</p>

<pre><code class="language-xml">&lt;family lang=&quot;ko&quot;&gt;
    &lt;font weight=&quot;400&quot; style=&quot;normal&quot; index=&quot;1&quot;&gt;NanumGothic.ttf&lt;/font&gt;
&lt;/family&gt;
</code></pre>

<p><code>&quot;NanumGothic.ttf&quot;</code> 이렇게 바꿨습니다.</p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] - 당겨서 새로고침 SwipeRefreshLayout</title>
            <link>https://kiwinam.com/posts/12/android-swipe-refresh-layout/</link>
            <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/12/android-swipe-refresh-layout/</guid>
            <description>[안드로이드] - Pull to refresh 당겨서 새로고침 (SwipeRefreshLayout)
당겨서 새로고침 (pull to refresh) 는 많은 APP에서 만날수 있는 친숙한 패턴입니다.
&amp;lsquo;구글 가이드&amp;rsquo;에도 수동으로 동기화 하는 방법 중 제스처를 통해 내용물 갱신을 시작하도록 요구합니다.
이 패턴을 구현한 수많은 라이브러리가 있지만 구글에서 제공하는 가장 간단한 라이브러리를 구현하는 방법에 대해 설명해드리겠습니다.
1. Result 
2. Step by Step 2-1. 라이브러리 추가 SwipeRefreshLayout 를 통해 당겨서 새로고침을 구현하기 위해 추가해야할 라이브러리는 &amp;lsquo;com.android.support:design&amp;rsquo; 라이브러리입니다. 예제에서 RecyclerView 위에서 &amp;lsquo; pull to refresh &amp;rsquo; 제스쳐를 실행할거라</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] - Pull to refresh 당겨서 새로고침 (SwipeRefreshLayout)</p>

<hr />

<p><img src="/img/12/12-1.gif" alt="" /></p>

<p>당겨서 새로고침 (pull to refresh) 는 많은 APP에서 만날수 있는 친숙한 패턴입니다.</p>

<p>&lsquo;구글 가이드&rsquo;에도 수동으로 동기화 하는 방법 중 제스처를 통해 내용물 갱신을 시작하도록 요구합니다.</p>

<p>이 패턴을 구현한 수많은 라이브러리가 있지만 구글에서 제공하는 가장 간단한 라이브러리를 구현하는 방법에 대해 설명해드리겠습니다.</p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/12/12-1.png" alt="" /></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4 id="2-1-라이브러리-추가">2-1. 라이브러리 추가</h4>

<p><code>SwipeRefreshLayout</code>  를 통해 당겨서 새로고침을 구현하기 위해 추가해야할 라이브러리는 &lsquo;com.android.support:design&rsquo; 라이브러리입니다. 예제에서 RecyclerView 위에서 &lsquo; pull to refresh &rsquo; 제스쳐를 실행할거라</p>

<p>추가 라이브러리도 dependencies 에 넣어줬습니다.</p>

<p>핵심 라이브러리는</p>

<pre><code>compile 'com.android.support:design:25.3.1'
</code></pre>

<p>입니다.</p>

<p><code>build.gradle (Module:app)</code></p>

<pre><code>dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.3.1'
    testCompile 'junit:junit:4.12'
}
</code></pre>

<p><br/></p>

<h4 id="2-2-layout-componet">2-2. Layout componet</h4>

<p>라이브러리 추가 후, Layout 에서 <code>android.support.v4.widget.SwipeRefreshLayout</code>  추가해줍니다.</p>

<p>정말 사용법이 간단해서  <code>RecyclerView</code>를 담아주기만 하면 됩니다.</p>

<p><code>activity_main.xml</code></p>

<pre><code class="language-layout">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;RelativeLayout
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;&gt;
        &lt;android.support.v4.widget.SwipeRefreshLayout
            android:id=&quot;@+id/swipeRefreshLo&quot;
            android:layout_width=&quot;match_parent&quot;
            android:layout_height=&quot;match_parent&quot;&gt;
            &lt;android.support.v7.widget.RecyclerView
                android:id=&quot;@+id/recyclerView&quot;
                android:layout_marginTop=&quot;8dp&quot;
                android:layout_width=&quot;match_parent&quot;
                android:layout_height=&quot;match_parent&quot;/&gt;
        &lt;/android.support.v4.widget.SwipeRefreshLayout&gt;
    &lt;/RelativeLayout&gt;
&lt;/layout&gt;
</code></pre>

<p><br/></p>

<h4 id="2-3-java-code">2-3. Java code</h4>

<p><code>SwipeRefreshLayout</code> 중 자바에서 처리해야할 부분은 OnRefreshListener 입니다. 구현 방법은 많지만 제가 편한 방법으로 소개해드리겠습니다.</p>

<p>먼저 class 에 Listener 를 implements 해줍니다.</p>

<pre><code class="language-Java">public class MainActivity extends AppCompatActivity implements SwipeRefreshLayout.OnRefreshListener
</code></pre>

<p><br/></p>

<p>onRefresh() 메서드를 Override 합니다. 전 Refresh가 시작되면 SnakBar 를 표시해주고, 0.5 초후 Refresh가 완료되도록 하였습니다.</p>

<p>setRefreshing(false) 메서드가 호출 되면 새로고침이 완료됩니다. 특정 작업이 완료되는 시점에 사용해주시면 됩니다.</p>

<pre><code class="language-Java">@Override
public void onRefresh() {
    mainBinding.recyclerView.postDelayed(new Runnable() {
        @Override
        public void run() {
            Snackbar.make(mainBinding.recyclerView,&quot;Refresh Success&quot;,Snackbar.LENGTH_SHORT).show();
            mainBinding.swipeRefreshLo.setRefreshing(false);
        }
    },500);
}
</code></pre>

<p><br/></p>

<p>그 다음 layout 에 정의해둔 이름으로 <code>SwipeRefreshLayout</code> 를 호출하고 위에서 정의한 Listener 를 this를 통해 할당해줍니다.</p>

<p>Refresh 할 때 돌아가는 progress circle의 색상도 바꿀수 있는데 2번 째 줄에 있는 setColorSchemeColors 메서드를 통해 바꿀수 있습니다.</p>

<pre><code class="language-Java">private void setRefresh(){
    mainBinding.swipeRefreshLo.setOnRefreshListener(this);
    mainBinding.swipeRefreshLo.setColorSchemeColors(getResources().getIntArray(R.array.google_colors));
}
</code></pre>

<p>색상 바꿀 때 사용하는 arrays.xml 은 values 폴더 아래 있습니다.</p>

<p><img src="/img/12/12-3.jpg" alt="" /></p>
]]></content>
        </item>
        
        <item>
            <title>[Java] JSP - JSON 데이터 주고 받기 - JSONParser</title>
            <link>https://kiwinam.com/posts/11/jsp-json-parser/</link>
            <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/11/jsp-json-parser/</guid>
            <description>[Java] JSP - JSON 데이터 주고 받기 - JSONParser

json-simple 라이브러리를 이용하여
Android - JSP - JAVA
JSON 데이터 처리하는 방법입니다.

Step1 . JSON 데이터 생성 (Android) JSONObject sendObject = new JSONObject(); JSONArray sendArray = new JSONArray(); // 각 정보마다 Object 로 만들어 Array 에 담는 반복문 try { for(int i = 0; i &amp;lt; 10; i++ ){ JSONObject informationObject = new JSONObject(); informationObject.put(&amp;quot;name&amp;quot;,&amp;quot;Charlie&amp;quot;+i); informationObject.put(&amp;quot;number&amp;quot;,i+1); sendArray.put(informationObject); } sendObject.</description>
            <content type="html"><![CDATA[

<hr />

<p>[Java] JSP - JSON 데이터 주고 받기 - JSONParser</p>

<hr />

<p><br/></p>

<p>json-simple 라이브러리를 이용하여</p>

<p>Android - JSP - JAVA</p>

<p>JSON 데이터 처리하는 방법입니다.</p>

<p><br/></p>

<h4 id="step1-json-데이터-생성-android">Step1 . JSON 데이터 생성  (Android)</h4>

<pre><code class="language-Java">JSONObject sendObject = new JSONObject();
JSONArray sendArray = new JSONArray();
// 각 정보마다 Object 로 만들어 Array 에 담는 반복문
try {
    for(int i = 0; i &lt; 10; i++ ){
        JSONObject informationObject = new JSONObject();
        informationObject.put(&quot;name&quot;,&quot;Charlie&quot;+i);
        informationObject.put(&quot;number&quot;,i+1);

        sendArray.put(informationObject);
    }
    sendObject.put(&quot;list&quot;,sendArray);
} catch (JSONException e) {
    e.printStackTrace();
}
</code></pre>

<p>실제 정보가 담겨있는 JSONObject를 JSONArray 에 담아주고</p>

<p>담긴 Array를 다시 JSONObject에 담아줍니다.</p>

<p>그렇게 되면 데이터 형식은 아래와 같습니다.</p>

<p>{ &ldquo;list&rdquo;<br />
    {
        [ &ldquo;name&rdquo;:&ldquo;charlie0&rdquo; , &ldquo;number&rdquo;:&ldquo;0&rdquo; ] ,
        [ &ldquo;name&rdquo;:&ldquo;charlie1&rdquo; , &ldquo;number&rdquo;:&ldquo;1&rdquo; ] ,
        [ &ldquo;name&rdquo;:&ldquo;charlie2&rdquo; , &ldquo;number&rdquo;:&ldquo;2&rdquo; ] ,
        &hellip;
    }
}</p>

<p>이렇게 생성된 JSONObject 를 다양한 방법으로 JSP에 전달해주면됩니다.</p>

<p>저의 경우에는 <code>HttpURLConnection</code> 를 이용해서 String 형식으로 전송했습니다.</p>

<pre><code class="language-Java"> &quot;json=&quot;+sendObject.toString()
</code></pre>

<p>제가 만든 요청 Parameter 입니다.</p>

<p>요청 URL 은 서버의 jsp 파일로 가도록 하였습니다.</p>

<p><br/></p>

<h4 id="step2-jsp-에서-데이터-받기-jsp">Step2 . JSP 에서 데이터 받기 (JSP)</h4>

<p><em>init.Manage 는 java 파일 패키지 명입니다.</em></p>

<pre><code class="language-JSP">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
    page Encoding=&quot;UTF-8&quot;%&gt;

&lt;%@ page import=&quot;init.Manage&quot;%&gt;

&lt;%
	request.setCharacterEncoding(&quot;UTF-8&quot;);

	Manage manage = Manage.getInstance();

	String json = request.getParameter(&quot;json&quot;);

	String result = manage.method(json);

	out.print(result);
%&gt;
</code></pre>

<p>String으로 날린 데이터를 request 객체에서 post형식으로 받아줍니다.</p>

<p>실제로 JSON 데이터를 처리하는 부분은 java 에서 진행할 것이기 때문에</p>

<p>받은 데이터를 java 메소드에 매개변수로 전달만 해줍니다.</p>

<p><br/></p>

<h4 id="step3-json-데이터-처리하기-java">Step3 . JSON 데이터 처리하기 (Java)</h4>

<pre><code class="language-Java">public String method(String data){

	String result = &quot;&quot;;

	try {
		JSONParser jsonParser = new JSONParser();
		JSONObject jsonObject = (JSONObject) jsonParser.parse(data);
		JSONArray jsonArray = (JSONArray) jsonObject.get(&quot;list&quot;);

		for(int i = 0; i &lt; jsonArray.size(); i++ ){
			JSONObject jsonObject = (JSONObject) jsonArray.get(i);
			String name = jsonObject.get(&quot;name&quot;).toString();
			String number = jsonObject.get(&quot;number&quot;).toString();

            //Do something..
        }
		result = &quot;ok&quot;;
	} catch (Exception e) {
		result = &quot;fail&quot;;
}
return result;
}
</code></pre>

<p>Android 에서 JSON 데이터를 만든 순서대로 다시 풀어주면 됩니다.</p>

<p>JSONObject { JSONArray ( JSONObjects&hellip;) }</p>

<p>이런 형태의 JSONObject를 역순으로 풀어줍니다.</p>

<p>JSONObject &gt;&gt; JSONArray &gt;&gt; JSONObject</p>

<p>여기에서 사용하는 가장 중요한 부분은</p>

<p>JSONParser 입니다.</p>

<p>String 으로 되어 있는 데이터를 JSON 형태로 파싱 해주는 parse 메소드를 이용하여 JSONObject를 만듭니다.</p>

<p>그 이후는 만든 순서대로 다시 가져오는 부분입니다.</p>

<hr />

<p><br/></p>

<p><em>[JSON 관련 포스팅]</em></p>

<ol>
<li><a href="https://kiwinam.com/posts/7/android-json-parse" target="_blank">[안드로이드] JSON 데이터 주고 받기</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] RecyclerView [3] Divider 구분선 넣기</title>
            <link>https://kiwinam.com/posts/10/android-recyclerview-divider/</link>
            <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/10/android-recyclerview-divider/</guid>
            <description>[안드로이드] RecyclerView [3] Divider 구분선 넣기

( Divider 가 적용된 RecyclerView 예제, 출저 Google Material Design Guide )

RecyclerView 에서 구분선 혹은 구분자를 추가하는 방법은 다양하게 있습니다.
하지만 ListView xml 처럼 간단하게 android:divider 로 지정할 수 있는 부분이 아니라 코드적으로 구현 할 수 있습니다.
그 중 가장 간단한 방법에 대해 설명해드리겠습니다.

1. Result 구분선 (Divider) 만 넣는 방법과 구분선 + 공백 넣는 방법에 대해 설명해드리겠습니다.</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] RecyclerView [3] Divider 구분선 넣기</p>

<hr />

<p><br/></p>

<p><img src="/img/10/10-1.png" alt="" />
( Divider 가 적용된 RecyclerView 예제,  출저 <a href="http://davidlab.net/google-design-ko/components/lists.html#lists-specs" target="">Google Material Design Guide</a> )</p>

<p><br/></p>

<p>RecyclerView 에서 구분선 혹은 구분자를 추가하는 방법은 다양하게 있습니다.</p>

<p>하지만 ListView xml 처럼 간단하게 android:divider 로 지정할 수 있는 부분이 아니라 코드적으로 구현 할 수 있습니다.</p>

<p>그 중 가장 간단한 방법에 대해 설명해드리겠습니다.</p>

<p><br/></p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/10/10-2.png" alt="" /></p>

<p>구분선 (Divider) 만 넣는 방법과 구분선 + 공백 넣는 방법에 대해 설명해드리겠습니다.</p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4><b>2-1. 기본 구분선(Divider) 구현하기</b></h4>

<p><code>MainActivity.java</code></p>

<pre><code class="language-Java">DividerItemDecoration dividerItemDecoration =
        new DividerItemDecoration(getApplicationContext(),new LinearLayoutManager(this).getOrientation());
mainBinding.recyclerView.addItemDecoration(dividerItemDecoration);
</code></pre>

<p><br/></p>

<h4><b>2-2. 공백 구분자 구현하기</b></h4>

<p>클래스 파일을 새로 만들고 RecyclerView.ItemDecoration 을 상속받습니다.</p>

<p><code>VerticalSpaceItemDecoration.java</code></p>

<pre><code class="language-Java">public class VerticalSpaceItemDecoration extends RecyclerView.ItemDecoration {

    private final int verticalSpaceHeight;

    public VerticalSpaceItemDecoration(int verticalSpaceHeight){
        this.verticalSpaceHeight = verticalSpaceHeight;
    }

    @Override
    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
        // 마지막 아이템이 아닌 경우, 공백 추가
        if(parent.getChildAdapterPosition(view) != parent.getAdapter().getItemCount() -1 ){
            outRect.bottom = verticalSpaceHeight;
        }
    }
}
</code></pre>

<p>Constructor 에서 공백의 높이를 설정해주고 getItemOffsets 메소드를 오버라이딩 하여 높이를 설정해줍니다.</p>

<p>이 때 마지막 아이템일 경우 공백 높이를 주지 않습니다.</p>

<p>이 후 기본 구분선을 구현 하는 것과 동일하게 MainActivity.java 에서 구현해줍니다.</p>

<p><code>MainActivity.java</code></p>

<pre><code class="language-Java">mainBinding.recyclerView.addItemDecoration(new VerticalSpaceItemDecoration(48));
</code></pre>

<p><br/></p>

<h3 id="3-soruce-code">3. Soruce code</h3>

<p>전체 소스 코드는 <a href="https://github.com/kiwinam/RecyclerExample" target="_blank">Github</a> 에 연동해놨습니다.</p>

<p><br/></p>

<hr />

<p><br/></p>

<p><em>[Recycler View 시리즈]</em></p>

<ol>
<li><a href="https://kiwinam.com/posts/8" target="_blank">[안드로이드] RecyclerView [1] 간단한 사용법</a></li>
<li><a href="https://kiwinam.com/posts/9" target="_blank">[안드로이드] RecyclerView [2] OnItemClick 리스너 구현</a></li>
<li><a href="https://kiwinam.com/posts/10" target="_blank">[안드로이드] RecyclerView [3] Divider 구분선 넣기</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] RecyclerView [2] OnItemClick 리스너 구현</title>
            <link>https://kiwinam.com/posts/9/android-recyclerview-click/</link>
            <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/9/android-recyclerview-click/</guid>
            <description>[안드로이드] RecyclerView [2] OnItemClick 리스너 구현

RecyclerView 에서는 ListView에서와는 다르게
ClickListener 를 따로 구현해서 등록해줘야합니다.
Adapter에서 OnClick 를 구현해줘도 되고 제가 구현한 방법 처럼 따로 클래스를 만들어서
ItemTouchListener 를 구현해도 됩니다.

1. Result 
2. Step by Step 2-1. RecyclerView 구현 안드로이드 RecyclerView 의 간단한 구현 방법은 이전 포스팅 글로 대체 하겠습니다.
[[안드로이드] RecyclerView 간단한 사용법]

2-2. OnItemTouchListener RecyclerItemClickListener.java
public class RecyclerItemClickListener implements RecyclerView.OnItemTouchListener { private OnItemClickListener mListener; public interface OnItemClickListener { void onItemClick(View view, int position); void onLongItemClick(View view, int position); } GestureDetector mGestureDetector; public RecyclerItemClickListener(Context context, final RecyclerView recyclerView, OnItemClickListener listener) { mListener = listener; mGestureDetector = new GestureDetector(context, new GestureDetector.</description>
            <content type="html"><![CDATA[

<hr />

<p>[안드로이드] RecyclerView [2] OnItemClick 리스너 구현</p>

<hr />

<p><br/></p>

<p>RecyclerView 에서는 ListView에서와는 다르게</p>

<p>ClickListener 를 따로 구현해서 등록해줘야합니다.</p>

<p>Adapter에서 OnClick 를 구현해줘도 되고 제가 구현한 방법 처럼 따로 클래스를 만들어서</p>

<p>ItemTouchListener 를 구현해도 됩니다.</p>

<p><br/></p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/9/9-1.png" alt="" /></p>

<p><img src="/img/9/9-2.png" alt="" /></p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by Step</h3>

<h4><b>2-1. RecyclerView 구현</b></h4>

<p>안드로이드 RecyclerView 의 간단한 구현 방법은 이전 포스팅 글로 대체 하겠습니다.</p>

<p><a href="http://kiwinam.com/posts/8/" target="_blank">[[안드로이드] RecyclerView 간단한 사용법]</a></p>

<p><br/></p>

<h4><b>2-2. OnItemTouchListener</b></h4>

<p><code>RecyclerItemClickListener.java</code></p>

<pre><code class="language-Java">public class RecyclerItemClickListener implements RecyclerView.OnItemTouchListener {
    private OnItemClickListener mListener;

    public interface OnItemClickListener {
        void onItemClick(View view, int position);

        void onLongItemClick(View view, int position);
    }

    GestureDetector mGestureDetector;

    public RecyclerItemClickListener(Context context, final RecyclerView recyclerView, OnItemClickListener listener) {
        mListener = listener;
        mGestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {
            @Override
            public boolean onSingleTapUp(MotionEvent e) {
                return true;
            }

            @Override
            public void onLongPress(MotionEvent e) {
                View child = recyclerView.findChildViewUnder(e.getX(), e.getY());
                if (child != null &amp;&amp; mListener != null) {
                    Log.d(&quot;long&quot;,&quot;press&quot;);
                    mListener.onLongItemClick(child, recyclerView.getChildAdapterPosition(child));
                }
            }
        });
    }

    @Override public boolean onInterceptTouchEvent(RecyclerView view, MotionEvent e) {
        View childView = view.findChildViewUnder(e.getX(), e.getY());
        if (childView != null &amp;&amp; mListener != null &amp;&amp; mGestureDetector.onTouchEvent(e)) {
            mListener.onItemClick(childView, view.getChildAdapterPosition(childView));
            return true;
        }
        return false;
    }

    @Override public void onTouchEvent(RecyclerView view, MotionEvent motionEvent) { }

    @Override public void onRequestDisallowInterceptTouchEvent (boolean disallowIntercept){}
}
</code></pre>

<p><br/></p>

<h4><b>2-3. addOnItemTouchListener</b></h4>

<pre><code class="language-Java">mainBinding.recyclerView.addOnItemTouchListener(
        new RecyclerItemClickListener(getApplicationContext(), mainBinding.recyclerView, new RecyclerItemClickListener.OnItemClickListener() {
            @Override
            public void onItemClick(View view, int position) {
                Toast.makeText(getApplicationContext(),position+&quot;번 째 아이템 클릭&quot;,Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onLongItemClick(View view, int position) {
                Toast.makeText(getApplicationContext(),position+&quot;번 째 아이템 롱 클릭&quot;,Toast.LENGTH_SHORT).show();
            }
        }));
</code></pre>

<p><br/></p>

<h3 id="3-soruce-code">3. Soruce code</h3>

<p>전체 소스 코드는 <a href="https://github.com/kiwinam/RecyclerExample" target="_blank">Github</a> 에 연동해놨습니다.</p>

<p>MainActivity에서 Data Binding을 사용하였습니다.</p>

<p><br/></p>

<hr />

<p><br/></p>

<p><em>[Recycler View 시리즈]</em></p>

<ol>
<li><a href="https://kiwinam.com/posts/8" target="_blank">[안드로이드] RecyclerView [1] 간단한 사용법</a></li>
<li><a href="https://kiwinam.com/posts/9" target="_blank">[안드로이드] RecyclerView [2] OnItemClick 리스너 구현</a></li>
<li><a href="https://kiwinam.com/posts/10" target="_blank">[안드로이드] RecyclerView [3] Divider 구분선 넣기</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] RecyclerView [1] 간단한 사용법</title>
            <link>https://kiwinam.com/posts/8/android-recyclerview/</link>
            <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/8/android-recyclerview/</guid>
            <description>[안드로이드] RecyclerView 간단한 사용법

안드로이드에서 Recycler View 를 간단하게 사용하는 방법에 대해 포스팅 하겠습니다!
안드로이드를 배우다 보면 리사이클러 뷰, recycler view, list view 에 관해 상당히 많이 보고 듣게 되는데요&amp;hellip;
도대체 저 리사이클러뷰가 어떤 녀석이길래 저렇게 많이 언급 되는지 가볍게 알아보고 가도록 하겠습니다.
먼저 프로 앱등이인 전 앱스토어의 사진을 하나 가져 왔습니다
(코쓱)

위 사진을 보면 빨간 테두리에 있는 내용들은
큰 틀은 (포맷) 변하지 않고 콘텐츠 (앱 로고와 이름, 카테고리) 만 변하는 것을 알 수 있습니다.</description>
            <content type="html"><![CDATA[

<hr />

<p><br/></p>

<p>[안드로이드] RecyclerView 간단한 사용법</p>

<hr />

<p><br/></p>

<p>안드로이드에서 Recycler View 를 간단하게 사용하는 방법에 대해 포스팅 하겠습니다!</p>

<p>안드로이드를 배우다 보면 리사이클러 뷰, recycler view, list view 에 관해 상당히 많이 보고 듣게 되는데요&hellip;</p>

<p>도대체 저 리사이클러뷰가 어떤 녀석이길래 저렇게 많이 언급 되는지 가볍게 알아보고 가도록 하겠습니다.</p>

<p>먼저 프로 앱등이인 전 앱스토어의 사진을 하나 가져 왔습니다</p>

<p>(코쓱)</p>

<p><br/></p>

<p><img src="/img/8/8-1.jpg" alt="" /></p>

<p>위 사진을 보면 빨간 테두리에 있는 내용들은</p>

<p>큰 틀은 (포맷) 변하지 않고 콘텐츠 (앱 로고와 이름, 카테고리) 만 변하는 것을 알 수 있습니다.</p>

<p>이런식으로 하나의 아이템 (View) 를 반복적으로 보여주는 것이 Recycler View 입니다.</p>

<p>그럼 먼저 결과물 먼저 보여드리겠습니다.</p>

<h3 id="1-result">1. Result</h3>

<p><img src="/img/8/8-2.png" alt="" /></p>

<p>사람 모양의 아이콘이 나오고, 그 다음에 이름이 나옵니다.</p>

<p>큰 틀은 유지한 채 이름 데이터만 바뀌는 것을 볼 수 있습니다.</p>

<p>그럼 천천히 만들어 볼까요?</p>

<p><br/></p>

<h3 id="2-step-by-step">2. Step by step</h3>

<p>2-1. 라이브러리 추가</p>

<pre><code>compile 'com.android.support:recyclerview-v7:25.3.1'
</code></pre>

<pre><code>- 먼저 recyclerview 는 라이브러리가 필요합니다. 서포트 라이브러리에서 recyclerview 를 추가해주세요.
</code></pre>

<p><br/></p>

<p>2-2. 아이템이 담길 객체 생성</p>

<pre><code>- 이번엔 반복적으로 나오는 아이템 객체를 만들어 보겠습니다. 여기에서 아이템이란 리사이클러 뷰에서 'Charlie Park' 하나의 아이템을 말합니다.


- 먼저 아이템이 가지고 있어야 하는 변수를 만들겠습니다.

- 저희가 만들 recycler view 에선 변경되는 부분이 이름 뿐이니 String 형 변수 하나만 만들겠습니다.
</code></pre>

<p><br/></p>

<p><code>RecyclerItem.java</code></p>

<pre><code class="language-Java">public class RecyclerItem {
    private String name;

    public RecyclerItem (String name){
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
</code></pre>

<p><br/></p>

<ul>
<li>이번에는 아이템을 보여줄 레이아웃을 그려보겠습니다.</li>
</ul>

<p><code>item_recycler_view.xml</code></p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:orientation=&quot;vertical&quot;
    android:background=&quot;#fff&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;56dp&quot;&gt;
    &lt;ImageView
        android:src=&quot;@drawable/ic_account_circle&quot;
        android:layout_marginStart=&quot;16dp&quot;
        android:layout_centerVertical=&quot;true&quot;
        android:layout_width=&quot;40dp&quot;
        android:layout_height=&quot;40dp&quot; /&gt;
    &lt;TextView
        android:id=&quot;@+id/itemNameTv&quot;
        android:layout_centerVertical=&quot;true&quot;
        android:layout_marginStart=&quot;72dp&quot;
        android:textSize=&quot;18sp&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot; /&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<pre><code>- 위의 레이아웃 xml 파일은 아래와 같이 보여집니다.

![](/img/8/8-3.png)

&lt;br/&gt;



전 항상 Material Design Guide 를 준수하려 하는 편이라



아래 가이드에 맞게 Item Layout 를 작성하였습니다.

![](/img/8/8-4.png)
(출처 : http://davidlab.net/google-design-ko/components/lists.html#lists-behavior)

&lt;br/&gt;
</code></pre>

<p>2-3. Adapter 생성</p>

<pre><code class="language-Java">package charlie.recyclerexample;

import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import java.util.ArrayList;

/**
 * Created by charlie on 2017. 4. 24..
 */

public class RecyclerAdapter extends RecyclerView.Adapter&lt;RecyclerAdapter.ItemViewHolder&gt; {
    ArrayList&lt;RecyclerItem&gt; mItems;

    public RecyclerAdapter(ArrayList&lt;RecyclerItem&gt; items){
        mItems = items;
    }


    // 새로운 뷰 홀더 생성
    @Override
    public ItemViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_recycler_view,parent,false);
        return new ItemViewHolder(view);
    }


    // View 의 내용을 해당 포지션의 데이터로 바꿉니다.
    @Override
    public void onBindViewHolder(ItemViewHolder holder, int position) {
        holder.mNameTv.setText(mItems.get(position).getName());
    }

    // 데이터 셋의 크기를 리턴해줍니다.
    @Override
    public int getItemCount() {
        return mItems.size();
    }

    // 커스텀 뷰홀더
    // item layout 에 존재하는 위젯들을 바인딩합니다.
    class ItemViewHolder extends RecyclerView.ViewHolder{
    private TextView mNameTv;
        public ItemViewHolder(View itemView) {
            super(itemView);
            mNameTv = (TextView) itemView.findViewById(R.id.itemNameTv);
        }
    }
}
</code></pre>

<p><br/></p>

<p>2-4. MainActivity 작성</p>

<pre><code class="language-Java">package charlie.recyclerexample;

import android.databinding.DataBindingUtil;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;

import java.util.ArrayList;

import charlie.recyclerexample.databinding.ActivityMainBinding;

public class MainActivity extends AppCompatActivity {
    private String[] names = {&quot;Charlie&quot;,&quot;Andrew&quot;,&quot;Han&quot;,&quot;Liz&quot;,&quot;Thomas&quot;,&quot;Sky&quot;,&quot;Andy&quot;,&quot;Lee&quot;,&quot;Park&quot;};
    private static final int LAYOUT = R.layout.activity_main;
    private ActivityMainBinding mainBinding;
    private RecyclerView.Adapter adapter;

    private ArrayList&lt;RecyclerItem&gt; mItems = new ArrayList&lt;&gt;();
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mainBinding = DataBindingUtil.setContentView(this,LAYOUT);

        setRecyclerView();

    }

    private void setRecyclerView(){
        // 각 Item 들이 RecyclerView 의 전체 크기를 변경하지 않는 다면
        // setHasFixedSize() 함수를 사용해서 성능을 개선할 수 있습니다.
        // 변경될 가능성이 있다면 false 로 , 없다면 true를 설정해주세요.
        mainBinding.recyclerView.setHasFixedSize(true);

        // RecyclerView에 Adapter를 설정해줍니다.
        adapter = new RecyclerAdapter(mItems);
        mainBinding.recyclerView.setAdapter(adapter);

        // 다양한 LayoutManager 가 있습니다. 원하시는 방법을 선택해주세요.
        // 지그재그형의 그리드 형식
        //mainBinding.recyclerView.setLayoutManager(new StaggeredGridLayoutManager(2,StaggeredGridLayoutManager.VERTICAL));
        // 그리드 형식
        //mainBinding.recyclerView.setLayoutManager(new GridLayoutManager(this,4));
        // 가로 또는 세로 스크롤 목록 형식
        mainBinding.recyclerView.setLayoutManager(new LinearLayoutManager(this));

        setData();
    }

    private void setData(){
        mItems.clear();
        // RecyclerView 에 들어갈 데이터를 추가합니다.
        for(String name : names){
            mItems.add(new RecyclerItem(name));
            mItems.add(new RecyclerItem(name));
        }
        // 데이터 추가가 완료되었으면 notifyDataSetChanged() 메서드를 호출해 데이터 변경 체크를 실행합니다.
        adapter.notifyDataSetChanged();
    }
}
</code></pre>

<hr />

<h4 id="3-source-code">3. Source Code</h4>

<p>전체 소스코드는 GitHub 에 연동해놓았습니다.</p>

<p>MainActivity에서 Data Binding을 사용하였습니다.</p>

<p>다음에는 RecyclerView에서 달라진 OnClickListener 구현 방법에 대해 알아보겠습니다.</p>

<hr />

<ol>
<li><a href="https://kiwinam.com/posts/8" target="_blank">[안드로이드] RecyclerView [1] 간단한 사용법</a></li>
<li><a href="https://kiwinam.com/posts/9" target="_blank">[안드로이드] RecyclerView [2] OnItemClick 리스너 구현</a></li>
<li><a href="https://kiwinam.com/posts/10" target="_blank">[안드로이드] RecyclerView [3] Divider 구분선 넣기</a></li>
</ol>

<p><br/></p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] JSON 데이터 주고 받기</title>
            <link>https://kiwinam.com/posts/7/android-json-parse/</link>
            <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/7/android-json-parse/</guid>
            <description>[안드로이드] JSON 데이터 주고 받기 1. Result 
2. Step by step 데이터를 JSON Obejct 로 보내고 받는 방법 2-1. Send Object private void sendObject(){ JSONObject jsonObject = new JSONObject(); try{ jsonObject.put(&amp;quot;nation&amp;quot;, mJsonNationEt.getText().toString()); jsonObject.put(&amp;quot;name&amp;quot;, mJsonNameEt.getText().toString()); jsonObject.put(&amp;quot;address&amp;quot;, mJsonAddressEt.getText().toString()); jsonObject.put(&amp;quot;age&amp;quot;, mJsonAgeEt.getText().toString()); }catch (JSONException e){ e.printStackTrace(); } receiveObject(jsonObject); }  
2-2. Receive Object private void receiveObject(JSONObject data){ recyclerView.setVisibility(View.GONE); objectResultLo.setVisibility(View.VISIBLE); try{ mReceiveTv.setText(data.toString()); mReceiveNationTv.setText(&amp;quot;nation : &amp;quot;+data.getString(&amp;quot;nation&amp;quot;)); mReceiveNameTv.setText(&amp;quot;name : &amp;quot;+data.getString(&amp;quot;nation&amp;quot;)); mReceiveAddressTv.setText(&amp;quot;address : &amp;quot;+data.getString(&amp;quot;address&amp;quot;)); mReceiveAgeTv.</description>
            <content type="html"><![CDATA[

<hr />

<p><br/></p>

<h3 id="안드로이드-json-데이터-주고-받기">[안드로이드] JSON 데이터 주고 받기</h3>

<h5 id="1-result">1. Result</h5>

<p><img src="/img/7/7-1.png" alt="" /></p>

<p><img src="/img/7/7-2.png" alt="" /></p>

<p><img src="/img/7/7-2.png" alt="" /></p>

<p><br/></p>

<h5 id="2-step-by-step">2. Step by step</h5>

<h3>데이터를 JSON Obejct 로 보내고 받는 방법</h3>

<h5>2-1. Send Object</h5>

<pre><code class="language-Java">private void sendObject(){
    JSONObject jsonObject = new JSONObject();
    try{
        jsonObject.put(&quot;nation&quot;, mJsonNationEt.getText().toString());
        jsonObject.put(&quot;name&quot;, mJsonNameEt.getText().toString());
        jsonObject.put(&quot;address&quot;, mJsonAddressEt.getText().toString());
        jsonObject.put(&quot;age&quot;, mJsonAgeEt.getText().toString());
    }catch (JSONException e){
        e.printStackTrace();
    }
    receiveObject(jsonObject);
}
</code></pre>

<p><br/></p>

<h5>2-2. Receive Object</h5>

<pre><code class="language-Java">private void receiveObject(JSONObject data){
    recyclerView.setVisibility(View.GONE);
    objectResultLo.setVisibility(View.VISIBLE);
    try{
        mReceiveTv.setText(data.toString());
        mReceiveNationTv.setText(&quot;nation : &quot;+data.getString(&quot;nation&quot;));
        mReceiveNameTv.setText(&quot;name : &quot;+data.getString(&quot;nation&quot;));
        mReceiveAddressTv.setText(&quot;address : &quot;+data.getString(&quot;address&quot;));
        mReceiveAgeTv.setText(&quot;age : &quot;+data.getString(&quot;age&quot;));
    } catch (JSONException e){
        e.printStackTrace();
    }
}
</code></pre>

<p><br/></p>

<h3>데이터를 JSON Array 로 보내고 받는 방법</h3>

<h5>2-3 Send Array</h5>

<pre><code class="language-Java">// 서버로 배열 데이터 전송할 때
private void sendArray(){
    JSONObject wrapObject = new JSONObject();
    JSONArray jsonArray = new JSONArray();
    try{
        for(int i = 0; i &lt; 10; i++){
            JSONObject jsonObject = new JSONObject();
            jsonObject.put(&quot;nation&quot;, mJsonNationEt.getText().toString());
            jsonObject.put(&quot;name&quot;, mJsonNameEt.getText().toString());
            jsonObject.put(&quot;address&quot;, mJsonAddressEt.getText().toString());
            jsonObject.put(&quot;age&quot;, mJsonAgeEt.getText().toString());
            jsonArray.put(jsonObject);
        }
        wrapObject.put(&quot;list&quot;,jsonArray);
        
        //실제 데이터 전송 메소드
        receiveArray(wrapObject.toString());
    }catch (JSONException e){
        e.printStackTrace();
    }
}
</code></pre>

<h5>2-4 Receive Array</h5>

<pre><code class="language-Java">// 서버에서 배열 데이터를 전송 받을 때
private void receiveArray(String dataObject){
    recyclerView.setVisibility(View.VISIBLE);
    objectResultLo.setVisibility(View.GONE);
    mItems.clear();
    try {
        // String 으로 들어온 값 JSONObject 로 1차 파싱
        JSONObject wrapObject = new JSONObject(dataObject);

        // JSONObject 의 키 &quot;list&quot; 의 값들을 JSONArray 형태로 변환
        JSONArray jsonArray = new JSONArray(wrapObject.getString(&quot;list&quot;));
        for(int i = 0; i &lt; jsonArray.length(); i++){
            // Array 에서 하나의 JSONObject 를 추출
            JSONObject dataJsonObject = jsonArray.getJSONObject(i);
            // 추출한 Object 에서 필요한 데이터를 표시할 방법을 정해서 화면에 표시
            // 필자는 RecyclerView 로 데이터를 표시 함
            mItems.add(new Item(dataJsonObject.getString(&quot;nation&quot;)+i,dataJsonObject.getString(&quot;name&quot;)+i,
                    dataJsonObject.getString(&quot;address&quot;)+i,dataJsonObject.getString(&quot;age&quot;)));
        }
        // Recycler Adapter 에서 데이터 변경 사항을 체크하라는 함수 호출
        adapter.notifyDataSetChanged();
    } catch (JSONException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p><br/></p>

<h4>Main Code</h4>

<pre><code class="language-Java">package charlie.JSONExample;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity implements View.OnClickListener{
    private static final int LAYOUT = R.layout.activity_main;
    private ArrayList&lt;Item&gt; mItems = new ArrayList&lt;&gt;();
    private RecyclerView.Adapter adapter;

    private EditText mJsonNationEt;
    private EditText mJsonNameEt;
    private EditText mJsonAddressEt;
    private EditText mJsonAgeEt;

    private TextView mReceiveTv;
    private TextView mReceiveNationTv;
    private TextView mReceiveNameTv;
    private TextView mReceiveAddressTv;
    private TextView mReceiveAgeTv;

    private Button mObjectBtn;
    private Button mArrayBtn;

    private RecyclerView recyclerView;

    private LinearLayout objectResultLo;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(LAYOUT);

        bindView();
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.objectBtn:
                sendObject();
                break;
            case R.id.arrayBtn:
                sendArray();
                break;
            default:
                break;
        }
    }

    private void bindView(){
        //bind view
        mJsonNameEt = (EditText) findViewById(R.id.jsonNameEt);
        mJsonNationEt = (EditText) findViewById(R.id.jsonNationEt);
        mJsonAddressEt = (EditText) findViewById(R.id.jsonAddressEt);
        mJsonAgeEt = (EditText) findViewById(R.id.jsonAgeEt);

        mReceiveTv = (TextView) findViewById(R.id.receiveTv);
        mReceiveNationTv = (TextView) findViewById(R.id.receiveNationTv);
        mReceiveNameTv = (TextView) findViewById(R.id.receiveNameTv);
        mReceiveAddressTv = (TextView) findViewById(R.id.receiveAddressTv);
        mReceiveAgeTv = (TextView) findViewById(R.id.receiveAgeTv);

        mObjectBtn = (Button) findViewById(R.id.objectBtn);
        mArrayBtn = (Button) findViewById(R.id.arrayBtn);

        recyclerView = (RecyclerView) findViewById(R.id.resultRv);

        objectResultLo = (LinearLayout) findViewById(R.id.objectResultLo);

        recyclerView.setVisibility(View.GONE);
        objectResultLo.setVisibility(View.GONE);
        //set listener
        mObjectBtn.setOnClickListener(this);
        mArrayBtn.setOnClickListener(this);

        //set Recycler View
        adapter = new RecyclerAdapter(mItems);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(adapter);
    }

    private void sendObject(){
        JSONObject jsonObject = new JSONObject();
        try{
            jsonObject.put(&quot;nation&quot;, mJsonNationEt.getText().toString());
            jsonObject.put(&quot;name&quot;, mJsonNameEt.getText().toString());
            jsonObject.put(&quot;address&quot;, mJsonAddressEt.getText().toString());
            jsonObject.put(&quot;age&quot;, mJsonAgeEt.getText().toString());
        }catch (JSONException e){
            e.printStackTrace();
        }
        receiveObject(jsonObject);
    }

    private void receiveObject(JSONObject data){
        recyclerView.setVisibility(View.GONE);
        objectResultLo.setVisibility(View.VISIBLE);
        try{
            mReceiveTv.setText(data.toString());
            mReceiveNationTv.setText(&quot;nation : &quot;+data.getString(&quot;nation&quot;));
            mReceiveNameTv.setText(&quot;name : &quot;+data.getString(&quot;nation&quot;));
            mReceiveAddressTv.setText(&quot;address : &quot;+data.getString(&quot;address&quot;));
            mReceiveAgeTv.setText(&quot;age : &quot;+data.getString(&quot;age&quot;));
        } catch (JSONException e){
            e.printStackTrace();
        }
    }


    // 서버로 배열 데이터 전송할 때
    private void sendArray(){
        JSONObject wrapObject = new JSONObject();
        JSONArray jsonArray = new JSONArray();
        try{
            for(int i = 0; i &lt; 10; i++){
                JSONObject jsonObject = new JSONObject();
                jsonObject.put(&quot;nation&quot;, mJsonNationEt.getText().toString());
                jsonObject.put(&quot;name&quot;, mJsonNameEt.getText().toString());
                jsonObject.put(&quot;address&quot;, mJsonAddressEt.getText().toString());
                jsonObject.put(&quot;age&quot;, mJsonAgeEt.getText().toString());
                jsonArray.put(jsonObject);
            }
            wrapObject.put(&quot;list&quot;,jsonArray);

            //실제 데이터 전송 메소드
            receiveArray(wrapObject.toString());
        }catch (JSONException e){
            e.printStackTrace();
        }
    }

    // 서버에서 배열 데이터를 전송 받을 때
    private void receiveArray(String dataObject){
        recyclerView.setVisibility(View.VISIBLE);
        objectResultLo.setVisibility(View.GONE);
        mItems.clear();
        try {
            // String 으로 들어온 값 JSONObject 로 1차 파싱
            JSONObject wrapObject = new JSONObject(dataObject);

            // JSONObject 의 키 &quot;list&quot; 의 값들을 JSONArray 형태로 변환
            JSONArray jsonArray = new JSONArray(wrapObject.getString(&quot;list&quot;));
            for(int i = 0; i &lt; jsonArray.length(); i++){
                // Array 에서 하나의 JSONObject 를 추출
                JSONObject dataJsonObject = jsonArray.getJSONObject(i);
                // 추출한 Object 에서 필요한 데이터를 표시할 방법을 정해서 화면에 표시
                // 필자는 RecyclerView 로 데이터를 표시 함
                mItems.add(new Item(dataJsonObject.getString(&quot;nation&quot;)+i,dataJsonObject.getString(&quot;name&quot;)+i,
                        dataJsonObject.getString(&quot;address&quot;)+i,dataJsonObject.getString(&quot;age&quot;)));
            }
            // Recycler Adapter 에서 데이터 변경 사항을 체크하라는 함수 호출
            adapter.notifyDataSetChanged();
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>위의 방법을 응용해서 각자 어플리케이션에 적용해보시면 됩니다.</p>

<p>본 주제와 무관하게 RecyclerView 를 사용하는 부분이 있어서 전체 코드는 GitHub에 공유해두도록 하겠습니다.</p>

<p>서버와 JSON 통신은 아래 링크에서 확인해주세요</p>

<p>2017/05/03 - [Java] - [Java] JSP - JSON 데이터 주고 받기 - JSONParser</p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] 현재 시간, 현재 날짜 구하기 (SimpleDateFormat)</title>
            <link>https://kiwinam.com/posts/6/android-simple-date-format/</link>
            <pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/6/android-simple-date-format/</guid>
            <description>[안드로이드] 현재 시간, 현재 날짜 구하기 (SimpleDateFormat) Android 현재 시간, 현재 날짜 구하기
SimpleDateFormat
Preview  Step1. 현재 시간 가져오기.
 long now = System.currentTimeMillis();   Step2. Date 생성하기
 Date date = new Date(now);   Step3. 가져오고 싶은 형식으로 가져오기
 SimpleDateFormat sdf = new SimpleDateFormat(&amp;ldquo;yyyy-MM-dd&amp;rdquo;);
 String getTime = sdf.format(date);
   
Result 
MainActivity.java
package charlie.myapplication; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.</description>
            <content type="html"><![CDATA[

<hr />

<h3 id="안드로이드-현재-시간-현재-날짜-구하기-simpledateformat">[안드로이드] 현재 시간, 현재 날짜 구하기 (SimpleDateFormat)</h3>

<p>Android 현재 시간, 현재 날짜 구하기</p>

<p><code>SimpleDateFormat</code></p>

<h5 id="preview">Preview</h5>

<ul>
<li><p>Step1. 현재 시간 가져오기.</p>

<ul>
<li>long now = System.currentTimeMillis();
<br/></li>
</ul></li>

<li><p>Step2. Date 생성하기</p>

<ul>
<li>Date date = new Date(now);
<br/></li>
</ul></li>

<li><p>Step3. 가져오고 싶은 형식으로 가져오기</p>

<ul>
<li><p>SimpleDateFormat sdf = new SimpleDateFormat(&ldquo;yyyy-MM-dd&rdquo;);</p></li>

<li><p>String getTime = sdf.format(date);</p></li>
</ul></li>
</ul>

<p><br/></p>

<h6 id="result">Result</h6>

<p><img src="/img/6/time-1.png" alt="" /></p>

<p><br/></p>

<p><code>MainActivity.java</code></p>

<pre><code class="language-java">
package charlie.myapplication;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import java.text.SimpleDateFormat;
import java.util.Date;

public class MainActivity extends AppCompatActivity implements View.OnClickListener{
    long mNow;
    Date mDate;
    SimpleDateFormat mFormat = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);

    TextView mTextView;
    Button mRefreshBtn;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //bind view
        mTextView = (TextView) findViewById(R.id.textView);
        mRefreshBtn = (Button) findViewById(R.id.refreshBtn);

        //bind listener
        mRefreshBtn.setOnClickListener(this);
    }

    private String getTime(){
        mNow = System.currentTimeMillis();
        mDate = new Date(mNow);
        return mFormat.format(mDate);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.refreshBtn:
                mTextView.setText(getTime());
                break;
            default:
                break;
        }
    }
}
</code></pre>

<p><br/></p>

<p><code>activity_main.xml</code></p>

<pre><code class="language-xml">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:orientation=&quot;vertical&quot;
    android:gravity=&quot;center&quot;
    tools:context=&quot;charlie.myapplication.MainActivity&quot;&gt;

    &lt;TextView
        android:id=&quot;@+id/textView&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:text=&quot;Hello World!&quot;
        android:textSize=&quot;18sp&quot;
        android:layout_marginBottom=&quot;14dp&quot;
        /&gt;
    &lt;Button
        android:id=&quot;@+id/refreshBtn&quot;
        android:text=&quot;refresh&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot; /&gt;
&lt;/LinearLayout&gt;
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>안드로이드 스튜디오 - GitHub 연동과 add, commit, push 개념</title>
            <link>https://kiwinam.com/posts/5/android-studio-github/</link>
            <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/5/android-studio-github/</guid>
            <description>안드로이드 스튜디오 - GitHub 연동과 add, commit, push 개념 개발자라면 거역할 수 없는 운명
GitHub
자신의 소스코드를 관리하는 측면의 장점도 있지만
전세계의 수많은 개발자들이 올리는 검증된 오픈 소스들을 브라우징 할 수 있는 좋은 툴입니다.
안드로이드 스튜디오에서 GitHub 와 연동하는 방법을 설명해드리겠습니다.
그 전에 짧게 깃에 대해 설명드립니다.
0. Git 이란? 개략적인 깃의 동작입니다.
Working Directory 에서 깃으로 관리 안되고 있는 파일들을 관리를 시작하려 합니다.
관리 하려는 목록에 추가(Add) 하고,</description>
            <content type="html"><![CDATA[

<hr />

<h3 id="안드로이드-스튜디오-github-연동과-add-commit-push-개념">안드로이드 스튜디오 - GitHub 연동과 add, commit, push 개념</h3>

<p>개발자라면 거역할 수 없는 운명</p>

<p><em>GitHub</em></p>

<p>자신의 소스코드를 관리하는 측면의 장점도 있지만</p>

<p>전세계의 수많은 개발자들이 올리는 검증된 오픈 소스들을 브라우징 할 수 있는 좋은 툴입니다.</p>

<p>안드로이드 스튜디오에서 GitHub 와 연동하는 방법을 설명해드리겠습니다.</p>

<p>그 전에 짧게 깃에 대해 설명드립니다.</p>

<hr />

<h5 id="0-git-이란">0. Git 이란?</h5>

<p><img src="/img/5/git-1.png" alt="" /></p>

<p>개략적인 깃의 동작입니다.</p>

<p>Working Directory 에서 깃으로 관리 안되고 있는 파일들을 관리를 시작하려 합니다.</p>

<p>관리 하려는 목록에 추가(Add) 하고,</p>

<p>이 관리할 파일들이 확정 (Commit) 되면 로컬 저장소(Head)에 저장이 되고</p>

<p>이 로컬 저장소에 있는 파일을 원격 서버인 (Github) 에 발행(Push) 합니다.</p>

<p>아직 정확히 이해 못하셔도 괜찮습니다. 일단 이런 프로세스를 가진 형상관리 프로그램이라는 것만 감 잡으시면 됩니다!.</p>

<h3 id="안드로이드-github-연동하기">안드로이드 - GitHub 연동하기.</h3>

<h5 id="1-git-다운로드">1. Git 다운로드</h5>

<p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>  (Git 다운로드 url)</p>

<p><img src="/img/5/git-2.png" alt="" /></p>

<p>링크를 통해 접속하게 되면 위와 같은 화면이 나옵니다.</p>

<p>여기서 여러분이 <em>사용하는 OS 에 맞춰</em> Git를 설치해주세요.</p>

<p>설치에는 특별한 사항은 없고 NEXT만 눌러주시면 됩니다. (OS X는 Xcode 설치시 git이 자동으로 설치됩니다.)</p>

<p>설치가 정상적으로 완료되면 CMD 창 (OS X는 터미널) 에서 git 이라는 명령어에 아래와 같은 출력이 나오면 정상적으로 설치 된 것입니다.</p>

<p><img src="/img/5/git-3.png" alt="" /></p>

<h5 id="2-github-계정-생성">2.  GitHub 계정 생성</h5>

<p><a href="https://github.com/join?source=header-home">https://github.com/join?source=header-home</a>   (깃 허브 계정 생성 url)</p>

<p><img src="/img/5/git-4.png" alt="" /></p>

<p>더블클릭을 하시면 이미지를 수정할 수 있습니다</p>

<p>링크로 이동하시면 위와 같은 회원가입 양식이 나옵니다.</p>

<p>모두 작성하고 회원 가입을 완료까지만 하시면 됩니다.</p>

<p>안드로이드 스튜디오 내부 기능으로 GitHub와 연동을 하게 되면 자동으로 레포지터리가 생성되기 때문에 굳이 Github 홈페이지에서 따로 생성 안하셔도 됩니다!</p>

<p><br/></p>

<h5 id="3-안드로이드-스튜디오-설정">3. 안드로이드 스튜디오 설정</h5>

<p>먼저 깃허브와 연동할 프로젝트를 열어줍니다.</p>

<p>그리고 메뉴 중 <code>[ VCS ] &gt;&gt; [ Import into Version Control ] &gt;&gt; [ Create Git Repository ]</code>  를 선택해 줍니다.</p>

<p><img src="/img/5/git-5.png" alt="" /></p>

<p>그러면 아래와 같은 화면이 나옵니다.</p>

<p>자신의 프로젝트가 있는 폴더를 선택해 줍니다. ( AndroidStudioProjects &gt; &ldquo;ProjectName&rdquo; )</p>

<p><img src="/img/5/git-6.png" alt="" /></p>

<p><img src="/img/5/git-7.png" alt="" /></p>

<p>그 다음 새로운 VCS Root 를 생성할거냐는 질문에 당연히 Yes를 눌러주세요.</p>

<p>방금 작업이 끝난 후에 안드로이드 프로젝트에 있는 파일 이름들이 전부다 <em>빨강색</em>  으로 변한 것을 알 수 있습니다.</p>

<p><img src="/img/5/git-8.png" alt="" /></p>

<p>이유는 아직 로컬 깃 저장소 (방금 지정한 깃 저장소) 에 저 파일들이 Add 되어 있지 않기 때문입니다.</p>

<p>아직 깃으로 형상관리를 시작하지 않았다. &ldquo;파일 변경 사항을 추적 하지 않는 중이다~~~&rdquo; 라고 알려주는 것입니다.</p>

<p>물론 Add와 Commit 하게 되면 색은 다시 돌아옵니다.</p>

<p>여기까지는 자신의 컴퓨터 (로컬 저장소) 에 Git 를 설정하였고</p>

<p>이제는 아까 회원가입한 GitHub 에 자신의 소스를 올려보도록 하겠습니다.</p>

<h5 id="4-안드로이드-스튜디오-github-연동하기">4. 안드로이드 스튜디오 - GitHub 연동하기</h5>

<p>안드로이드 스튜디오 설정으로 들어갑니다. (OS X 는 Preferences 입니다. Window는 안본지 오래되서..아마 Setting..?)</p>

<p><img src="/img/5/git-9.png" alt="" /></p>

<p>설정에서 [ Version Control ] &gt;&gt; [ GitHub ] 로 이동하면</p>

<p><img src="/img/5/git-10.png" alt="" /></p>

<p>GitHub 의 아이디와 비밀번호를 요구합니다.</p>

<p>아까 가입한 정보를 입력하고 Test 버튼을 누르시면 됩니다.</p>

<p>Test Button Click!</p>

<p><img src="/img/5/git-11.png" alt="" /></p>

<p>테스트 성공한 다음 OK 눌러서 빠져나가게 되면</p>

<p><img src="/img/5/git-12.png" alt="" /></p>

<p>이렇게 이 GitHub 레포지터리의 마스터 (관리자) 비밀번호를 설정하라 합니다.</p>

<p>이 프로젝트가 다른 개발자와 협업을 해야하는 경우 개인적인 비밀번호가 아닌 회사 혹은 프로젝트 비밀번호를 설정해주시면 됩니다.</p>

<p>마스터 비밀번호까지 설정하고 난 뒤,</p>

<p>왼쪽 사이드바 상단 Android를 Project 로 바꿔주세요.</p>

<p>바꾼 뒤 프로젝트 전체 파일을 우클릭 &gt;&gt; Git &gt;&gt; Add</p>

<p><img src="/img/5/git-13.png" alt="" /></p>

<p>프로젝트의 모든 파일을 Add 하게 되면 Stage area (준비 영역) 으로 이동됩니다.</p>

<p>아직 로컬 저장소에 저장 되진 않았지만 Commit 할 때 로컬 저장소에 저장될 것들 인거죠.</p>

<p>Add 하게 되면 빨강색이였던 이름들이 초록색으로 바뀝니다.</p>

<p><img src="/img/5/git-14.png" alt="" /></p>

<p>그 다음 메뉴에서 [ VCS ] &gt;&gt; [ Import into Version Control ] &gt;&gt; [ Share Project on GitHub ]  를 선택해서 깃 허브에 프로젝트를 연동합니다.</p>

<p><img src="/img/5/git-15.png" alt="" /></p>

<p>레포지터리 이름과 리모트 이름도 설정해줍니다.</p>

<p>전 그냥 디폴트 값으로 했습니다.</p>

<p><img src="/img/5/git-16.png" alt="" /></p>

<p>그 다음 메뉴에 있는 VCS Commit 버튼을 눌러줍니다.</p>

<p><img src="/img/5/git-17.png" alt="" /></p>

<p>아래와 같이 파일들이 모두 올라온 것을 확인하고</p>

<p>우하단에 Commit (확정) and Push (발행) 을 눌러줍니다.</p>

<p>Commit 만 할 경우 로컬 저장소에만 저장되고 Push 를 해줘야 GitHub에 발행됩니다.</p>

<p><img src="/img/5/git-18.png" alt="" /></p>

<p><img src="/img/5/git-19.png" alt="" /></p>

<p>깃허브에 성공적으로 공유되었다는 메시지를 확인하고</p>

<p><img src="/img/5/git-20.png" alt="" /></p>

<p>마지막으로 깃허브 홈페이지에서 방금 Push 한 파일을 확인해주시면 됩니다.!</p>
]]></content>
        </item>
        
        <item>
            <title>[Mac] 키노트 이미지 저장하기 (이미지 추출)</title>
            <link>https://kiwinam.com/posts/4/mac-save-keynote-image/</link>
            <pubDate>Mon, 27 Feb 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/4/mac-save-keynote-image/</guid>
            <description>[Mac] 키노트 이미지 저장하기 (이미지 추출) Window OS 에 적응 하신 분이라면
파워 포인트에서 이미지 만들어서 저장하는 방식 많이 사용 하셨을텐데요.
Mac Keynote 에서도 객체를 이미지로 추출할 수 있습니다 :)
먼저 키노트에서 객체를 만들어 줍니다.
(전 포스팅 하면서 만든 이미지를 사용했어요)
이렇게 키노트에서 필요한 객체를 만들어주고
전체를 다 같이 잡아준 뒤 &amp;lsquo;그룹&amp;rsquo; 으로 만들어줍니다.
그 다음 Command + C 으로 복사합니다.
이젠 Spotlight 를 켜주세요 Command + space bar</description>
            <content type="html"><![CDATA[

<hr />

<h3 id="mac-키노트-이미지-저장하기-이미지-추출">[Mac] 키노트 이미지 저장하기 (이미지 추출)</h3>

<p>Window OS 에 적응 하신 분이라면</p>

<p>파워 포인트에서 이미지 만들어서 저장하는 방식 많이 사용 하셨을텐데요.</p>

<p>Mac Keynote 에서도 객체를 이미지로 추출할 수 있습니다 :)</p>

<p>먼저 키노트에서 객체를 만들어 줍니다.</p>

<p>(전 포스팅 하면서 만든 이미지를 사용했어요)</p>

<p><img src="/img/4/mac-1.png" alt="key note image" /></p>

<p>이렇게 키노트에서 필요한 객체를 만들어주고</p>

<p>전체를 다 같이 잡아준 뒤 &lsquo;그룹&rsquo; 으로 만들어줍니다.</p>

<p>그 다음 Command + C 으로 복사합니다.</p>

<p>이젠 Spotlight 를 켜주세요 Command + space bar</p>

<p>Spotlight 에서 &lsquo;미리보기&rsquo; 를 검색해서 실행 시켜줍니다.</p>

<p><img src="/img/4/mac-2.png" alt="맥 미리보기" /></p>

<p>미리보기에서</p>

<p><code>Command + N</code></p>

<p>입력하게 되면 아까 복사해 두었던 객체가 올라옵니다.</p>

<p><img src="/img/4/mac-3.jpeg" alt="맥 미리보기" /></p>

<p>이렇게 올라오면 <code>Command + S</code> 로 저장해주시면 됩니다 :)</p>

<p><img src="/img/4/mac-4.png" alt="맥 미리보기" /></p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] 안드로이드 플랫폼의 특징</title>
            <link>https://kiwinam.com/posts/3/android-platform/</link>
            <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/3/android-platform/</guid>
            <description>안드로이드의 개념  - 안드로이드는 모바일 운영체제의 한 종류로, 어플리케이션이 실행할 때 필요한 자원을 공급해 주고 하드웨어에 대신 명령을 전달하고, 전체 시스템을 보호해주는 역할을 함.
 모바일 어플리케이션을 개발하는 유용한 미들웨어도 제공하는 소프트웨어.
 리눅스 커널과 모바일 플랫폼으로 구성.
  안드로이드 플랫폼의 특징 
 어플리케이션 프레임웍
 안드로이드 어플리케이션의 기본 뼈대가 되는 주요 요소인 컴포넌트들과 다양한 모바일 기능을 활용할 수 있도록 다양한 API 를 제공한다.
  달빅 가상 머신</description>
            <content type="html"><![CDATA[

<hr />

<h3 id="안드로이드의-개념">안드로이드의 개념</h3>

<p><br/>
- 안드로이드는 모바일 운영체제의 한 종류로, 어플리케이션이 실행할 때 필요한 자원을 공급해 주고 하드웨어에 대신 명령을 전달하고, 전체 시스템을 보호해주는 역할을 함.</p>

<ul>
<li><p>모바일 어플리케이션을 개발하는 유용한 미들웨어도 제공하는 소프트웨어.</p></li>

<li><p>리눅스 커널과 모바일 플랫폼으로 구성.</p></li>
</ul>

<h3 id="안드로이드-플랫폼의-특징">안드로이드 플랫폼의 특징</h3>

<p><br/></p>

<ol>
<li><p>어플리케이션 프레임웍</p>

<ul>
<li><p>안드로이드 어플리케이션의 기본 뼈대가 되는 주요 요소인 컴포넌트들과 다양한 모바일 기능을 활용할 수 있도록 다양한 API 를 제공한다.</p></li>
</ul></li>

<li><p>달빅 가상 머신</p>

<ul>
<li><p>일반 자바 어플리케이션은 자바 가상 머신에서 실행되지만 안드로이드 어플리케이션은 달빅 가상 머신에서 실행됩니다.</p></li>

<li><p>JVM에서는 자바 코드의 컴파일 결과인 Class 파일이 실행되지만, DVM 에서는 Dex 파일이 실행되는데, 이는 프로그램이 실행될 때 메모리 요구량을 적게 하는 등 모바일 환경에 최적화한 가상 머신입니다.</p></li>
</ul></li>

<li><p>통합 브라우저</p>

<ul>
<li>WebKit 엔진을 기반으로 한 브라우저를 제공하여 간단한 사용으로 웹 화면을 바로 실행할 수 있습니다.</li>
</ul></li>

<li><p>그래픽</p>

<ul>
<li>사용자가 원하는 디자인으로 2D, 3D 그래픽 처리가 가능합니다. 특히 3D 는 OpenGL ES 1.0을 기반으로 제공합니다.</li>
</ul></li>

<li><p>데이터베이스 시스템</p>

<ul>
<li>SQLite를 라이브러리로 포함하여 ㅣ소스가 부족한 모바일 환경에서도 데이터베이스 사용을 가능하게 합니다.</li>
</ul></li>

<li><p>멀티미디어</p></li>
</ol>

<ul>
<li>다양한 포맷의 오디오, 비디오 파일을 재생할 수 있습니다.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>[Android] Activity 생명주기 (Activity LifeCycle)</title>
            <link>https://kiwinam.com/posts/2/android-activity-life-cycle/</link>
            <pubDate>Sat, 25 Feb 2017 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/2/android-activity-life-cycle/</guid>
            <description>액티비티 (Activity) 생명주기 액티비티는 액티브 상태, 포즈 상태, 스탑 상태 이렇게 3가지의 기본 상태를 가지는데요.
간단하게 3가지의 기본 상태에 대해 설명해 드리겠습니다.
 액티브(Active) 상태
 화면 맨 앞으로 나와 사용자의 액션 (터치나 데이터 입력)과 상호 작용하는 액티비티.  포즈(Pause) 상태
 다른 액티비티로 가린 상태이지만 액티비티 일부가 사용자에게 여전히 보이는 상태.  스탑(Stop) 상태
 다른 액티비티에 완전히 가려져 사용자에게 안보이는 상태.
 이 상태도 살아 있는 상태로 액티비티를 유지하기 위한 정보를 유지.</description>
            <content type="html"><![CDATA[

<hr />

<h3 id="액티비티-activity-생명주기">액티비티 (Activity) 생명주기</h3>

<p>액티비티는 액티브 상태, 포즈 상태, 스탑 상태 이렇게 3가지의 기본 상태를 가지는데요.</p>

<p>간단하게 3가지의 기본 상태에 대해 설명해 드리겠습니다.</p>

<ol>
<li><p>액티브(Active) 상태</p>

<ul>
<li>화면 맨 앞으로 나와 사용자의 액션 (터치나 데이터 입력)과 상호 작용하는 액티비티.</li>
</ul></li>

<li><p>포즈(Pause) 상태</p>

<ul>
<li>다른 액티비티로 가린 상태이지만 액티비티 일부가 사용자에게 여전히 보이는 상태.</li>
</ul></li>

<li><p>스탑(Stop) 상태</p>

<ul>
<li><p>다른 액티비티에 완전히 가려져 사용자에게 안보이는 상태.</p></li>

<li><p>이 상태도 살아 있는 상태로 액티비티를 유지하기 위한 정보를 유지.</p></li>
</ul></li>
</ol>

<p>포즈 상태와 스탑 상태는 메모리가 부족한 경우 시스템에 의해서 종료될 수 있고,</p>

<p>포즈 상태보다 스탑 상태가 종료될 확률이 더 높습니다.</p>

<p>만약 사용자 시스템에 의해서 종료된 액티비티를 다시 요청한다면 시스템은 액티비티의 이전 상태를 복원시켜 재 시작 합니다.</p>

<p><img src="/img/2/activity_life_cycle.png" alt="Android activity life cycle" /></p>

<ul>
<li><p><code>onCreate()</code></p>

<p>액티비티가 처음 생성될 때 호출됩니다. 보통 해당 메서드에서는 초기화 작업을 수행합니다.</p>

<p>뷰 생성이나 리스트에 데이터를 바인딩하는 동작 등을 수행합니다.</p>

<p>이 메서드는 Bundle 객체를 파라미터로 받는데, 객체는 액티비티의 이전 상태 정보를 갖습니다. 그래서 액티비티가 다른 액티비티에 가렸다가 다시 앞으로 나와도 이전 상태를 유지할 수 있습니다.</p></li>
</ul>

<p><br/></p>

<ul>
<li><p><code>onRestart()</code></p>

<p>액티비티가 스탑(Stop) 되었다가 다시 시작될 때 호출됩니다.</p></li>
</ul>

<p><br/></p>

<ul>
<li><p><code>onStart()</code></p>

<p>액티비티가 사용자에게 보여지기 전에 호출됩니다.</p></li>
</ul>

<p><br/></p>

<ul>
<li><p><code>onResume()</code></p>

<p>사용자와 상호 작용하기 전에 호출됩니다. 이 시점은 액티비티가 화면의 가장 위로 올라온 상태입니다.</p></li>
</ul>

<p><br/></p>

<ul>
<li><p><code>onPause()</code></p>

<p>시스템이 다른 액티비티를 실행시키려고 할 때 호출됩니다.</p>

<p>이 메서드에서는 데이터 변화를 저장하거나 애니메이션과 같이 CPU가 지속적으로 일을 처리해야 하는 작업을 중단합니다.</p>

<p>해당 메서드가 종료되어야 다음 액티비티가 실행되므로 처리 시간을 짧게 하는 것이 좋습니다.</p></li>
</ul>

<p><br/></p>

<ul>
<li><p><code>onStop()</code></p>

<p>사용자에게 더 이상 액티비티가 보이지 않게 되었을 때 호출됩니다.</p>

<p>액티비티가 종료되기 전이나 다른 액티비티에 의해 액티비티가 전부 가려질 때 호출됩니다.</p></li>
</ul>

<p><br/></p>

<ul>
<li><p><code>onDestroy()</code></p>

<p>액티비티가 소멸되기 전에 호출됩니다. 액티비티 객체가 소멸되는 것은 액티비티가 종료되거나 시스템이 메모리 확보를 위해 일시적으로 객체를 소멸시킬 때 일어납니다.</p></li>
</ul>

<p><br/><br/></p>

<p>이러한 메서드들 중에서 <code>onPause()</code>, <code>onStop()</code>, <code>onDestroy()</code> 는 <em>킬러블(Killable)</em> 메서드입니다.</p>

<p>킬러블(Killable) 메서드는 메서드가 실행 중에 시스템의 자원이 부족한 상황이 되면 액티비티를 강제 종료 시킬 수 있는 상태의 메서입니다.</p>

<p>물론, 실행중인 메서드는 끝까지 실행하고, 리턴 후에 액티비티를 종료시킬 수 있습니다.</p>

<p>이 중 <code>onPause()</code> 메서드만 액티비티 종료 전 호출되는 것이 보장됩니다.</p>

<p>이 세 개의 메서드를 제외한 나머지는 시스템이 액티비티를 강제 종료하는 것에 보호됩니다.</p>
]]></content>
        </item>
        
        <item>
            <title>[안드로이드] 최초 실행 확인 법 - SharedPreferences</title>
            <link>https://kiwinam.com/posts/1/android-shared-preferences/</link>
            <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
            
            <guid>https://kiwinam.com/posts/1/android-shared-preferences/</guid>
            <description>안드로이드 최초 실행 확인 법  안드로이드 최초 실행을 확인하는 방법은
SharedPreferences 를 사용 하는 것입니다.
SharedPreferences 는 안드로이드에서 DB를 사용하지 않고 값을 저장할 때 사용합니다.
예를 들어 문자열, boolean 값 등..
SharedPreferences 는 파일 형태로 저장되며 App 을 삭제하기 전까지 유지가 되고, App 을 삭제하면 지워지고,
앱에서 Data 지우기를 해도 지워집니다.
[Activity]
//최초 실행 여부 판단하는 구문 SharedPreferences pref = getSharedPreferences(&amp;quot;isFirst&amp;quot;, Activity.MODE_PRIVATE); boolean first = pref.getBoolean(&amp;quot;isFirst&amp;quot;, false); if(first==false){ Log.</description>
            <content type="html"><![CDATA[

<hr />

<h2 id="안드로이드-최초-실행-확인-법">안드로이드 최초 실행 확인 법</h2>

<p><br/>
안드로이드 최초 실행을 확인하는 방법은</p>

<p><code>SharedPreferences</code> 를 사용 하는 것입니다.</p>

<p><code>SharedPreferences</code> 는 안드로이드에서 DB를 사용하지 않고 값을 저장할 때 사용합니다.</p>

<p>예를 들어 문자열, boolean 값 등..</p>

<p><code>SharedPreferences</code> 는 파일 형태로 저장되며 App 을 삭제하기 전까지 유지가 되고, App 을 삭제하면 지워지고,</p>

<p>앱에서  Data 지우기를 해도 지워집니다.</p>

<p><code>[Activity]</code></p>

<pre><code class="language-java">//최초 실행 여부 판단하는 구문
SharedPreferences pref = getSharedPreferences(&quot;isFirst&quot;, Activity.MODE_PRIVATE);
boolean first = pref.getBoolean(&quot;isFirst&quot;, false);
if(first==false){
    Log.d(&quot;Is first Time?&quot;, &quot;first&quot;);
    SharedPreferences.Editor editor = pref.edit();
    editor.putBoolean(&quot;isFirst&quot;,true);
    editor.commit();
    //앱 최초 실행시 하고 싶은 작업
}else{
    Log.d(&quot;Is first Time?&quot;, &quot;not first&quot;);
}
</code></pre>
]]></content>
        </item>
        
    </channel>
</rss>
