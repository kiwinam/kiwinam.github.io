<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>키위남</title>
    <link>https://kiwinam.com/</link>
    <description>Recent content on 키위남</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 28 Sep 2020 02:29:00 +0900</lastBuildDate>
    
	<atom:link href="https://kiwinam.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Javascript] 자바스크립트 호이스팅, 여기서 마무리 짓자.</title>
      <link>https://kiwinam.com/posts/41/javascript-hoisting/</link>
      <pubDate>Mon, 28 Sep 2020 02:29:00 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/41/javascript-hoisting/</guid>
      <description>이번 포스팅에선,
 호이스팅이 무엇인가? 변수와 함수에선 어떻게 쓰이는지? 왜 쓰면 안되는지  에 대해서 알아보겠습니다.

1. 안녕 호이스팅(Hoisting) ? 안녕 호이스팅! 1-1. 호이스팅이 뭡니까? 호이스팅(Hoisting) = 선언을 끌어 올린다.
  자바스크립트에서 호이스팅은 모든 선언문들 (var, let, const, function, class) 을 스코프의 가장 위로 끌어 올립니다.
Hoisting (명사) 끌어 올리기, 들어올려 나르기 출처 - 네이버 영어 사전  호이스팅이라는 단어의 정의에서도 보이지만, 모든 선언들을 해당 스코프의 {} 제일 위로 끌어 올립니다.</description>
    </item>
    
    <item>
      <title>[Android] aab 파일 apk 로 변환하기</title>
      <link>https://kiwinam.com/posts/40/aab-to-apk/</link>
      <pubDate>Mon, 31 Aug 2020 14:38:00 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/40/aab-to-apk/</guid>
      <description>aab to apk
  
TL;DR  download bundle tool jar (link 새창)
 run this code
java -jar &amp;quot;bundletool-all-1.2.0.jar&amp;quot;(버전은 최신 버전으로 맞추자) build-apks --bundle=&amp;quot;your.aab(변환할 .aab 파일)&amp;quot; --output=&amp;quot;universal.apks(.apk 파일 경로와 파일명&amp;quot; --mode=universal   


aab 가 무엇인가요? 안드로이드 앱 번들 (Android App Bundle)은 지속적으로 증가하는 APK 의 파일 크기를 해결하기 위해 나왔습니다.
안드로이드는 다양한 플랫폼들을 지원하는게 큰 장점이죠. 확장성이 너무 좋습니다. 하지만 이렇게 다양한 플랫폼을 지원하기 위해 각기 다른 CPU 와 화면 크기, 32bit, 64bit 에 맞는 이진 바이너리 파일들이 APK 에 하나로 뭉쳐져야 합니다.</description>
    </item>
    
    <item>
      <title>클린 코드 in TypeScript #3 - 테스트와 주석 편</title>
      <link>https://kiwinam.com/posts/39/ts-clean-code-test/</link>
      <pubDate>Thu, 18 Jun 2020 17:00:00 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/39/ts-clean-code-test/</guid>
      <description>Clean code
  연관된 글들 Clean Code Guide Series  클린 코드 in TypeScript #1 - 변수와 함수 편 클린 코드 in TypeScript #2 - 객체와 클래스 편 클린 코드 in TypeScript #3 - 테스트와 주석 편 (현재 글)  https://github.com/ryanmcdermott/clean-code-javascript
위 링크에 있는 깃헙 ryanmcdermott 의 clean-code-javascript 에서 내용을 참고하여 만든 클린 코드 가이드를 TypeScript 에서 사용할 수 있도록 정리한 글입니다. 

이전 편을 안보신 분들이라면 보고 오시는 걸 추천드립니다!</description>
    </item>
    
    <item>
      <title>클린 코드 in TypeScript #2 - 객체와 클래스편</title>
      <link>https://kiwinam.com/posts/38/ts-clean-code-class/</link>
      <pubDate>Thu, 26 Mar 2020 00:21:00 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/38/ts-clean-code-class/</guid>
      <description>Clean code
  연관된 글들 Clean Code Guide Series  클린 코드 in TypeScript #1 - 변수와 함수편 클린 코드 in TypeScript #2 - 객체와 클래스편 (현재 글)  https://github.com/ryanmcdermott/clean-code-javascript
위 링크에 있는 깃헙 ryanmcdermott 의 clean-code-javascript 에서 내용을 참고하여 만든 클린 코드 가이드를 TypeScript 에서 사용할 수 있도록 정리한 글입니다. 

이전 편을 안보신 분들이라면 보고 오시는 걸 추천드립니다!
반복적으로 등장하는 개념, 결국 클린 코드에서 하고자하는 의도를 파악하는데 더 도움이 됩니다.</description>
    </item>
    
    <item>
      <title>클린 코드 in TypeScript #1 - 변수와 함수편</title>
      <link>https://kiwinam.com/posts/37/ts-clean-code-guide/</link>
      <pubDate>Sun, 22 Mar 2020 14:38:00 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/37/ts-clean-code-guide/</guid>
      <description>정리하자 정리! 코드 정리!
  https://github.com/ryanmcdermott/clean-code-javascript
위 링크에 있는 깃헙 ryanmcdermott 의 clean-code-javascript 에서 내용을 참고하여 만든 클린 코드 가이드를 TypeScript 에서 사용할 수 있도록 정리한 글입니다. 
영어로 된 가이드 글을 번역하고 (고마워요 파파고) 제 생각에 중요하다 느낀 것들만 추려 모아 봤습니다.
이 곳에 적힌 모든 가이드를 따르긴 힘들겠지만, 이런게 있다라고 읽어보고 코드에 적용해보려는 노력을 하는게 클린 코드로 나아가는 한 걸음이라고 생각합니다!
이번 편은 변수와 함수에 대해 포스팅하겠습니다.</description>
    </item>
    
    <item>
      <title>REST API #3 - 안티 패턴</title>
      <link>https://kiwinam.com/posts/36/rest-anti-patterns/</link>
      <pubDate>Mon, 09 Mar 2020 14:48:01 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/36/rest-anti-patterns/</guid>
      <description>REST Series  REST API #1 - 이해하기 REST API #2 - 디자인 가이드 REST API #3 - 안티 패턴 (현재 글)  지난 포스팅에 이어, REST API 안티 패턴에 대해 포스팅 해보겠습니다.
이전 편을 안보신 분이 있다면 위 링크에서 확인해주세요.
지난 두 포스팅을 통해 REST API 가 어떤 것이고, 어떻게 디자인 하면 되는지 알아봤습니다.
우리가 어떤 걸 해야한다고 배울 때, 더 효과적으로 배우려면 어떤 걸 하지 말아야하는지를 배우면 좋습니다.</description>
    </item>
    
    <item>
      <title>REST API #2 - 디자인 가이드</title>
      <link>https://kiwinam.com/posts/35/rest-api-guide/</link>
      <pubDate>Sun, 08 Mar 2020 23:22:08 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/35/rest-api-guide/</guid>
      <description>REST Series  REST API #1 - 이해하기 REST API #2 - 디자인 가이드 (현재 글) REST API #3 - 안티 패턴  지난 포스팅에 이어, REST API 디자인 가이드에 대해 포스팅 해보겠습니다.
이전 편을 안보신 분이 있다면 위 링크에서 확인해주세요.

우린 소프트웨어 개발자로서 대부분의 시간을 REST API 를 사용하거나 구축하는데 사용하고 있습니다.
백엔드 개발자건, 안드로이드 개발자건, 프론트엔드 개발자건 다들 REST 한 API 를 사용하고 있죠.</description>
    </item>
    
    <item>
      <title>REST API #1 - 이해하기</title>
      <link>https://kiwinam.com/posts/34/what-is-rest-api/</link>
      <pubDate>Tue, 18 Feb 2020 07:15:00 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/34/what-is-rest-api/</guid>
      <description>REST Series  REST API #1 - 이해하기 (현재 글) REST API #2 - 디자인 가이드 REST API #3 - 안티 패턴  
REST API
소프트웨어 엔지니링을 공부하다 보면 어느샌가 마주하는 녀석입니다.
모두가 얘기하고 대부분이 사용하지만 REST API 가 무엇인지, 왜 쓰는지에 대해 알고 설명할 수 있는 사람은 그렇게 많지 않습니다.
물론 저도 그 중 하나였고, 이 글을 통해 더 명확하게 REST API 에 대해 정의하고자 합니다.</description>
    </item>
    
    <item>
      <title>Software 버전 관리 규칙, 너만 모르는 Semantic versioning </title>
      <link>https://kiwinam.com/posts/33/version-naming/</link>
      <pubDate>Sun, 02 Feb 2020 01:30:00 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/33/version-naming/</guid>
      <description>소프트웨어를 개발하다보면 정말 수많은 규칙들을 세우고 없애고 수정하는 것 같아요.
저도 혼자 개발하고 흡&amp;ndash;족 할 때는 이런 규칙과 컨벤션들에 대해 무관심 했었는데,
이제 프로로 데뷔한지 2년 정도 지났고, 최근 이직한 회사에서 컨벤션 관련된 작업을 진행하면서 함께 정했던 버전 관리 규칙 에 대해 공유하려고 합니다.


사실 개발자들 뿐만 아니라 개발자가 아닌 일반인 분들에게도 이 버전명 에 대해서는 익숙한 분이 많을거라 생각해요.
79.0.3945.130
  크롬의 최신 버전   어떤가요?</description>
    </item>
    
    <item>
      <title>[Git] 원격 (remote) 브랜치 삭제</title>
      <link>https://kiwinam.com/posts/32/git-remove-remote/</link>
      <pubDate>Sat, 04 Jan 2020 18:00:00 +0900</pubDate>
      
      <guid>https://kiwinam.com/posts/32/git-remove-remote/</guid>
      <description>Git (CMD) 에서 원격 브랜치를 삭제하는 방법은 2가지가 있습니다.
먼저 삭제할 브랜치의 이름을 develop 이라고 가정해보겠습니다.

방법 1 # remote_name 은 원격 저장소의 이름입니다. # branch_name 은 삭제할 브랜치의 이름입니다. # # git push &amp;lt;remote_name&amp;gt; --delete &amp;lt;branch_name&amp;gt; git push origin --delete develop  
방법 2 # git branch -d &amp;lt;branch_name&amp;gt; # git push &amp;lt;remote_name&amp;gt; --delete &amp;lt;branch_name&amp;gt; git branch -d develop git push origin develop  참조 (Stack overflow) How do I delete a Git branch locally and remotely?</description>
    </item>
    
  </channel>
</rss>